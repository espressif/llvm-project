stages:
  - build
  - pack
  - sign
  - private_deploy
  - test
  - public_deploy

image: ${CI_DOCKER_REGISTRY}/llvm-build:4

variables:

  # move all these to CI/CD settings
  REL_SFX: "llvm"
  CLANG_VER: "16"
  GCC_REL_NAME: "esp-2022r1"
  GCC_REL_VER: "gcc11_2_0"
  NEWLIB_REF: "esp-4.1.0_20230425"
  # TODO: LLVM-248. Upgrade binutils above 2.36 when Clang will be upgraded to >=17.x 
  # which supports 'zicsr' or 'zifencei' RISCV extensions via '-march='
  # https://www.spinics.net/lists/stable/msg645015.html
  BINUTILS_REF: "esp-2022r1-binutils"
  XTENSA_OVERLAYS_REF: "master"
  LLVM_GCC_TESTSUITE_REF: "esp-16.0.0-20230425"
  XTENSA_CLANG_TOOLCHAIN_REF: "esp-16.0.0-20230502"

  CROSS_ARM_IMAGE: $CI_DOCKER_REGISTRY/llvm-build-cross-arm:1
  PLATFORM_NAME_LINUX: "linux-amd64"
  PLATFORM_NAME_LINUX_ARMHF: "linux-armhf"
  PLATFORM_NAME_LINUX_ARM64: "linux-arm64"
  PLATFORM_NAME_WIN: "win64"
  PLATFORM_NAME_MACOS: "macos"
  PLATFORM_NAME_MACOS_ARM64: "macos-arm64"

  ARCHIVE_TOOL_LINUX: "tar -cJf"
  UNARCHIVE_TOOL_LINUX: "tar -xf"
  ARCHIVE_EXT_LINUX: "tar.xz"

  ARCHIVE_TOOL_WIN: "zip -9 -r"
  UNARCHIVE_TOOL_WIN: "unzip"
  ARCHIVE_EXT_WIN: "zip"

  PACK_ARCHIVE_TOOL_WIN: "tar -h -cJf"
  PACK_UNARCHIVE_TOOL_WIN: "${UNARCHIVE_TOOL_LINUX}"
  PACK_ARCHIVE_EXT_WIN: "${ARCHIVE_EXT_LINUX}"

  ARCHIVE_TOOL_MACOS: "tar -cJf"
  UNARCHIVE_TOOL_MACOS: "tar -xf"
  ARCHIVE_EXT_MACOS: "tar.xz"

  ARCHIVE_TOOL_NEWLIB: ${ARCHIVE_TOOL_LINUX}
  UNARCHIVE_TOOL_NEWLIB: ${UNARCHIVE_TOOL_LINUX}
  ARCHIVE_EXT_NEWLIB: ${ARCHIVE_EXT_LINUX}

  ARCHIVE_TOOL_COMPILER_RT: ${ARCHIVE_TOOL_LINUX}
  UNARCHIVE_TOOL_COMPILER_RT: ${UNARCHIVE_TOOL_LINUX}
  ARCHIVE_EXT_COMPILER_RT: ${ARCHIVE_EXT_LINUX}

  LIBS_ARCHIVE_TOOL: "${ARCHIVE_TOOL_LINUX}"
  LIBS_UNARCHIVE_TOOL: "${UNARCHIVE_TOOL_LINUX}"
  LIBS_ARCHIVE_EXT: "${ARCHIVE_EXT_LINUX}"

  DIST_DIR: "dist"
  BUILD_DIR: "build"
  DOWNLOADS_DIR: "downloads"

###########################################################################
#################### START OF TEMPORARY LEGACY CODE #######################
# TODO: the code below is to be removed after migration to new build script
  CONF_TARGET: "xtensa-esp32-elf"
  XTENSA_CLANG_TOOLCHAIN: "${CONF_TARGET}-clang"
##################### END OF TEMPORARY LEGACY CODE ########################
###########################################################################

.use_ci_tools_snippet: &use_ci_tools_snippet |
  curl -sSL ${CIT_LOADER_URL} -o cit_loader.sh && sh cit_loader.sh
  source citools/import_functions

.use_ci_tools:
  script:
    - *use_ci_tools_snippet

.add_gitlab_key_snippet: &add_gitlab_key_snippet |
  cit_add_ssh_key "${GITLAB_KEY}"

.add_gitlab_key:
  script:
    - *add_gitlab_key_snippet

# LLVM Build System used the remote address to show detailed version info, we'll change it to the public repository
.fix_origin_remote_for_public_snippet: &fix_origin_remote_for_public_snippet |
  git remote set-url origin "${GH_REPO_HTTPS}"

.fix_origin_remote_for_public:
  script:
    - *fix_origin_remote_for_public_snippet

.get_clang_toolchain_build_scripts_snippet: &get_clang_toolchain_build_scripts_snippet |
  git clone -b ${XTENSA_CLANG_TOOLCHAIN_REF} ${GITLAB_SSH_SERVER}/${XTENSA_CLANG_TOOLCHAIN_REPO}
  cp -r xtensa-clang-toolchain/* .

.get_clang_toolchain_build_scripts:
  script:
    - *get_clang_toolchain_build_scripts_snippet

before_script:
  - !reference [.use_ci_tools, script]
  - !reference [.add_gitlab_key, script]

include:
  - local: .universal-toolchain-release.yml
    rules:
      - if: $ESP_CLANG_LEGACY_RELEASE != "true"
  - local: .legacy-release.yml
    rules:
      - if: $ESP_CLANG_LEGACY_RELEASE == "true"
