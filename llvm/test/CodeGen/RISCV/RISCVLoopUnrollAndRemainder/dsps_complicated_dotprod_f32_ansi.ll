; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=true < %s | FileCheck %s
define dso_local float @dsps_complicated_dotprod_f32_ansi(ptr nocapture noundef readonly %data1, ptr nocapture noundef readonly %data2, i32 noundef %start_index, i32 noundef %end_index, i32 noundef %update1, i32 noundef %update2, float noundef %offset) local_unnamed_addr {
; CHECK-LABEL: define dso_local float @dsps_complicated_dotprod_f32_ansi(
; CHECK-SAME: ptr noalias nocapture noundef readonly [[DATA1:%.*]], ptr noalias nocapture noundef readonly [[DATA2:%.*]], i32 noundef [[START_INDEX:%.*]], i32 noundef [[END_INDEX:%.*]], i32 noundef [[UPDATE1:%.*]], i32 noundef [[UPDATE2:%.*]], float noundef [[OFFSET:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[INVARIANT_GEP:%.*]] = getelementptr float, ptr [[DATA1]], i32 [[UPDATE1]]
; CHECK-NEXT:    [[INVARIANT_GEP8:%.*]] = getelementptr float, ptr [[DATA2]], i32 [[UPDATE2]]
; CHECK-NEXT:    [[SUB:%.*]] = add nsw i32 [[END_INDEX]], -8
; CHECK-NEXT:    [[CMP10:%.*]] = icmp slt i32 [[SUB]], [[START_INDEX]]
; CHECK-NEXT:    br i1 [[CMP10]], label [[FOR_COND_PREHEADER:%.*]], label [[FOR_BODY_7:%.*]]
; CHECK:       for.cond.preheader:
; CHECK-NEXT:    [[RESULT0_0_LCSSA:%.*]] = phi i32 [ [[START_INDEX]], [[ENTRY:%.*]] ], [ [[INC_7:%.*]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT0_0_LCSSA1:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_7:%.*]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT0_0_LCSSA2:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_6:%.*]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT0_0_LCSSA3:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_5:%.*]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT0_0_LCSSA4:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_4:%.*]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT0_0_LCSSA5:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_3:%.*]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT0_0_LCSSA6:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_2:%.*]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT0_0_LCSSA7:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_1:%.*]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT0_0_LCSSA8:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3:%.*]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[RESULT0_0_LCSSA]], [[END_INDEX]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY_CLONE:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.7:
; CHECK-NEXT:    [[I_012:%.*]] = phi i32 [ [[START_INDEX]], [[ENTRY]] ], [ [[INC_7]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT6:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_6]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT5:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_5]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT4:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_4]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT3:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_3]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT2:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_2]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT1:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3_1]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[RESULT0:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[ADD3]], [[FOR_BODY_7]] ]
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[I_012]]
; CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[GEP]], align 4
; CHECK-NEXT:    [[GEP9:%.*]] = getelementptr float, ptr [[INVARIANT_GEP8]], i32 [[I_012]]
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr [[GEP9]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP0]], float [[TMP1]], float [[OFFSET]])
; CHECK-NEXT:    [[ADD3]] = fadd float [[RESULT0]], [[TMP2]]
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[I_012]], 1
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[INC]]
; CHECK-NEXT:    [[TMP3:%.*]] = load float, ptr [[GEP_1]], align 4
; CHECK-NEXT:    [[GEP9_1:%.*]] = getelementptr float, ptr [[INVARIANT_GEP8]], i32 [[INC]]
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[GEP9_1]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP3]], float [[TMP4]], float [[OFFSET]])
; CHECK-NEXT:    [[ADD3_1]] = fadd float [[RESULT1]], [[TMP5]]
; CHECK-NEXT:    [[INC_1:%.*]] = add nsw i32 [[I_012]], 2
; CHECK-NEXT:    [[GEP_2:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[INC_1]]
; CHECK-NEXT:    [[TMP6:%.*]] = load float, ptr [[GEP_2]], align 4
; CHECK-NEXT:    [[GEP9_2:%.*]] = getelementptr float, ptr [[INVARIANT_GEP8]], i32 [[INC_1]]
; CHECK-NEXT:    [[TMP7:%.*]] = load float, ptr [[GEP9_2]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP6]], float [[TMP7]], float [[OFFSET]])
; CHECK-NEXT:    [[ADD3_2]] = fadd float [[RESULT2]], [[TMP8]]
; CHECK-NEXT:    [[INC_2:%.*]] = add nsw i32 [[I_012]], 3
; CHECK-NEXT:    [[GEP_3:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[INC_2]]
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[GEP_3]], align 4
; CHECK-NEXT:    [[GEP9_3:%.*]] = getelementptr float, ptr [[INVARIANT_GEP8]], i32 [[INC_2]]
; CHECK-NEXT:    [[TMP10:%.*]] = load float, ptr [[GEP9_3]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP9]], float [[TMP10]], float [[OFFSET]])
; CHECK-NEXT:    [[ADD3_3]] = fadd float [[RESULT3]], [[TMP11]]
; CHECK-NEXT:    [[INC_3:%.*]] = add nsw i32 [[I_012]], 4
; CHECK-NEXT:    [[GEP_4:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[INC_3]]
; CHECK-NEXT:    [[TMP12:%.*]] = load float, ptr [[GEP_4]], align 4
; CHECK-NEXT:    [[GEP9_4:%.*]] = getelementptr float, ptr [[INVARIANT_GEP8]], i32 [[INC_3]]
; CHECK-NEXT:    [[TMP13:%.*]] = load float, ptr [[GEP9_4]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP12]], float [[TMP13]], float [[OFFSET]])
; CHECK-NEXT:    [[ADD3_4]] = fadd float [[RESULT4]], [[TMP14]]
; CHECK-NEXT:    [[INC_4:%.*]] = add nsw i32 [[I_012]], 5
; CHECK-NEXT:    [[GEP_5:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[INC_4]]
; CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[GEP_5]], align 4
; CHECK-NEXT:    [[GEP9_5:%.*]] = getelementptr float, ptr [[INVARIANT_GEP8]], i32 [[INC_4]]
; CHECK-NEXT:    [[TMP16:%.*]] = load float, ptr [[GEP9_5]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP15]], float [[TMP16]], float [[OFFSET]])
; CHECK-NEXT:    [[ADD3_5]] = fadd float [[RESULT5]], [[TMP17]]
; CHECK-NEXT:    [[INC_5:%.*]] = add nsw i32 [[I_012]], 6
; CHECK-NEXT:    [[GEP_6:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[INC_5]]
; CHECK-NEXT:    [[TMP18:%.*]] = load float, ptr [[GEP_6]], align 4
; CHECK-NEXT:    [[GEP9_6:%.*]] = getelementptr float, ptr [[INVARIANT_GEP8]], i32 [[INC_5]]
; CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[GEP9_6]], align 4
; CHECK-NEXT:    [[TMP20:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP18]], float [[TMP19]], float [[OFFSET]])
; CHECK-NEXT:    [[ADD3_6]] = fadd float [[RESULT6]], [[TMP20]]
; CHECK-NEXT:    [[INC_6:%.*]] = add nsw i32 [[I_012]], 7
; CHECK-NEXT:    [[GEP_7:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[INC_6]]
; CHECK-NEXT:    [[TMP21:%.*]] = load float, ptr [[GEP_7]], align 4
; CHECK-NEXT:    [[GEP9_7:%.*]] = getelementptr float, ptr [[INVARIANT_GEP8]], i32 [[INC_6]]
; CHECK-NEXT:    [[TMP22:%.*]] = load float, ptr [[GEP9_7]], align 4
; CHECK-NEXT:    [[TMP23:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP21]], float [[TMP22]], float [[OFFSET]])
; CHECK-NEXT:    [[ADD3_7]] = fadd float [[ADD3_6]], [[TMP23]]
; CHECK-NEXT:    [[INC_7]] = add nsw i32 [[I_012]], 8
; CHECK-NEXT:    [[EXITCOND_NOT_7:%.*]] = icmp slt i32 [[INC_7]], [[SUB]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_7]], label [[FOR_COND_PREHEADER]], label [[FOR_BODY_7]]
; CHECK:       for.body.clone:
; CHECK-NEXT:    [[I_012_CLONE:%.*]] = phi i32 [ [[RESULT0_0_LCSSA]], [[FOR_COND_PREHEADER]] ], [ [[INC_CLONE:%.*]], [[FOR_BODY_CLONE]] ]
; CHECK-NEXT:    [[RESULT_011_CLONE:%.*]] = phi float [ [[RESULT0_0_LCSSA8]], [[FOR_COND_PREHEADER]] ], [ [[ADD3_CLONE:%.*]], [[FOR_BODY_CLONE]] ]
; CHECK-NEXT:    [[GEP_CLONE:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[I_012_CLONE]]
; CHECK-NEXT:    [[TMP24:%.*]] = load float, ptr [[GEP_CLONE]], align 4
; CHECK-NEXT:    [[GEP9_CLONE:%.*]] = getelementptr float, ptr [[INVARIANT_GEP8]], i32 [[I_012_CLONE]]
; CHECK-NEXT:    [[TMP25:%.*]] = load float, ptr [[GEP9_CLONE]], align 4
; CHECK-NEXT:    [[TMP26:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP24]], float [[TMP25]], float [[OFFSET]])
; CHECK-NEXT:    [[ADD3_CLONE]] = fadd float [[RESULT_011_CLONE]], [[TMP26]]
; CHECK-NEXT:    [[INC_CLONE]] = add nsw i32 [[I_012_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND_NOT_CLONE:%.*]] = icmp eq i32 [[INC_CLONE]], [[END_INDEX]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_CLONE]], label [[FOR_END]], label [[FOR_BODY_CLONE]]
; CHECK:       for.end:
; CHECK-NEXT:    [[RESULT_0_LCSSA:%.*]] = phi float [ [[ADD3_CLONE]], [[FOR_BODY_CLONE]] ], [ [[RESULT0_0_LCSSA8]], [[FOR_COND_PREHEADER]] ]
; CHECK-NEXT:    [[ADD64:%.*]] = fadd float [[RESULT0_0_LCSSA1]], [[RESULT_0_LCSSA]]
; CHECK-NEXT:    [[ADD65:%.*]] = fadd float [[RESULT0_0_LCSSA2]], [[RESULT0_0_LCSSA3]]
; CHECK-NEXT:    [[ADD66:%.*]] = fadd float [[RESULT0_0_LCSSA4]], [[RESULT0_0_LCSSA5]]
; CHECK-NEXT:    [[ADD67:%.*]] = fadd float [[RESULT0_0_LCSSA6]], [[RESULT0_0_LCSSA7]]
; CHECK-NEXT:    [[ADD68:%.*]] = fadd float [[ADD65]], [[ADD64]]
; CHECK-NEXT:    [[ADD69:%.*]] = fadd float [[ADD66]], [[ADD67]]
; CHECK-NEXT:    [[ADD70:%.*]] = fadd float [[ADD69]], [[ADD68]]
; CHECK-NEXT:    ret float [[ADD70]]
;
entry:
  %invariant.gep = getelementptr float, ptr %data1, i32 %update1
  %invariant.gep8 = getelementptr float, ptr %data2, i32 %update2
  %cmp10 = icmp slt i32 %start_index, %end_index
  br i1 %cmp10, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %result.0.lcssa = phi float [ 0.000000e+00, %entry ], [ %add3, %for.body ]
  ret float %result.0.lcssa

for.body:                                         ; preds = %for.body, %entry
  %i.012 = phi i32 [ %inc, %for.body ], [ %start_index, %entry ]
  %result.011 = phi float [ %add3, %for.body ], [ 0.000000e+00, %entry ]
  %gep = getelementptr float, ptr %invariant.gep, i32 %i.012
  %0 = load float, ptr %gep, align 4
  %gep9 = getelementptr float, ptr %invariant.gep8, i32 %i.012
  %1 = load float, ptr %gep9, align 4
  %2 = tail call float @llvm.fmuladd.f32(float %0, float %1, float %offset)
  %add3 = fadd float %result.011, %2
  %inc = add nsw i32 %i.012, 1
  %exitcond.not = icmp eq i32 %inc, %end_index
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}
