; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=true < %s | FileCheck %s
%struct.fir_f32_s = type { ptr, ptr, i32, i32, i32, i16 }
define dso_local noundef i32 @dsps_fir_f32_ansi(ptr nocapture noundef %fir, ptr nocapture noundef readonly %input, ptr nocapture noundef writeonly %output, i32 noundef %len) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_fir_f32_ansi(
; CHECK-SAME: ptr noalias nocapture noundef [[FIR:%.*]], ptr noalias nocapture noundef readonly [[INPUT:%.*]], ptr noalias nocapture noundef writeonly [[OUTPUT:%.*]], i32 noundef [[LEN:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = icmp sgt i32 [[LEN]], 2
; CHECK-NEXT:    br i1 [[TMP0]], label [[FOR_COND_PREHEADER:%.*]], label [[FOR_BODY_LR_PH_CLONE_PREHEADER:%.*]]
; CHECK:       for.cond.preheader:
; CHECK-NEXT:    [[DELAY:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S:%.*]], ptr [[FIR]], i32 0, i32 1
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    [[POS:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 3
; CHECK-NEXT:    [[N:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[N]], align 4
; CHECK-NEXT:    [[SUB:%.*]] = add nsw i32 [[TMP2]], -7
; CHECK-NEXT:    [[DOTPRE:%.*]] = load i32, ptr [[POS]], align 4
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP3:%.*]] = phi i32 [ [[DOTPRE]], [[FOR_COND_PREHEADER]] ], [ [[SPEC_STORE_SELECT:%.*]], [[FOR_END:%.*]] ]
; CHECK-NEXT:    [[I_068:%.*]] = phi i32 [ 0, [[FOR_COND_PREHEADER]] ], [ [[INC33_MODIFY:%.*]], [[FOR_END]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[I_068]]
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[TMP3]]
; CHECK-NEXT:    store float [[TMP4]], ptr [[ARRAYIDX1]], align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP3]], 1
; CHECK-NEXT:    [[CMP4_NOT:%.*]] = icmp slt i32 [[INC]], [[TMP2]]
; CHECK-NEXT:    [[SPEC_STORE_SELECT]] = select i1 [[CMP4_NOT]], i32 [[INC]], i32 0
; CHECK-NEXT:    store i32 [[SPEC_STORE_SELECT]], ptr [[POS]], align 4
; CHECK-NEXT:    [[CMP957:%.*]] = icmp slt i32 [[SPEC_STORE_SELECT]], [[SUB]]
; CHECK-NEXT:    br i1 [[CMP957]], label [[FOR_BODY11_LR_PH_MODIFY:%.*]], label [[FOR_COND18_PREHEADER_MODIFY:%.*]]
; CHECK:       for.cond18.preheader.modify:
; CHECK-NEXT:    [[N_060_MODIFY_CLONE:%.*]] = phi i32 [ [[SPEC_STORE_SELECT]], [[FOR_BODY]] ], [ [[INC16_MODIFY:%.*]], [[FOR_BODY11_MODIFY:%.*]] ]
; CHECK-NEXT:    [[COEFF_POS_059_MODIFY_CLONE:%.*]] = phi i32 [ 0, [[FOR_BODY]] ], [ [[INC12_MODIFY:%.*]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC_058_MODIFY_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP24:%.*]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP25:%.*]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC4_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP26:%.*]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC7_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP27:%.*]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC10_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP28:%.*]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC13_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP29:%.*]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC17_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP30:%.*]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC20_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP31:%.*]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[CMP_SLT:%.*]] = icmp slt i32 [[N_060_MODIFY_CLONE]], [[TMP2]]
; CHECK-NEXT:    br i1 [[CMP_SLT]], label [[FOR_BODY11_LR_PH:%.*]], label [[FOR_COND18_PREHEADER:%.*]]
; CHECK:       for.body11.lr.ph:
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = add i32 [[TMP2]], [[COEFF_POS_059_MODIFY_CLONE]]
; CHECK-NEXT:    br label [[FOR_BODY11:%.*]]
; CHECK:       for.body11.lr.ph.modify:
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    br label [[FOR_BODY11_MODIFY]]
; CHECK:       for.body11.modify:
; CHECK-NEXT:    [[N_060_MODIFY:%.*]] = phi i32 [ [[SPEC_STORE_SELECT]], [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[INC16_MODIFY]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[COEFF_POS_059_MODIFY:%.*]] = phi i32 [ 0, [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[INC12_MODIFY]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC_058_MODIFY:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[TMP24]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[TMP25]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC4:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[TMP26]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC7:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[TMP27]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC10:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[TMP28]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC13:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[TMP29]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC17:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[TMP30]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[ACC20:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY11_LR_PH_MODIFY]] ], [ [[TMP31]], [[FOR_BODY11_MODIFY]] ]
; CHECK-NEXT:    [[INC12_MODIFY]] = add nuw nsw i32 [[COEFF_POS_059_MODIFY]], 8
; CHECK-NEXT:    [[INC16_MODIFY]] = add nsw i32 [[N_060_MODIFY]], 8
; CHECK-NEXT:    [[ADD7:%.*]] = or disjoint i32 [[COEFF_POS_059_MODIFY]], 7
; CHECK-NEXT:    [[ARRAYIDX13_MODIFY:%.*]] = getelementptr inbounds float, ptr [[TMP7]], i32 [[COEFF_POS_059_MODIFY]]
; CHECK-NEXT:    [[ARRAYIDX15_MODIFY:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[N_060_MODIFY]]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX13_MODIFY]], i32 1
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX15_MODIFY]], i32 1
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX13_MODIFY]], i32 2
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX15_MODIFY]], i32 2
; CHECK-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX13_MODIFY]], i32 3
; CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX15_MODIFY]], i32 3
; CHECK-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX13_MODIFY]], i32 4
; CHECK-NEXT:    [[ARRAYIDX12:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX15_MODIFY]], i32 4
; CHECK-NEXT:    [[ARRAYIDX14:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX13_MODIFY]], i32 5
; CHECK-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX15_MODIFY]], i32 5
; CHECK-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX13_MODIFY]], i32 6
; CHECK-NEXT:    [[ARRAYIDX19:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX15_MODIFY]], i32 6
; CHECK-NEXT:    [[ARRAYIDX21:%.*]] = getelementptr inbounds float, ptr [[TMP7]], i32 [[ADD7]]
; CHECK-NEXT:    [[ARRAYIDX22:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX15_MODIFY]], i32 7
; CHECK-NEXT:    [[TMP8:%.*]] = load float, ptr [[ARRAYIDX13_MODIFY]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[ARRAYIDX15_MODIFY]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = load float, ptr [[ARRAYIDX3]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = load float, ptr [[ARRAYIDX5]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = load float, ptr [[ARRAYIDX6]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[ARRAYIDX9]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = load float, ptr [[ARRAYIDX11]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = load float, ptr [[ARRAYIDX12]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = load float, ptr [[ARRAYIDX14]], align 4
; CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[ARRAYIDX16]], align 4
; CHECK-NEXT:    [[TMP20:%.*]] = load float, ptr [[ARRAYIDX18]], align 4
; CHECK-NEXT:    [[TMP21:%.*]] = load float, ptr [[ARRAYIDX19]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = load float, ptr [[ARRAYIDX21]], align 4
; CHECK-NEXT:    [[TMP23:%.*]] = load float, ptr [[ARRAYIDX22]], align 4
; CHECK-NEXT:    [[TMP24]] = tail call float @llvm.fmuladd.f32(float [[TMP8]], float [[TMP9]], float [[ACC_058_MODIFY]])
; CHECK-NEXT:    [[TMP25]] = tail call float @llvm.fmuladd.f32(float [[TMP10]], float [[TMP11]], float [[ACC]])
; CHECK-NEXT:    [[TMP26]] = tail call float @llvm.fmuladd.f32(float [[TMP12]], float [[TMP13]], float [[ACC4]])
; CHECK-NEXT:    [[TMP27]] = tail call float @llvm.fmuladd.f32(float [[TMP14]], float [[TMP15]], float [[ACC7]])
; CHECK-NEXT:    [[TMP28]] = tail call float @llvm.fmuladd.f32(float [[TMP16]], float [[TMP17]], float [[ACC10]])
; CHECK-NEXT:    [[TMP29]] = tail call float @llvm.fmuladd.f32(float [[TMP18]], float [[TMP19]], float [[ACC13]])
; CHECK-NEXT:    [[TMP30]] = tail call float @llvm.fmuladd.f32(float [[TMP20]], float [[TMP21]], float [[ACC17]])
; CHECK-NEXT:    [[TMP31]] = tail call float @llvm.fmuladd.f32(float [[TMP22]], float [[TMP23]], float [[ACC20]])
; CHECK-NEXT:    [[CMP11:%.*]] = icmp slt i32 [[INC16_MODIFY]], [[SUB]]
; CHECK-NEXT:    br i1 [[CMP11]], label [[FOR_BODY11_MODIFY]], label [[FOR_COND18_PREHEADER_MODIFY]]
; CHECK:       for.cond18.preheader.loopexit:
; CHECK-NEXT:    [[TMP32:%.*]] = sub i32 [[TMP6]], [[N_060_MODIFY_CLONE]]
; CHECK-NEXT:    br label [[FOR_COND18_PREHEADER]]
; CHECK:       for.cond18.preheader:
; CHECK-NEXT:    [[ACC_0_LCSSA:%.*]] = phi float [ [[ACC_058_MODIFY_CLONE]], [[FOR_COND18_PREHEADER_MODIFY]] ], [ [[TMP37:%.*]], [[FOR_COND18_PREHEADER_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[COEFF_POS_0_LCSSA:%.*]] = phi i32 [ [[COEFF_POS_059_MODIFY_CLONE]], [[FOR_COND18_PREHEADER_MODIFY]] ], [ [[TMP32]], [[FOR_COND18_PREHEADER_LOOPEXIT]] ]
; CHECK-NEXT:    [[TMP33:%.*]] = add nsw i32 [[SPEC_STORE_SELECT]], -7
; CHECK-NEXT:    [[CMP2062:%.*]] = icmp sgt i32 [[SPEC_STORE_SELECT]], 7
; CHECK-NEXT:    br i1 [[CMP2062]], label [[FOR_BODY22_LR_PH_MODIFY:%.*]], label [[FOR_COND_CLEANUP21:%.*]]
; CHECK:       for.body22.lr.ph:
; CHECK-NEXT:    [[TMP34:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    br label [[FOR_BODY22:%.*]]
; CHECK:       for.body11:
; CHECK-NEXT:    [[N_060:%.*]] = phi i32 [ [[N_060_MODIFY_CLONE]], [[FOR_BODY11_LR_PH]] ], [ [[INC16:%.*]], [[FOR_BODY11]] ]
; CHECK-NEXT:    [[COEFF_POS_059:%.*]] = phi i32 [ [[COEFF_POS_059_MODIFY_CLONE]], [[FOR_BODY11_LR_PH]] ], [ [[INC12:%.*]], [[FOR_BODY11]] ]
; CHECK-NEXT:    [[ACC_058:%.*]] = phi float [ [[ACC_058_MODIFY_CLONE]], [[FOR_BODY11_LR_PH]] ], [ [[TMP37]], [[FOR_BODY11]] ]
; CHECK-NEXT:    [[INC12]] = add nuw i32 [[COEFF_POS_059]], 1
; CHECK-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds float, ptr [[TMP5]], i32 [[COEFF_POS_059]]
; CHECK-NEXT:    [[TMP35:%.*]] = load float, ptr [[ARRAYIDX13]], align 4
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[N_060]]
; CHECK-NEXT:    [[TMP36:%.*]] = load float, ptr [[ARRAYIDX15]], align 4
; CHECK-NEXT:    [[TMP37]] = tail call float @llvm.fmuladd.f32(float [[TMP35]], float [[TMP36]], float [[ACC_058]])
; CHECK-NEXT:    [[INC16]] = add nsw i32 [[N_060]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC16]], [[TMP2]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND18_PREHEADER_LOOPEXIT]], label [[FOR_BODY11]]
; CHECK:       for.cond.cleanup21:
; CHECK-NEXT:    [[N17_065_MODIFY_CLONE:%.*]] = phi i32 [ 0, [[FOR_COND18_PREHEADER]] ], [ [[TMP39:%.*]], [[FOR_BODY22_MODIFY:%.*]] ]
; CHECK-NEXT:    [[COEFF_POS_164_MODIFY_CLONE:%.*]] = phi i32 [ [[COEFF_POS_0_LCSSA]], [[FOR_COND18_PREHEADER]] ], [ [[INC24_MODIFY:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC_163_MODIFY_CLONE:%.*]] = phi float [ [[ACC_0_LCSSA]], [[FOR_COND18_PREHEADER]] ], [ [[TMP56:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC23_CLONE:%.*]] = phi float [ [[ACC_CLONE]], [[FOR_COND18_PREHEADER]] ], [ [[TMP57:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC27_CLONE:%.*]] = phi float [ [[ACC4_CLONE]], [[FOR_COND18_PREHEADER]] ], [ [[TMP58:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC30_CLONE:%.*]] = phi float [ [[ACC7_CLONE]], [[FOR_COND18_PREHEADER]] ], [ [[TMP59:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC34_CLONE:%.*]] = phi float [ [[ACC10_CLONE]], [[FOR_COND18_PREHEADER]] ], [ [[TMP60:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC37_CLONE:%.*]] = phi float [ [[ACC13_CLONE]], [[FOR_COND18_PREHEADER]] ], [ [[TMP61:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC40_CLONE:%.*]] = phi float [ [[ACC17_CLONE]], [[FOR_COND18_PREHEADER]] ], [ [[TMP62:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC44_CLONE:%.*]] = phi float [ [[ACC20_CLONE]], [[FOR_COND18_PREHEADER]] ], [ [[TMP63:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[CMP47:%.*]] = icmp slt i32 [[N17_065_MODIFY_CLONE]], [[SPEC_STORE_SELECT]]
; CHECK-NEXT:    br i1 [[CMP47]], label [[FOR_BODY22_LR_PH:%.*]], label [[FOR_END]]
; CHECK:       for.body22.lr.ph.modify:
; CHECK-NEXT:    [[TMP38:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP39]] = and i32 [[SPEC_STORE_SELECT]], 2147483640
; CHECK-NEXT:    br label [[FOR_BODY22_MODIFY]]
; CHECK:       for.body22.modify:
; CHECK-NEXT:    [[N17_065_MODIFY:%.*]] = phi i32 [ 0, [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[INC29_MODIFY:%.*]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[COEFF_POS_164_MODIFY:%.*]] = phi i32 [ [[COEFF_POS_0_LCSSA]], [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[INC24_MODIFY]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC_163_MODIFY:%.*]] = phi float [ [[ACC_0_LCSSA]], [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[TMP56]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC23:%.*]] = phi float [ [[ACC_CLONE]], [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[TMP57]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC27:%.*]] = phi float [ [[ACC4_CLONE]], [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[TMP58]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC30:%.*]] = phi float [ [[ACC7_CLONE]], [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[TMP59]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC34:%.*]] = phi float [ [[ACC10_CLONE]], [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[TMP60]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC37:%.*]] = phi float [ [[ACC13_CLONE]], [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[TMP61]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC40:%.*]] = phi float [ [[ACC17_CLONE]], [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[TMP62]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[ACC44:%.*]] = phi float [ [[ACC20_CLONE]], [[FOR_BODY22_LR_PH_MODIFY]] ], [ [[TMP63]], [[FOR_BODY22_MODIFY]] ]
; CHECK-NEXT:    [[INC24_MODIFY]] = add nuw nsw i32 [[COEFF_POS_164_MODIFY]], 8
; CHECK-NEXT:    [[INC29_MODIFY]] = add nuw nsw i32 [[N17_065_MODIFY]], 8
; CHECK-NEXT:    [[ADD1:%.*]] = or disjoint i32 [[N17_065_MODIFY]], 1
; CHECK-NEXT:    [[ADD2:%.*]] = or disjoint i32 [[N17_065_MODIFY]], 2
; CHECK-NEXT:    [[ADD3:%.*]] = or disjoint i32 [[N17_065_MODIFY]], 3
; CHECK-NEXT:    [[ADD4:%.*]] = or disjoint i32 [[N17_065_MODIFY]], 4
; CHECK-NEXT:    [[ADD5:%.*]] = or disjoint i32 [[N17_065_MODIFY]], 5
; CHECK-NEXT:    [[ADD6:%.*]] = or disjoint i32 [[N17_065_MODIFY]], 6
; CHECK-NEXT:    [[ADD743:%.*]] = or disjoint i32 [[N17_065_MODIFY]], 7
; CHECK-NEXT:    [[ARRAYIDX25_MODIFY:%.*]] = getelementptr inbounds float, ptr [[TMP38]], i32 [[COEFF_POS_164_MODIFY]]
; CHECK-NEXT:    [[ARRAYIDX27_MODIFY:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[N17_065_MODIFY]]
; CHECK-NEXT:    [[ARRAYIDX24:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX25_MODIFY]], i32 1
; CHECK-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[ADD1]]
; CHECK-NEXT:    [[ARRAYIDX28:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX25_MODIFY]], i32 2
; CHECK-NEXT:    [[ARRAYIDX29:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[ADD2]]
; CHECK-NEXT:    [[ARRAYIDX32:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX25_MODIFY]], i32 3
; CHECK-NEXT:    [[ARRAYIDX33:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[ADD3]]
; CHECK-NEXT:    [[ARRAYIDX35:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX25_MODIFY]], i32 4
; CHECK-NEXT:    [[ARRAYIDX36:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[ADD4]]
; CHECK-NEXT:    [[ARRAYIDX38:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX25_MODIFY]], i32 5
; CHECK-NEXT:    [[ARRAYIDX39:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[ADD5]]
; CHECK-NEXT:    [[ARRAYIDX41:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX25_MODIFY]], i32 6
; CHECK-NEXT:    [[ARRAYIDX42:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[ADD6]]
; CHECK-NEXT:    [[ARRAYIDX45:%.*]] = getelementptr inbounds float, ptr [[ARRAYIDX25_MODIFY]], i32 7
; CHECK-NEXT:    [[ARRAYIDX46:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[ADD743]]
; CHECK-NEXT:    [[TMP40:%.*]] = load float, ptr [[ARRAYIDX25_MODIFY]], align 4
; CHECK-NEXT:    [[TMP41:%.*]] = load float, ptr [[ARRAYIDX27_MODIFY]], align 4
; CHECK-NEXT:    [[TMP42:%.*]] = load float, ptr [[ARRAYIDX24]], align 4
; CHECK-NEXT:    [[TMP43:%.*]] = load float, ptr [[ARRAYIDX26]], align 4
; CHECK-NEXT:    [[TMP44:%.*]] = load float, ptr [[ARRAYIDX28]], align 4
; CHECK-NEXT:    [[TMP45:%.*]] = load float, ptr [[ARRAYIDX29]], align 4
; CHECK-NEXT:    [[TMP46:%.*]] = load float, ptr [[ARRAYIDX32]], align 4
; CHECK-NEXT:    [[TMP47:%.*]] = load float, ptr [[ARRAYIDX33]], align 4
; CHECK-NEXT:    [[TMP48:%.*]] = load float, ptr [[ARRAYIDX35]], align 4
; CHECK-NEXT:    [[TMP49:%.*]] = load float, ptr [[ARRAYIDX36]], align 4
; CHECK-NEXT:    [[TMP50:%.*]] = load float, ptr [[ARRAYIDX38]], align 4
; CHECK-NEXT:    [[TMP51:%.*]] = load float, ptr [[ARRAYIDX39]], align 4
; CHECK-NEXT:    [[TMP52:%.*]] = load float, ptr [[ARRAYIDX41]], align 4
; CHECK-NEXT:    [[TMP53:%.*]] = load float, ptr [[ARRAYIDX42]], align 4
; CHECK-NEXT:    [[TMP54:%.*]] = load float, ptr [[ARRAYIDX45]], align 4
; CHECK-NEXT:    [[TMP55:%.*]] = load float, ptr [[ARRAYIDX46]], align 4
; CHECK-NEXT:    [[TMP56]] = tail call float @llvm.fmuladd.f32(float [[TMP40]], float [[TMP41]], float [[ACC_163_MODIFY]])
; CHECK-NEXT:    [[TMP57]] = tail call float @llvm.fmuladd.f32(float [[TMP42]], float [[TMP43]], float [[ACC23]])
; CHECK-NEXT:    [[TMP58]] = tail call float @llvm.fmuladd.f32(float [[TMP44]], float [[TMP45]], float [[ACC27]])
; CHECK-NEXT:    [[TMP59]] = tail call float @llvm.fmuladd.f32(float [[TMP46]], float [[TMP47]], float [[ACC30]])
; CHECK-NEXT:    [[TMP60]] = tail call float @llvm.fmuladd.f32(float [[TMP48]], float [[TMP49]], float [[ACC34]])
; CHECK-NEXT:    [[TMP61]] = tail call float @llvm.fmuladd.f32(float [[TMP50]], float [[TMP51]], float [[ACC37]])
; CHECK-NEXT:    [[TMP62]] = tail call float @llvm.fmuladd.f32(float [[TMP52]], float [[TMP53]], float [[ACC40]])
; CHECK-NEXT:    [[TMP63]] = tail call float @llvm.fmuladd.f32(float [[TMP54]], float [[TMP55]], float [[ACC44]])
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[INC29_MODIFY]], [[TMP33]]
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY22_MODIFY]], label [[FOR_COND_CLEANUP21]]
; CHECK:       for.body22:
; CHECK-NEXT:    [[N17_065:%.*]] = phi i32 [ [[N17_065_MODIFY_CLONE]], [[FOR_BODY22_LR_PH]] ], [ [[INC29:%.*]], [[FOR_BODY22]] ]
; CHECK-NEXT:    [[COEFF_POS_164:%.*]] = phi i32 [ [[COEFF_POS_164_MODIFY_CLONE]], [[FOR_BODY22_LR_PH]] ], [ [[INC24:%.*]], [[FOR_BODY22]] ]
; CHECK-NEXT:    [[ACC_163:%.*]] = phi float [ [[ACC_163_MODIFY_CLONE]], [[FOR_BODY22_LR_PH]] ], [ [[TMP66:%.*]], [[FOR_BODY22]] ]
; CHECK-NEXT:    [[INC24]] = add nuw nsw i32 [[COEFF_POS_164]], 1
; CHECK-NEXT:    [[ARRAYIDX25:%.*]] = getelementptr inbounds float, ptr [[TMP34]], i32 [[COEFF_POS_164]]
; CHECK-NEXT:    [[TMP64:%.*]] = load float, ptr [[ARRAYIDX25]], align 4
; CHECK-NEXT:    [[ARRAYIDX27:%.*]] = getelementptr inbounds float, ptr [[TMP1]], i32 [[N17_065]]
; CHECK-NEXT:    [[TMP65:%.*]] = load float, ptr [[ARRAYIDX27]], align 4
; CHECK-NEXT:    [[TMP66]] = tail call float @llvm.fmuladd.f32(float [[TMP64]], float [[TMP65]], float [[ACC_163]])
; CHECK-NEXT:    [[INC29]] = add nuw nsw i32 [[N17_065]], 1
; CHECK-NEXT:    [[EXITCOND70_NOT:%.*]] = icmp eq i32 [[INC29]], [[SPEC_STORE_SELECT]]
; CHECK-NEXT:    br i1 [[EXITCOND70_NOT]], label [[FOR_END]], label [[FOR_BODY22]]
; CHECK:       for.end:
; CHECK-NEXT:    [[TMP67:%.*]] = phi float [ [[ACC_163_MODIFY_CLONE]], [[FOR_COND_CLEANUP21]] ], [ [[TMP66]], [[FOR_BODY22]] ]
; CHECK-NEXT:    [[ADD139:%.*]] = fadd float [[TMP67]], [[ACC23_CLONE]]
; CHECK-NEXT:    [[ADD140:%.*]] = fadd float [[ACC27_CLONE]], [[ACC30_CLONE]]
; CHECK-NEXT:    [[ADD141:%.*]] = fadd float [[ACC34_CLONE]], [[ACC37_CLONE]]
; CHECK-NEXT:    [[ADD142:%.*]] = fadd float [[ACC40_CLONE]], [[ACC44_CLONE]]
; CHECK-NEXT:    [[ADD143:%.*]] = fadd float [[ADD139]], [[ADD140]]
; CHECK-NEXT:    [[ADD144:%.*]] = fadd float [[ADD141]], [[ADD142]]
; CHECK-NEXT:    [[ADD145:%.*]] = fadd float [[ADD143]], [[ADD144]]
; CHECK-NEXT:    [[ARRAYIDX31_MODIFY:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[I_068]]
; CHECK-NEXT:    store float [[ADD145]], ptr [[ARRAYIDX31_MODIFY]], align 4
; CHECK-NEXT:    [[INC33_MODIFY]] = add nuw nsw i32 [[I_068]], 1
; CHECK-NEXT:    [[EXITCOND71_NOT_MODIFY:%.*]] = icmp eq i32 [[INC33_MODIFY]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND71_NOT_MODIFY]], label [[IF_END:%.*]], label [[FOR_BODY]]
; CHECK:       for.body.lr.ph.clone.preheader:
; CHECK-NEXT:    [[CMP151349:%.*]] = icmp sgt i32 [[LEN]], 0
; CHECK-NEXT:    br i1 [[CMP151349]], label [[FOR_BODY_LR_PH_CLONE:%.*]], label [[IF_END]]
; CHECK:       for.body.lr.ph.clone:
; CHECK-NEXT:    [[DELAY_CLONE:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 1
; CHECK-NEXT:    [[TMP68:%.*]] = load ptr, ptr [[DELAY_CLONE]], align 4
; CHECK-NEXT:    [[POS_CLONE:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 3
; CHECK-NEXT:    [[N_CLONE:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 2
; CHECK-NEXT:    [[TMP69:%.*]] = load i32, ptr [[N_CLONE]], align 4
; CHECK-NEXT:    [[DOTPRE_CLONE:%.*]] = load i32, ptr [[POS_CLONE]], align 4
; CHECK-NEXT:    br label [[FOR_BODY_CLONE:%.*]]
; CHECK:       for.body.clone:
; CHECK-NEXT:    [[TMP70:%.*]] = phi i32 [ [[DOTPRE_CLONE]], [[FOR_BODY_LR_PH_CLONE]] ], [ [[SPEC_STORE_SELECT_CLONE:%.*]], [[FOR_COND_CLEANUP21_CLONE:%.*]] ]
; CHECK-NEXT:    [[I_068_CLONE:%.*]] = phi i32 [ 0, [[FOR_BODY_LR_PH_CLONE]] ], [ [[INC33_CLONE:%.*]], [[FOR_COND_CLEANUP21_CLONE]] ]
; CHECK-NEXT:    [[ARRAYIDX_CLONE:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[I_068_CLONE]]
; CHECK-NEXT:    [[TMP71:%.*]] = load float, ptr [[ARRAYIDX_CLONE]], align 4
; CHECK-NEXT:    [[ARRAYIDX1_CLONE:%.*]] = getelementptr inbounds float, ptr [[TMP68]], i32 [[TMP70]]
; CHECK-NEXT:    store float [[TMP71]], ptr [[ARRAYIDX1_CLONE]], align 4
; CHECK-NEXT:    [[INC_CLONE:%.*]] = add nsw i32 [[TMP70]], 1
; CHECK-NEXT:    [[CMP4_NOT_CLONE:%.*]] = icmp slt i32 [[INC_CLONE]], [[TMP69]]
; CHECK-NEXT:    [[SPEC_STORE_SELECT_CLONE]] = select i1 [[CMP4_NOT_CLONE]], i32 [[INC_CLONE]], i32 0
; CHECK-NEXT:    store i32 [[SPEC_STORE_SELECT_CLONE]], ptr [[POS_CLONE]], align 4
; CHECK-NEXT:    [[CMP957_CLONE:%.*]] = icmp slt i32 [[SPEC_STORE_SELECT_CLONE]], [[TMP69]]
; CHECK-NEXT:    br i1 [[CMP957_CLONE]], label [[FOR_BODY11_LR_PH_CLONE:%.*]], label [[FOR_COND18_PREHEADER_CLONE:%.*]]
; CHECK:       for.body11.lr.ph.clone:
; CHECK-NEXT:    [[TMP72:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP73:%.*]] = sub i32 [[TMP69]], [[SPEC_STORE_SELECT_CLONE]]
; CHECK-NEXT:    br label [[FOR_BODY11_CLONE:%.*]]
; CHECK:       for.body11.clone:
; CHECK-NEXT:    [[N_060_CLONE:%.*]] = phi i32 [ [[SPEC_STORE_SELECT_CLONE]], [[FOR_BODY11_LR_PH_CLONE]] ], [ [[INC16_CLONE:%.*]], [[FOR_BODY11_CLONE]] ]
; CHECK-NEXT:    [[COEFF_POS_059_CLONE:%.*]] = phi i32 [ 0, [[FOR_BODY11_LR_PH_CLONE]] ], [ [[INC12_CLONE:%.*]], [[FOR_BODY11_CLONE]] ]
; CHECK-NEXT:    [[ACC_058_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY11_LR_PH_CLONE]] ], [ [[TMP76:%.*]], [[FOR_BODY11_CLONE]] ]
; CHECK-NEXT:    [[INC12_CLONE]] = add nuw i32 [[COEFF_POS_059_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX13_CLONE:%.*]] = getelementptr inbounds float, ptr [[TMP72]], i32 [[COEFF_POS_059_CLONE]]
; CHECK-NEXT:    [[TMP74:%.*]] = load float, ptr [[ARRAYIDX13_CLONE]], align 4
; CHECK-NEXT:    [[ARRAYIDX15_CLONE:%.*]] = getelementptr inbounds float, ptr [[TMP68]], i32 [[N_060_CLONE]]
; CHECK-NEXT:    [[TMP75:%.*]] = load float, ptr [[ARRAYIDX15_CLONE]], align 4
; CHECK-NEXT:    [[TMP76]] = tail call float @llvm.fmuladd.f32(float [[TMP74]], float [[TMP75]], float [[ACC_058_CLONE]])
; CHECK-NEXT:    [[INC16_CLONE]] = add nsw i32 [[N_060_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND_NOT_CLONE:%.*]] = icmp eq i32 [[INC12_CLONE]], [[TMP73]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_CLONE]], label [[FOR_COND18_PREHEADER_CLONE]], label [[FOR_BODY11_CLONE]]
; CHECK:       for.cond18.preheader.clone:
; CHECK-NEXT:    [[ACC_0_LCSSA_CLONE:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY_CLONE]] ], [ [[TMP76]], [[FOR_BODY11_CLONE]] ]
; CHECK-NEXT:    [[COEFF_POS_0_LCSSA_CLONE:%.*]] = phi i32 [ 0, [[FOR_BODY_CLONE]] ], [ [[TMP73]], [[FOR_BODY11_CLONE]] ]
; CHECK-NEXT:    [[CMP2062_CLONE:%.*]] = icmp sgt i32 [[SPEC_STORE_SELECT_CLONE]], 0
; CHECK-NEXT:    br i1 [[CMP2062_CLONE]], label [[FOR_BODY22_LR_PH_CLONE:%.*]], label [[FOR_COND_CLEANUP21_CLONE]]
; CHECK:       for.body22.lr.ph.clone:
; CHECK-NEXT:    [[TMP77:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    br label [[FOR_BODY22_CLONE:%.*]]
; CHECK:       for.body22.clone:
; CHECK-NEXT:    [[N17_065_CLONE:%.*]] = phi i32 [ 0, [[FOR_BODY22_LR_PH_CLONE]] ], [ [[INC29_CLONE:%.*]], [[FOR_BODY22_CLONE]] ]
; CHECK-NEXT:    [[COEFF_POS_164_CLONE:%.*]] = phi i32 [ [[COEFF_POS_0_LCSSA_CLONE]], [[FOR_BODY22_LR_PH_CLONE]] ], [ [[INC24_CLONE:%.*]], [[FOR_BODY22_CLONE]] ]
; CHECK-NEXT:    [[ACC_163_CLONE:%.*]] = phi float [ [[ACC_0_LCSSA_CLONE]], [[FOR_BODY22_LR_PH_CLONE]] ], [ [[TMP80:%.*]], [[FOR_BODY22_CLONE]] ]
; CHECK-NEXT:    [[INC24_CLONE]] = add nuw nsw i32 [[COEFF_POS_164_CLONE]], 1
; CHECK-NEXT:    [[ARRAYIDX25_CLONE:%.*]] = getelementptr inbounds float, ptr [[TMP77]], i32 [[COEFF_POS_164_CLONE]]
; CHECK-NEXT:    [[TMP78:%.*]] = load float, ptr [[ARRAYIDX25_CLONE]], align 4
; CHECK-NEXT:    [[ARRAYIDX27_CLONE:%.*]] = getelementptr inbounds float, ptr [[TMP68]], i32 [[N17_065_CLONE]]
; CHECK-NEXT:    [[TMP79:%.*]] = load float, ptr [[ARRAYIDX27_CLONE]], align 4
; CHECK-NEXT:    [[TMP80]] = tail call float @llvm.fmuladd.f32(float [[TMP78]], float [[TMP79]], float [[ACC_163_CLONE]])
; CHECK-NEXT:    [[INC29_CLONE]] = add nuw nsw i32 [[N17_065_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND70_NOT_CLONE:%.*]] = icmp eq i32 [[INC29_CLONE]], [[SPEC_STORE_SELECT_CLONE]]
; CHECK-NEXT:    br i1 [[EXITCOND70_NOT_CLONE]], label [[FOR_COND_CLEANUP21_CLONE]], label [[FOR_BODY22_CLONE]]
; CHECK:       for.cond.cleanup21.clone:
; CHECK-NEXT:    [[ACC_1_LCSSA_CLONE:%.*]] = phi float [ [[ACC_0_LCSSA_CLONE]], [[FOR_COND18_PREHEADER_CLONE]] ], [ [[TMP80]], [[FOR_BODY22_CLONE]] ]
; CHECK-NEXT:    [[ARRAYIDX31_CLONE:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[I_068_CLONE]]
; CHECK-NEXT:    store float [[ACC_1_LCSSA_CLONE]], ptr [[ARRAYIDX31_CLONE]], align 4
; CHECK-NEXT:    [[INC33_CLONE]] = add nuw nsw i32 [[I_068_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND71_NOT_CLONE:%.*]] = icmp eq i32 [[INC33_CLONE]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND71_NOT_CLONE]], label [[IF_END]], label [[FOR_BODY_CLONE]]
; CHECK:       if.end:
; CHECK-NEXT:    ret i32 0
;
entry:
  %0 = icmp sgt i32 %len, 2
  br i1 %0, label %for.cond.preheader, label %for.body.lr.ph.clone

for.cond.preheader:                               ; preds = %entry
  %cmp67 = icmp sgt i32 %len, 0
  br i1 %cmp67, label %for.body.lr.ph, label %if.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %delay = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 1
  %1 = load ptr, ptr %delay, align 4
  %pos = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 3
  %N = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 2
  %2 = load i32, ptr %N, align 4
  %.pre = load i32, ptr %pos, align 4
  br label %for.body

if.end:                                           ; preds = %for.cond.cleanup21.clone, %for.cond.cleanup21, %for.cond.preheader
  ret i32 0

for.body:                                         ; preds = %for.cond.cleanup21, %for.body.lr.ph
  %3 = phi i32 [ %.pre, %for.body.lr.ph ], [ %spec.store.select, %for.cond.cleanup21 ]
  %i.068 = phi i32 [ 0, %for.body.lr.ph ], [ %inc33, %for.cond.cleanup21 ]
  %arrayidx = getelementptr inbounds float, ptr %input, i32 %i.068
  %4 = load float, ptr %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds float, ptr %1, i32 %3
  store float %4, ptr %arrayidx1, align 4
  %inc = add nsw i32 %3, 1
  %cmp4.not = icmp slt i32 %inc, %2
  %spec.store.select = select i1 %cmp4.not, i32 %inc, i32 0
  store i32 %spec.store.select, ptr %pos, align 4
  %cmp957 = icmp slt i32 %spec.store.select, %2
  br i1 %cmp957, label %for.body11.lr.ph, label %for.cond18.preheader

for.body11.lr.ph:                                 ; preds = %for.body
  %5 = load ptr, ptr %fir, align 4
  %6 = sub i32 %2, %spec.store.select
  br label %for.body11

for.cond18.preheader:                             ; preds = %for.body11, %for.body
  %acc.0.lcssa = phi float [ 0.000000e+00, %for.body ], [ %10, %for.body11 ]
  %coeff_pos.0.lcssa = phi i32 [ 0, %for.body ], [ %6, %for.body11 ]
  %cmp2062 = icmp sgt i32 %spec.store.select, 0
  br i1 %cmp2062, label %for.body22.lr.ph, label %for.cond.cleanup21

for.body22.lr.ph:                                 ; preds = %for.cond18.preheader
  %7 = load ptr, ptr %fir, align 4
  br label %for.body22

for.body11:                                       ; preds = %for.body11, %for.body11.lr.ph
  %n.060 = phi i32 [ %spec.store.select, %for.body11.lr.ph ], [ %inc16, %for.body11 ]
  %coeff_pos.059 = phi i32 [ 0, %for.body11.lr.ph ], [ %inc12, %for.body11 ]
  %acc.058 = phi float [ 0.000000e+00, %for.body11.lr.ph ], [ %10, %for.body11 ]
  %inc12 = add nuw i32 %coeff_pos.059, 1
  %arrayidx13 = getelementptr inbounds float, ptr %5, i32 %coeff_pos.059
  %8 = load float, ptr %arrayidx13, align 4
  %arrayidx15 = getelementptr inbounds float, ptr %1, i32 %n.060
  %9 = load float, ptr %arrayidx15, align 4
  %10 = tail call float @llvm.fmuladd.f32(float %8, float %9, float %acc.058)
  %inc16 = add nsw i32 %n.060, 1
  %exitcond.not = icmp eq i32 %inc12, %6
  br i1 %exitcond.not, label %for.cond18.preheader, label %for.body11

for.cond.cleanup21:                               ; preds = %for.body22, %for.cond18.preheader
  %acc.1.lcssa = phi float [ %acc.0.lcssa, %for.cond18.preheader ], [ %13, %for.body22 ]
  %arrayidx31 = getelementptr inbounds float, ptr %output, i32 %i.068
  store float %acc.1.lcssa, ptr %arrayidx31, align 4
  %inc33 = add nuw nsw i32 %i.068, 1
  %exitcond71.not = icmp eq i32 %inc33, %len
  br i1 %exitcond71.not, label %if.end, label %for.body

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %n17.065 = phi i32 [ 0, %for.body22.lr.ph ], [ %inc29, %for.body22 ]
  %coeff_pos.164 = phi i32 [ %coeff_pos.0.lcssa, %for.body22.lr.ph ], [ %inc24, %for.body22 ]
  %acc.163 = phi float [ %acc.0.lcssa, %for.body22.lr.ph ], [ %13, %for.body22 ]
  %inc24 = add nuw nsw i32 %coeff_pos.164, 1
  %arrayidx25 = getelementptr inbounds float, ptr %7, i32 %coeff_pos.164
  %11 = load float, ptr %arrayidx25, align 4
  %arrayidx27 = getelementptr inbounds float, ptr %1, i32 %n17.065
  %12 = load float, ptr %arrayidx27, align 4
  %13 = tail call float @llvm.fmuladd.f32(float %11, float %12, float %acc.163)
  %inc29 = add nuw nsw i32 %n17.065, 1
  %exitcond70.not = icmp eq i32 %inc29, %spec.store.select
  br i1 %exitcond70.not, label %for.cond.cleanup21, label %for.body22

for.body.lr.ph.clone:                             ; preds = %entry
  %delay.clone = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 1
  %14 = load ptr, ptr %delay.clone, align 4
  %pos.clone = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 3
  %N.clone = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 2
  %15 = load i32, ptr %N.clone, align 4
  %.pre.clone = load i32, ptr %pos.clone, align 4
  br label %for.body.clone

for.body.clone:                                   ; preds = %for.cond.cleanup21.clone, %for.body.lr.ph.clone
  %16 = phi i32 [ %.pre.clone, %for.body.lr.ph.clone ], [ %spec.store.select.clone, %for.cond.cleanup21.clone ]
  %i.068.clone = phi i32 [ 0, %for.body.lr.ph.clone ], [ %inc33.clone, %for.cond.cleanup21.clone ]
  %arrayidx.clone = getelementptr inbounds float, ptr %input, i32 %i.068.clone
  %17 = load float, ptr %arrayidx.clone, align 4
  %arrayidx1.clone = getelementptr inbounds float, ptr %14, i32 %16
  store float %17, ptr %arrayidx1.clone, align 4
  %inc.clone = add nsw i32 %16, 1
  %cmp4.not.clone = icmp slt i32 %inc.clone, %15
  %spec.store.select.clone = select i1 %cmp4.not.clone, i32 %inc.clone, i32 0
  store i32 %spec.store.select.clone, ptr %pos.clone, align 4
  %cmp957.clone = icmp slt i32 %spec.store.select.clone, %15
  br i1 %cmp957.clone, label %for.body11.lr.ph.clone, label %for.cond18.preheader.clone

for.body11.lr.ph.clone:                           ; preds = %for.body.clone
  %18 = load ptr, ptr %fir, align 4
  %19 = sub i32 %15, %spec.store.select.clone
  br label %for.body11.clone

for.body11.clone:                                 ; preds = %for.body11.clone, %for.body11.lr.ph.clone
  %n.060.clone = phi i32 [ %spec.store.select.clone, %for.body11.lr.ph.clone ], [ %inc16.clone, %for.body11.clone ]
  %coeff_pos.059.clone = phi i32 [ 0, %for.body11.lr.ph.clone ], [ %inc12.clone, %for.body11.clone ]
  %acc.058.clone = phi float [ 0.000000e+00, %for.body11.lr.ph.clone ], [ %22, %for.body11.clone ]
  %inc12.clone = add nuw i32 %coeff_pos.059.clone, 1
  %arrayidx13.clone = getelementptr inbounds float, ptr %18, i32 %coeff_pos.059.clone
  %20 = load float, ptr %arrayidx13.clone, align 4
  %arrayidx15.clone = getelementptr inbounds float, ptr %14, i32 %n.060.clone
  %21 = load float, ptr %arrayidx15.clone, align 4
  %22 = tail call float @llvm.fmuladd.f32(float %20, float %21, float %acc.058.clone)
  %inc16.clone = add nsw i32 %n.060.clone, 1
  %exitcond.not.clone = icmp eq i32 %inc12.clone, %19
  br i1 %exitcond.not.clone, label %for.cond18.preheader.clone, label %for.body11.clone

for.cond18.preheader.clone:                       ; preds = %for.body11.clone, %for.body.clone
  %acc.0.lcssa.clone = phi float [ 0.000000e+00, %for.body.clone ], [ %22, %for.body11.clone ]
  %coeff_pos.0.lcssa.clone = phi i32 [ 0, %for.body.clone ], [ %19, %for.body11.clone ]
  %cmp2062.clone = icmp sgt i32 %spec.store.select.clone, 0
  br i1 %cmp2062.clone, label %for.body22.lr.ph.clone, label %for.cond.cleanup21.clone

for.body22.lr.ph.clone:                           ; preds = %for.cond18.preheader.clone
  %23 = load ptr, ptr %fir, align 4
  br label %for.body22.clone

for.body22.clone:                                 ; preds = %for.body22.clone, %for.body22.lr.ph.clone
  %n17.065.clone = phi i32 [ 0, %for.body22.lr.ph.clone ], [ %inc29.clone, %for.body22.clone ]
  %coeff_pos.164.clone = phi i32 [ %coeff_pos.0.lcssa.clone, %for.body22.lr.ph.clone ], [ %inc24.clone, %for.body22.clone ]
  %acc.163.clone = phi float [ %acc.0.lcssa.clone, %for.body22.lr.ph.clone ], [ %26, %for.body22.clone ]
  %inc24.clone = add nuw nsw i32 %coeff_pos.164.clone, 1
  %arrayidx25.clone = getelementptr inbounds float, ptr %23, i32 %coeff_pos.164.clone
  %24 = load float, ptr %arrayidx25.clone, align 4
  %arrayidx27.clone = getelementptr inbounds float, ptr %14, i32 %n17.065.clone
  %25 = load float, ptr %arrayidx27.clone, align 4
  %26 = tail call float @llvm.fmuladd.f32(float %24, float %25, float %acc.163.clone)
  %inc29.clone = add nuw nsw i32 %n17.065.clone, 1
  %exitcond70.not.clone = icmp eq i32 %inc29.clone, %spec.store.select.clone
  br i1 %exitcond70.not.clone, label %for.cond.cleanup21.clone, label %for.body22.clone

for.cond.cleanup21.clone:                         ; preds = %for.body22.clone, %for.cond18.preheader.clone
  %acc.1.lcssa.clone = phi float [ %acc.0.lcssa.clone, %for.cond18.preheader.clone ], [ %26, %for.body22.clone ]
  %arrayidx31.clone = getelementptr inbounds float, ptr %output, i32 %i.068.clone
  store float %acc.1.lcssa.clone, ptr %arrayidx31.clone, align 4
  %inc33.clone = add nuw nsw i32 %i.068.clone, 1
  %exitcond71.not.clone = icmp eq i32 %inc33.clone, %len
  br i1 %exitcond71.not.clone, label %if.end, label %for.body.clone
}
