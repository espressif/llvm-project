; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=true < %s | FileCheck %s
define dso_local noundef i32 @dsps_addc_f32_ansi(ptr noundef readonly %input, ptr noundef writeonly %output, i32 noundef %len, float noundef %C, i32 noundef %step_in, i32 noundef %step_out) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_addc_f32_ansi(
; CHECK-SAME: ptr noalias noundef readonly [[INPUT:%.*]], ptr noalias noundef writeonly [[OUTPUT:%.*]], i32 noundef [[LEN:%.*]], float noundef [[C:%.*]], i32 noundef [[STEP_IN:%.*]], i32 noundef [[STEP_OUT:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq ptr [[INPUT]], null
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq ptr [[OUTPUT]], null
; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP]], [[CMP1]]
; CHECK-NEXT:    br i1 [[OR_COND]], label [[RETURN:%.*]], label [[IF_END:%.*]]
; CHECK:       if.end:
; CHECK-NEXT:    [[CMP4:%.*]] = icmp sgt i32 [[LEN]], 2
; CHECK-NEXT:    br i1 [[CMP4]], label [[FOR_COND_PREHEADER_NEW:%.*]], label [[FOR_COND_PREHEADER:%.*]]
; CHECK:       for.cond.preheader:
; CHECK-NEXT:    [[CMP412:%.*]] = icmp sgt i32 [[LEN]], 0
; CHECK-NEXT:    br i1 [[CMP412]], label [[FOR_BODY_CLONE:%.*]], label [[RETURN]]
; CHECK:       for.cond.preheader.new:
; CHECK-NEXT:    [[SUB:%.*]] = add nsw i32 [[LEN]], -16
; CHECK-NEXT:    [[CMP6_NOT207:%.*]] = icmp ult i32 [[LEN]], 16
; CHECK-NEXT:    br i1 [[CMP6_NOT207]], label [[FOR_COND_PREHEADER_NEW2:%.*]], label [[FOR_BODY_MODIFY:%.*]]
; CHECK:       for.cond.preheader.new2:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i32 [ [[TMP1:%.*]], [[FOR_BODY_MODIFY]] ], [ 0, [[FOR_COND_PREHEADER_NEW]] ]
; CHECK-NEXT:    [[CMP85209:%.*]] = icmp slt i32 [[TMP0]], [[LEN]]
; CHECK-NEXT:    br i1 [[CMP85209]], label [[FOR_BODY:%.*]], label [[RETURN]]
; CHECK:       for.body.modify:
; CHECK-NEXT:    [[I_013_MODIFY:%.*]] = phi i32 [ [[TMP1]], [[FOR_BODY_MODIFY]] ], [ 0, [[FOR_COND_PREHEADER_NEW]] ]
; CHECK-NEXT:    [[TMP1]] = add nuw i32 [[I_013_MODIFY]], 16
; CHECK-NEXT:    [[ADD2:%.*]] = or disjoint i32 [[I_013_MODIFY]], 1
; CHECK-NEXT:    [[ADD6:%.*]] = or disjoint i32 [[I_013_MODIFY]], 2
; CHECK-NEXT:    [[ADD10:%.*]] = or disjoint i32 [[I_013_MODIFY]], 3
; CHECK-NEXT:    [[ADD14:%.*]] = or disjoint i32 [[I_013_MODIFY]], 4
; CHECK-NEXT:    [[ADD18:%.*]] = or disjoint i32 [[I_013_MODIFY]], 5
; CHECK-NEXT:    [[ADD22:%.*]] = or disjoint i32 [[I_013_MODIFY]], 6
; CHECK-NEXT:    [[ADD26:%.*]] = or disjoint i32 [[I_013_MODIFY]], 7
; CHECK-NEXT:    [[ADD30:%.*]] = or disjoint i32 [[I_013_MODIFY]], 8
; CHECK-NEXT:    [[ADD34:%.*]] = or disjoint i32 [[I_013_MODIFY]], 9
; CHECK-NEXT:    [[ADD38:%.*]] = or disjoint i32 [[I_013_MODIFY]], 10
; CHECK-NEXT:    [[ADD42:%.*]] = or disjoint i32 [[I_013_MODIFY]], 11
; CHECK-NEXT:    [[ADD46:%.*]] = or disjoint i32 [[I_013_MODIFY]], 12
; CHECK-NEXT:    [[ADD50:%.*]] = or disjoint i32 [[I_013_MODIFY]], 13
; CHECK-NEXT:    [[ADD54:%.*]] = or disjoint i32 [[I_013_MODIFY]], 14
; CHECK-NEXT:    [[ADD58:%.*]] = or disjoint i32 [[I_013_MODIFY]], 15
; CHECK-NEXT:    [[ARRAYIDX_MODIFY:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[I_013_MODIFY]]
; CHECK-NEXT:    [[ARRAYIDX6_MODIFY:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[I_013_MODIFY]]
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD2]]
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD2]]
; CHECK-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD6]]
; CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD6]]
; CHECK-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD10]]
; CHECK-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD10]]
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD14]]
; CHECK-NEXT:    [[ARRAYIDX17:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD14]]
; CHECK-NEXT:    [[ARRAYIDX19:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD18]]
; CHECK-NEXT:    [[ARRAYIDX21:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD18]]
; CHECK-NEXT:    [[ARRAYIDX23:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD22]]
; CHECK-NEXT:    [[ARRAYIDX25:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD22]]
; CHECK-NEXT:    [[ARRAYIDX27:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD26]]
; CHECK-NEXT:    [[ARRAYIDX29:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD26]]
; CHECK-NEXT:    [[ARRAYIDX31:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD30]]
; CHECK-NEXT:    [[ARRAYIDX33:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD30]]
; CHECK-NEXT:    [[ARRAYIDX35:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD34]]
; CHECK-NEXT:    [[ARRAYIDX37:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD34]]
; CHECK-NEXT:    [[ARRAYIDX39:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD38]]
; CHECK-NEXT:    [[ARRAYIDX41:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD38]]
; CHECK-NEXT:    [[ARRAYIDX43:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD42]]
; CHECK-NEXT:    [[ARRAYIDX45:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD42]]
; CHECK-NEXT:    [[ARRAYIDX47:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD46]]
; CHECK-NEXT:    [[ARRAYIDX49:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD46]]
; CHECK-NEXT:    [[ARRAYIDX51:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD50]]
; CHECK-NEXT:    [[ARRAYIDX53:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD50]]
; CHECK-NEXT:    [[ARRAYIDX55:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD54]]
; CHECK-NEXT:    [[ARRAYIDX57:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD54]]
; CHECK-NEXT:    [[ARRAYIDX59:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[ADD58]]
; CHECK-NEXT:    [[ARRAYIDX61:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD58]]
; CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX_MODIFY]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX3]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX7]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load float, ptr [[ARRAYIDX11]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = load float, ptr [[ARRAYIDX15]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load float, ptr [[ARRAYIDX19]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = load float, ptr [[ARRAYIDX23]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[ARRAYIDX27]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load float, ptr [[ARRAYIDX31]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = load float, ptr [[ARRAYIDX35]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = load float, ptr [[ARRAYIDX39]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = load float, ptr [[ARRAYIDX43]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = load float, ptr [[ARRAYIDX47]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[ARRAYIDX51]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = load float, ptr [[ARRAYIDX55]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = load float, ptr [[ARRAYIDX59]], align 4
; CHECK-NEXT:    [[ADD_MODIFY:%.*]] = fadd float [[C]], [[TMP2]]
; CHECK-NEXT:    [[ADD4:%.*]] = fadd float [[C]], [[TMP3]]
; CHECK-NEXT:    [[ADD8:%.*]] = fadd float [[C]], [[TMP4]]
; CHECK-NEXT:    [[ADD12:%.*]] = fadd float [[C]], [[TMP5]]
; CHECK-NEXT:    [[ADD16:%.*]] = fadd float [[C]], [[TMP6]]
; CHECK-NEXT:    [[ADD20:%.*]] = fadd float [[C]], [[TMP7]]
; CHECK-NEXT:    [[ADD24:%.*]] = fadd float [[C]], [[TMP8]]
; CHECK-NEXT:    [[ADD28:%.*]] = fadd float [[C]], [[TMP9]]
; CHECK-NEXT:    [[ADD32:%.*]] = fadd float [[C]], [[TMP10]]
; CHECK-NEXT:    [[ADD36:%.*]] = fadd float [[C]], [[TMP11]]
; CHECK-NEXT:    [[ADD40:%.*]] = fadd float [[C]], [[TMP12]]
; CHECK-NEXT:    [[ADD44:%.*]] = fadd float [[C]], [[TMP13]]
; CHECK-NEXT:    [[ADD48:%.*]] = fadd float [[C]], [[TMP14]]
; CHECK-NEXT:    [[ADD52:%.*]] = fadd float [[C]], [[TMP15]]
; CHECK-NEXT:    [[ADD56:%.*]] = fadd float [[C]], [[TMP16]]
; CHECK-NEXT:    [[ADD60:%.*]] = fadd float [[C]], [[TMP17]]
; CHECK-NEXT:    store float [[ADD_MODIFY]], ptr [[ARRAYIDX6_MODIFY]], align 4
; CHECK-NEXT:    store float [[ADD4]], ptr [[ARRAYIDX5]], align 4
; CHECK-NEXT:    store float [[ADD8]], ptr [[ARRAYIDX9]], align 4
; CHECK-NEXT:    store float [[ADD12]], ptr [[ARRAYIDX13]], align 4
; CHECK-NEXT:    store float [[ADD16]], ptr [[ARRAYIDX17]], align 4
; CHECK-NEXT:    store float [[ADD20]], ptr [[ARRAYIDX21]], align 4
; CHECK-NEXT:    store float [[ADD24]], ptr [[ARRAYIDX25]], align 4
; CHECK-NEXT:    store float [[ADD28]], ptr [[ARRAYIDX29]], align 4
; CHECK-NEXT:    store float [[ADD32]], ptr [[ARRAYIDX33]], align 4
; CHECK-NEXT:    store float [[ADD36]], ptr [[ARRAYIDX37]], align 4
; CHECK-NEXT:    store float [[ADD40]], ptr [[ARRAYIDX41]], align 4
; CHECK-NEXT:    store float [[ADD44]], ptr [[ARRAYIDX45]], align 4
; CHECK-NEXT:    store float [[ADD48]], ptr [[ARRAYIDX49]], align 4
; CHECK-NEXT:    store float [[ADD52]], ptr [[ARRAYIDX53]], align 4
; CHECK-NEXT:    store float [[ADD56]], ptr [[ARRAYIDX57]], align 4
; CHECK-NEXT:    store float [[ADD60]], ptr [[ARRAYIDX61]], align 4
; CHECK-NEXT:    [[EXITCOND_NOT_MODIFY:%.*]] = icmp sgt i32 [[TMP1]], [[SUB]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_MODIFY]], label [[FOR_COND_PREHEADER_NEW2]], label [[FOR_BODY_MODIFY]]
; CHECK:       for.body:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ [[INC:%.*]], [[FOR_BODY]] ], [ [[TMP0]], [[FOR_COND_PREHEADER_NEW2]] ]
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[I_013]], [[STEP_IN]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[MUL]]
; CHECK-NEXT:    [[TMP18:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = fadd float [[C]], [[TMP18]]
; CHECK-NEXT:    [[MUL5:%.*]] = mul nsw i32 [[I_013]], [[STEP_OUT]]
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[MUL5]]
; CHECK-NEXT:    store float [[ADD]], ptr [[ARRAYIDX6]], align 4
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[RETURN]], label [[FOR_BODY]]
; CHECK:       for.body.clone:
; CHECK-NEXT:    [[I_013_CLONE:%.*]] = phi i32 [ [[INC_CLONE:%.*]], [[FOR_BODY_CLONE]] ], [ 0, [[FOR_COND_PREHEADER]] ]
; CHECK-NEXT:    [[MUL_CLONE:%.*]] = mul nsw i32 [[I_013_CLONE]], [[STEP_IN]]
; CHECK-NEXT:    [[ARRAYIDX_CLONE:%.*]] = getelementptr inbounds float, ptr [[INPUT]], i32 [[MUL_CLONE]]
; CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[ARRAYIDX_CLONE]], align 4
; CHECK-NEXT:    [[ADD_CLONE:%.*]] = fadd float [[C]], [[TMP19]]
; CHECK-NEXT:    [[MUL5_CLONE:%.*]] = mul nsw i32 [[I_013_CLONE]], [[STEP_OUT]]
; CHECK-NEXT:    [[ARRAYIDX6_CLONE:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[MUL5_CLONE]]
; CHECK-NEXT:    store float [[ADD_CLONE]], ptr [[ARRAYIDX6_CLONE]], align 4
; CHECK-NEXT:    [[INC_CLONE]] = add nuw nsw i32 [[I_013_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND_NOT_CLONE:%.*]] = icmp eq i32 [[INC_CLONE]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_CLONE]], label [[RETURN]], label [[FOR_BODY_CLONE]]
; CHECK:       return:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ 458755, [[ENTRY:%.*]] ], [ 0, [[FOR_COND_PREHEADER]] ], [ 0, [[FOR_BODY]] ], [ 0, [[FOR_BODY_CLONE]] ], [ 0, [[FOR_COND_PREHEADER_NEW2]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0]]
;
entry:
  %cmp = icmp eq ptr %input, null
  %cmp1 = icmp eq ptr %output, null
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp4 = icmp sgt i32 %len, 2
  br i1 %cmp4, label %for.body, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end
  %cmp412 = icmp sgt i32 %len, 0
  br i1 %cmp412, label %for.body.clone, label %return

for.body:                                         ; preds = %for.body, %if.end
  %i.013 = phi i32 [ %inc, %for.body ], [ 0, %if.end ]
  %mul = mul nsw i32 %i.013, %step_in
  %arrayidx = getelementptr inbounds float, ptr %input, i32 %mul
  %0 = load float, ptr %arrayidx, align 4
  %add = fadd float %0, %C
  %mul5 = mul nsw i32 %i.013, %step_out
  %arrayidx6 = getelementptr inbounds float, ptr %output, i32 %mul5
  store float %add, ptr %arrayidx6, align 4
  %inc = add nuw nsw i32 %i.013, 1
  %exitcond.not = icmp eq i32 %inc, %len
  br i1 %exitcond.not, label %return, label %for.body

for.body.clone:                                   ; preds = %for.body.clone, %for.cond.preheader
  %i.013.clone = phi i32 [ %inc.clone, %for.body.clone ], [ 0, %for.cond.preheader ]
  %mul.clone = mul nsw i32 %i.013.clone, %step_in
  %arrayidx.clone = getelementptr inbounds float, ptr %input, i32 %mul.clone
  %1 = load float, ptr %arrayidx.clone, align 4
  %add.clone = fadd float %1, %C
  %mul5.clone = mul nsw i32 %i.013.clone, %step_out
  %arrayidx6.clone = getelementptr inbounds float, ptr %output, i32 %mul5.clone
  store float %add.clone, ptr %arrayidx6.clone, align 4
  %inc.clone = add nuw nsw i32 %i.013.clone, 1
  %exitcond.not.clone = icmp eq i32 %inc.clone, %len
  br i1 %exitcond.not.clone, label %return, label %for.body.clone

return:                                           ; preds = %for.body.clone, %for.body, %for.cond.preheader, %entry
  %retval.0 = phi i32 [ 458755, %entry ], [ 0, %for.cond.preheader ], [ 0, %for.body ], [ 0, %for.body.clone ]
  ret i32 %retval.0
}
