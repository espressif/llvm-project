; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=true < %s | FileCheck %s
define dso_local float @dsps_simple_dotprod_f32_ansi(ptr nocapture noundef readonly %data1, ptr nocapture noundef readonly %data2) local_unnamed_addr {
; CHECK-LABEL: define dso_local float @dsps_simple_dotprod_f32_ansi(
; CHECK-SAME: ptr noalias noundef readonly captures(none) [[DATA1:%.*]], ptr noalias noundef readonly captures(none) [[DATA2:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.end:
; CHECK-NEXT:    [[ADD37:%.*]] = fadd float [[TMP16:%.*]], [[TMP17:%.*]]
; CHECK-NEXT:    [[ADD38:%.*]] = fadd float [[TMP18:%.*]], [[TMP19:%.*]]
; CHECK-NEXT:    [[ADD39:%.*]] = fadd float [[TMP20:%.*]], [[TMP21:%.*]]
; CHECK-NEXT:    [[ADD40:%.*]] = fadd float [[TMP22:%.*]], [[TMP23:%.*]]
; CHECK-NEXT:    [[ADD41:%.*]] = fadd float [[ADD37]], [[ADD38]]
; CHECK-NEXT:    [[ADD42:%.*]] = fadd float [[ADD39]], [[ADD40]]
; CHECK-NEXT:    [[ADD43:%.*]] = fadd float [[ADD41]], [[ADD42]]
; CHECK-NEXT:    ret float [[ADD43]]
; CHECK:       for.body:
; CHECK-NEXT:    [[I_07:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[INC_7:%.*]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[DOTPHI:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[TMP16]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[DOTPHI1:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[TMP17]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[DOTPHI2:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[TMP18]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[DOTPHI3:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[TMP19]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[DOTPHI4:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[TMP20]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[DOTPHI5:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[TMP21]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[DOTPHI6:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[TMP22]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[DOTPHI7:%.*]] = phi float [ 0.000000e+00, [[ENTRY]] ], [ [[TMP23]], [[FOR_BODY]] ]
; CHECK-NEXT:    [[INC_7]] = add nuw nsw i32 [[I_07]], 8
; CHECK-NEXT:    [[ADD:%.*]] = or disjoint i32 [[I_07]], 1
; CHECK-NEXT:    [[ADD9:%.*]] = or disjoint i32 [[I_07]], 2
; CHECK-NEXT:    [[ADD11:%.*]] = or disjoint i32 [[I_07]], 3
; CHECK-NEXT:    [[ADD13:%.*]] = or disjoint i32 [[I_07]], 4
; CHECK-NEXT:    [[ADD15:%.*]] = or disjoint i32 [[I_07]], 5
; CHECK-NEXT:    [[ADD17:%.*]] = or disjoint i32 [[I_07]], 6
; CHECK-NEXT:    [[ADD19:%.*]] = or disjoint i32 [[I_07]], 7
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw float, ptr [[DATA1]], i32 [[I_07]]
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds nuw float, ptr [[DATA2]], i32 [[I_07]]
; CHECK-NEXT:    [[ARRAYIDX_1:%.*]] = getelementptr inbounds nuw float, ptr [[DATA1]], i32 [[ADD]]
; CHECK-NEXT:    [[ARRAYIDX1_1:%.*]] = getelementptr inbounds nuw float, ptr [[DATA2]], i32 [[ADD]]
; CHECK-NEXT:    [[ARRAYIDX_2:%.*]] = getelementptr inbounds nuw float, ptr [[DATA1]], i32 [[ADD9]]
; CHECK-NEXT:    [[ARRAYIDX1_2:%.*]] = getelementptr inbounds nuw float, ptr [[DATA2]], i32 [[ADD9]]
; CHECK-NEXT:    [[ARRAYIDX_3:%.*]] = getelementptr inbounds nuw float, ptr [[DATA1]], i32 [[ADD11]]
; CHECK-NEXT:    [[ARRAYIDX1_3:%.*]] = getelementptr inbounds nuw float, ptr [[DATA2]], i32 [[ADD11]]
; CHECK-NEXT:    [[ARRAYIDX_4:%.*]] = getelementptr inbounds nuw float, ptr [[DATA1]], i32 [[ADD13]]
; CHECK-NEXT:    [[ARRAYIDX1_4:%.*]] = getelementptr inbounds nuw float, ptr [[DATA2]], i32 [[ADD13]]
; CHECK-NEXT:    [[ARRAYIDX_5:%.*]] = getelementptr inbounds nuw float, ptr [[DATA1]], i32 [[ADD15]]
; CHECK-NEXT:    [[ARRAYIDX1_5:%.*]] = getelementptr inbounds nuw float, ptr [[DATA2]], i32 [[ADD15]]
; CHECK-NEXT:    [[ARRAYIDX_6:%.*]] = getelementptr inbounds nuw float, ptr [[DATA1]], i32 [[ADD17]]
; CHECK-NEXT:    [[ARRAYIDX1_6:%.*]] = getelementptr inbounds nuw float, ptr [[DATA2]], i32 [[ADD17]]
; CHECK-NEXT:    [[ARRAYIDX_7:%.*]] = getelementptr inbounds nuw float, ptr [[DATA1]], i32 [[ADD19]]
; CHECK-NEXT:    [[ARRAYIDX1_7:%.*]] = getelementptr inbounds nuw float, ptr [[DATA2]], i32 [[ADD19]]
; CHECK-NEXT:    [[TMP0:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX1]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX_1]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX1_1]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX_2]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load float, ptr [[ARRAYIDX1_2]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = load float, ptr [[ARRAYIDX_3]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load float, ptr [[ARRAYIDX1_3]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = load float, ptr [[ARRAYIDX_4]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[ARRAYIDX1_4]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load float, ptr [[ARRAYIDX_5]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = load float, ptr [[ARRAYIDX1_5]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = load float, ptr [[ARRAYIDX_6]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = load float, ptr [[ARRAYIDX1_6]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = load float, ptr [[ARRAYIDX_7]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[ARRAYIDX1_7]], align 4
; CHECK-NEXT:    [[TMP16]] = tail call float @llvm.fmuladd.f32(float [[TMP0]], float [[TMP1]], float [[DOTPHI]])
; CHECK-NEXT:    [[TMP17]] = tail call float @llvm.fmuladd.f32(float [[TMP2]], float [[TMP3]], float [[DOTPHI1]])
; CHECK-NEXT:    [[TMP18]] = tail call float @llvm.fmuladd.f32(float [[TMP4]], float [[TMP5]], float [[DOTPHI2]])
; CHECK-NEXT:    [[TMP19]] = tail call float @llvm.fmuladd.f32(float [[TMP6]], float [[TMP7]], float [[DOTPHI3]])
; CHECK-NEXT:    [[TMP20]] = tail call float @llvm.fmuladd.f32(float [[TMP8]], float [[TMP9]], float [[DOTPHI4]])
; CHECK-NEXT:    [[TMP21]] = tail call float @llvm.fmuladd.f32(float [[TMP10]], float [[TMP11]], float [[DOTPHI5]])
; CHECK-NEXT:    [[TMP22]] = tail call float @llvm.fmuladd.f32(float [[TMP12]], float [[TMP13]], float [[DOTPHI6]])
; CHECK-NEXT:    [[TMP23]] = tail call float @llvm.fmuladd.f32(float [[TMP14]], float [[TMP15]], float [[DOTPHI7]])
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i32 [[INC_7]], 1009
; CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_END:%.*]]
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret float %2

for.body:                                         ; preds = %for.body, %entry
  %i.07 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %result.06 = phi float [ 0.000000e+00, %entry ], [ %2, %for.body ]
  %arrayidx = getelementptr inbounds float, ptr %data1, i32 %i.07
  %0 = load float, ptr %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds float, ptr %data2, i32 %i.07
  %1 = load float, ptr %arrayidx1, align 4
  %2 = tail call float @llvm.fmuladd.f32(float %0, float %1, float %result.06)
  %inc = add nuw nsw i32 %i.07, 1
  %exitcond.not = icmp eq i32 %inc, 1024
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}
