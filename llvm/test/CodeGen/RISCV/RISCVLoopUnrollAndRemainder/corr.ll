; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=false < %s | FileCheck %s
define dso_local noundef i32 @dsps_corr_f32_ansi(ptr noundef readonly %Signal, i32 noundef %siglen, ptr noundef readonly %Pattern, i32 noundef %patlen, ptr noundef writeonly %dest) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_corr_f32_ansi(
; CHECK-SAME: ptr noundef readonly [[SIGNAL:%.*]], i32 noundef [[SIGLEN:%.*]], ptr noundef readonly [[PATTERN:%.*]], i32 noundef [[PATLEN:%.*]], ptr noundef writeonly [[DEST:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq ptr [[SIGNAL]], null
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq ptr [[PATTERN]], null
; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP]], [[CMP1]]
; CHECK-NEXT:    [[CMP4:%.*]] = icmp eq ptr [[DEST]], null
; CHECK-NEXT:    [[OR_COND33:%.*]] = or i1 [[OR_COND]], [[CMP4]]
; CHECK-NEXT:    [[CMP7:%.*]] = icmp slt i32 [[SIGLEN]], [[PATLEN]]
; CHECK-NEXT:    [[OR_COND34:%.*]] = or i1 [[CMP7]], [[OR_COND33]]
; CHECK-NEXT:    br i1 [[OR_COND34]], label [[RETURN:%.*]], label [[FOR_COND_PREHEADER:%.*]]
; CHECK:       for.cond.preheader:
; CHECK-NEXT:    [[SUB:%.*]] = sub nsw i32 [[SIGLEN]], [[PATLEN]]
; CHECK-NEXT:    [[CMP1235_NOT:%.*]] = icmp eq i32 [[PATLEN]], 0
; CHECK-NEXT:    br i1 [[CMP1235_NOT]], label [[FOR_COND11_PREHEADER_PREHEADER:%.*]], label [[FOR_COND11_PREHEADER_US:%.*]]
; CHECK:       for.cond11.preheader.preheader:
; CHECK-NEXT:    [[TMP0:%.*]] = shl i32 [[SIGLEN]], 2
; CHECK-NEXT:    [[TMP1:%.*]] = add i32 [[TMP0]], 4
; CHECK-NEXT:    tail call void @llvm.memset.p0.i32(ptr nonnull align 4 [[DEST]], i8 0, i32 [[TMP1]], i1 false)
; CHECK-NEXT:    br label [[RETURN]]
; CHECK:       for.cond11.preheader.us:
; CHECK-NEXT:    [[N_038_US:%.*]] = phi i32 [ [[INC18_US:%.*]], [[FOR_COND11_FOR_COND_CLEANUP13_CRIT_EDGE_US:%.*]] ], [ 0, [[FOR_COND_PREHEADER]] ]
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr float, ptr [[SIGNAL]], i32 [[N_038_US]]
; CHECK-NEXT:    br label [[FOR_BODY14_US:%.*]]
; CHECK:       for.body14.us:
; CHECK-NEXT:    [[M_037_US:%.*]] = phi i32 [ 0, [[FOR_COND11_PREHEADER_US]] ], [ [[INC_US:%.*]], [[FOR_BODY14_US]] ]
; CHECK-NEXT:    [[K_CORR_036_US:%.*]] = phi float [ 0.000000e+00, [[FOR_COND11_PREHEADER_US]] ], [ [[TMP5:%.*]], [[FOR_BODY14_US]] ]
; CHECK-NEXT:    [[ARRAYIDX_US:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[M_037_US]]
; CHECK-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX_US]], align 4
; CHECK-NEXT:    [[ARRAYIDX15_US:%.*]] = getelementptr inbounds float, ptr [[PATTERN]], i32 [[M_037_US]]
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX15_US]], align 4
; CHECK-NEXT:    [[TMP5]] = tail call float @llvm.fmuladd.f32(float [[TMP3]], float [[TMP4]], float [[K_CORR_036_US]])
; CHECK-NEXT:    [[INC_US]] = add nuw i32 [[M_037_US]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC_US]], [[PATLEN]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND11_FOR_COND_CLEANUP13_CRIT_EDGE_US]], label [[FOR_BODY14_US]]
; CHECK:       for.cond11.for.cond.cleanup13_crit_edge.us:
; CHECK-NEXT:    [[ARRAYIDX16_US:%.*]] = getelementptr inbounds float, ptr [[DEST]], i32 [[N_038_US]]
; CHECK-NEXT:    store float [[TMP5]], ptr [[ARRAYIDX16_US]], align 4
; CHECK-NEXT:    [[INC18_US]] = add nuw i32 [[N_038_US]], 1
; CHECK-NEXT:    [[CMP10_NOT_US_NOT:%.*]] = icmp ult i32 [[N_038_US]], [[SUB]]
; CHECK-NEXT:    br i1 [[CMP10_NOT_US_NOT]], label [[FOR_COND11_PREHEADER_US]], label [[RETURN]]
; CHECK:       return:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ 458755, [[ENTRY:%.*]] ], [ 0, [[FOR_COND11_PREHEADER_PREHEADER]] ], [ 0, [[FOR_COND11_FOR_COND_CLEANUP13_CRIT_EDGE_US]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0]]
;
entry:
  %cmp = icmp eq ptr %Signal, null
  %cmp1 = icmp eq ptr %Pattern, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp4 = icmp eq ptr %dest, null
  %or.cond33 = or i1 %or.cond, %cmp4
  %cmp7 = icmp slt i32 %siglen, %patlen
  %or.cond34 = or i1 %cmp7, %or.cond33
  br i1 %or.cond34, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %sub = sub nsw i32 %siglen, %patlen
  %cmp1235.not = icmp eq i32 %patlen, 0
  br i1 %cmp1235.not, label %for.cond11.preheader.preheader, label %for.cond11.preheader.us

for.cond11.preheader.preheader:                   ; preds = %for.cond.preheader
  %0 = shl i32 %siglen, 2
  %1 = add i32 %0, 4
  tail call void @llvm.memset.p0.i32(ptr nonnull align 4 %dest, i8 0, i32 %1, i1 false)
  br label %return

for.cond11.preheader.us:                          ; preds = %for.cond11.for.cond.cleanup13_crit_edge.us, %for.cond.preheader
  %n.038.us = phi i32 [ %inc18.us, %for.cond11.for.cond.cleanup13_crit_edge.us ], [ 0, %for.cond.preheader ]
  %2 = getelementptr float, ptr %Signal, i32 %n.038.us
  br label %for.body14.us

for.body14.us:                                    ; preds = %for.body14.us, %for.cond11.preheader.us
  %m.037.us = phi i32 [ 0, %for.cond11.preheader.us ], [ %inc.us, %for.body14.us ]
  %k_corr.036.us = phi float [ 0.000000e+00, %for.cond11.preheader.us ], [ %5, %for.body14.us ]
  %arrayidx.us = getelementptr float, ptr %2, i32 %m.037.us
  %3 = load float, ptr %arrayidx.us, align 4
  %arrayidx15.us = getelementptr inbounds float, ptr %Pattern, i32 %m.037.us
  %4 = load float, ptr %arrayidx15.us, align 4
  %5 = tail call float @llvm.fmuladd.f32(float %3, float %4, float %k_corr.036.us)
  %inc.us = add nuw i32 %m.037.us, 1
  %exitcond.not = icmp eq i32 %inc.us, %patlen
  br i1 %exitcond.not, label %for.cond11.for.cond.cleanup13_crit_edge.us, label %for.body14.us

for.cond11.for.cond.cleanup13_crit_edge.us:       ; preds = %for.body14.us
  %arrayidx16.us = getelementptr inbounds float, ptr %dest, i32 %n.038.us
  store float %5, ptr %arrayidx16.us, align 4
  %inc18.us = add nuw i32 %n.038.us, 1
  %cmp10.not.us.not = icmp ult i32 %n.038.us, %sub
  br i1 %cmp10.not.us.not, label %for.cond11.preheader.us, label %return

return:                                           ; preds = %for.cond11.for.cond.cleanup13_crit_edge.us, %for.cond11.preheader.preheader, %entry
  %retval.0 = phi i32 [ 458755, %entry ], [ 0, %for.cond11.preheader.preheader ], [ 0, %for.cond11.for.cond.cleanup13_crit_edge.us ]
  ret i32 %retval.0
}
