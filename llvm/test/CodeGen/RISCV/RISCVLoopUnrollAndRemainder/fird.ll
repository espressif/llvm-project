; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=true < %s | FileCheck %s
%struct.fir_f32_s = type { ptr, ptr, i32, i32, i32, i16 }
define dso_local noundef i32 @dsps_fird_f32_ansi(ptr nocapture noundef %fir, ptr nocapture noundef readonly %input, ptr nocapture noundef writeonly %output, i32 noundef %len) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_fird_f32_ansi(
; CHECK-SAME: ptr noalias nocapture noundef [[FIR:%.*]], ptr noalias nocapture noundef readonly [[INPUT:%.*]], ptr noalias nocapture noundef writeonly [[OUTPUT:%.*]], i32 noundef [[LEN:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP77:%.*]] = icmp sgt i32 [[LEN]], 0
; CHECK-NEXT:    br i1 [[CMP77]], label [[FOR_COND1_PREHEADER_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.cond1.preheader.lr.ph:
; CHECK-NEXT:    [[DECIM:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S:%.*]], ptr [[FIR]], i32 0, i32 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[DECIM]], align 4
; CHECK-NEXT:    [[CMP263:%.*]] = icmp sgt i32 [[TMP0]], 0
; CHECK-NEXT:    [[DELAY:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 1
; CHECK-NEXT:    [[POS:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 3
; CHECK-NEXT:    [[N:%.*]] = getelementptr inbounds [[STRUCT_FIR_F32_S]], ptr [[FIR]], i32 0, i32 2
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[N]], align 4
; CHECK-NEXT:    [[POS9_PROMOTED:%.*]] = load i32, ptr [[POS]], align 4
; CHECK-NEXT:    br label [[FOR_COND1_PREHEADER:%.*]]
; CHECK:       for.cond1.preheader:
; CHECK-NEXT:    [[TMP2:%.*]] = phi i32 [ [[POS9_PROMOTED]], [[FOR_COND1_PREHEADER_LR_PH]] ], [ [[TMP4:%.*]], [[FOR_END141:%.*]] ]
; CHECK-NEXT:    [[I_080:%.*]] = phi i32 [ 0, [[FOR_COND1_PREHEADER_LR_PH]] ], [ [[INC152:%.*]], [[FOR_END141]] ]
; CHECK-NEXT:    [[INPUT_ADDR_078:%.*]] = phi ptr [ [[INPUT]], [[FOR_COND1_PREHEADER_LR_PH]] ], [ [[INPUT_ADDR_1_LCSSA:%.*]], [[FOR_END141]] ]
; CHECK-NEXT:    br i1 [[CMP263]], label [[FOR_BODY4_LR_PH:%.*]], label [[FOR_COND_CLEANUP3:%.*]]
; CHECK:       for.body4.lr.ph:
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    br label [[FOR_BODY4:%.*]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    [[RESULT_0_LCSSA:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[LEN]], [[FOR_END141]] ]
; CHECK-NEXT:    ret i32 [[RESULT_0_LCSSA]]
; CHECK:       for.cond1.for.cond.cleanup3_crit_edge:
; CHECK-NEXT:    [[INCDEC_PTR_LCSSA:%.*]] = phi ptr [ [[INCDEC_PTR:%.*]], [[FOR_BODY4]] ]
; CHECK-NEXT:    [[SPEC_SELECT_LCSSA:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], [[FOR_BODY4]] ]
; CHECK-NEXT:    store i32 [[SPEC_SELECT_LCSSA]], ptr [[POS]], align 4
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP3]]
; CHECK:       for.cond.cleanup3:
; CHECK-NEXT:    [[TMP4]] = phi i32 [ [[SPEC_SELECT_LCSSA]], [[FOR_COND1_FOR_COND_CLEANUP3_CRIT_EDGE:%.*]] ], [ [[TMP2]], [[FOR_COND1_PREHEADER]] ]
; CHECK-NEXT:    [[INPUT_ADDR_1_LCSSA]] = phi ptr [ [[INCDEC_PTR_LCSSA]], [[FOR_COND1_FOR_COND_CLEANUP3_CRIT_EDGE]] ], [ [[INPUT_ADDR_078]], [[FOR_COND1_PREHEADER]] ]
; CHECK-NEXT:    [[ADD269:%.*]] = add nsw i32 [[TMP4]], 8
; CHECK-NEXT:    [[CMP1266:%.*]] = icmp sgt i32 [[ADD269]], [[TMP1]]
; CHECK-NEXT:    br i1 [[CMP1266]], label [[FOR_COND63_PREHEADER:%.*]], label [[FOR_BODY14_LR_PH:%.*]]
; CHECK:       for.body14.lr.ph:
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    [[SCEVGEP:%.*]] = getelementptr i8, ptr [[TMP6]], i32 28
; CHECK-NEXT:    [[TMP7:%.*]] = shl i32 [[TMP4]], 2
; CHECK-NEXT:    [[SCEVGEP101:%.*]] = getelementptr i8, ptr [[SCEVGEP]], i32 [[TMP7]]
; CHECK-NEXT:    [[SCEVGEP105:%.*]] = getelementptr i8, ptr [[TMP6]], i32 24
; CHECK-NEXT:    [[SCEVGEP106:%.*]] = getelementptr i8, ptr [[SCEVGEP105]], i32 [[TMP7]]
; CHECK-NEXT:    [[SCEVGEP108:%.*]] = getelementptr i8, ptr [[TMP6]], i32 20
; CHECK-NEXT:    [[SCEVGEP109:%.*]] = getelementptr i8, ptr [[SCEVGEP108]], i32 [[TMP7]]
; CHECK-NEXT:    [[SCEVGEP111:%.*]] = getelementptr i8, ptr [[TMP6]], i32 16
; CHECK-NEXT:    [[SCEVGEP112:%.*]] = getelementptr i8, ptr [[SCEVGEP111]], i32 [[TMP7]]
; CHECK-NEXT:    [[SCEVGEP114:%.*]] = getelementptr i8, ptr [[TMP6]], i32 12
; CHECK-NEXT:    [[SCEVGEP115:%.*]] = getelementptr i8, ptr [[SCEVGEP114]], i32 [[TMP7]]
; CHECK-NEXT:    [[SCEVGEP117:%.*]] = getelementptr i8, ptr [[TMP6]], i32 8
; CHECK-NEXT:    [[SCEVGEP118:%.*]] = getelementptr i8, ptr [[SCEVGEP117]], i32 [[TMP7]]
; CHECK-NEXT:    [[SCEVGEP120:%.*]] = getelementptr i8, ptr [[TMP6]], i32 4
; CHECK-NEXT:    [[SCEVGEP121:%.*]] = getelementptr i8, ptr [[SCEVGEP120]], i32 [[TMP7]]
; CHECK-NEXT:    [[SCEVGEP123:%.*]] = getelementptr i8, ptr [[TMP6]], i32 [[TMP7]]
; CHECK-NEXT:    [[SCEVGEP127:%.*]] = getelementptr i8, ptr [[TMP5]], i32 28
; CHECK-NEXT:    [[SCEVGEP129:%.*]] = getelementptr i8, ptr [[TMP5]], i32 24
; CHECK-NEXT:    [[SCEVGEP131:%.*]] = getelementptr i8, ptr [[TMP5]], i32 20
; CHECK-NEXT:    [[SCEVGEP133:%.*]] = getelementptr i8, ptr [[TMP5]], i32 16
; CHECK-NEXT:    [[SCEVGEP135:%.*]] = getelementptr i8, ptr [[TMP5]], i32 12
; CHECK-NEXT:    [[SCEVGEP137:%.*]] = getelementptr i8, ptr [[TMP5]], i32 8
; CHECK-NEXT:    [[SCEVGEP139:%.*]] = getelementptr i8, ptr [[TMP5]], i32 4
; CHECK-NEXT:    br label [[FOR_BODY14_7:%.*]]
; CHECK:       for.body4:
; CHECK-NEXT:    [[LSR_IV:%.*]] = phi i32 [ [[LSR_IV_NEXT:%.*]], [[FOR_BODY4]] ], [ [[TMP0]], [[FOR_BODY4_LR_PH]] ]
; CHECK-NEXT:    [[TMP8:%.*]] = phi i32 [ [[TMP2]], [[FOR_BODY4_LR_PH]] ], [ [[SPEC_SELECT]], [[FOR_BODY4]] ]
; CHECK-NEXT:    [[INPUT_ADDR_164:%.*]] = phi ptr [ [[INPUT_ADDR_078]], [[FOR_BODY4_LR_PH]] ], [ [[INCDEC_PTR]], [[FOR_BODY4]] ]
; CHECK-NEXT:    [[INCDEC_PTR]] = getelementptr inbounds float, ptr [[INPUT_ADDR_164]], i32 1
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[INPUT_ADDR_164]], align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP8]], 1
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[TMP3]], i32 [[TMP8]]
; CHECK-NEXT:    store float [[TMP9]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[CMP6_NOT:%.*]] = icmp slt i32 [[INC]], [[TMP1]]
; CHECK-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP6_NOT]], i32 [[INC]], i32 0
; CHECK-NEXT:    [[LSR_IV_NEXT]] = add i32 [[LSR_IV]], -1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[LSR_IV_NEXT]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND1_FOR_COND_CLEANUP3_CRIT_EDGE]], label [[FOR_BODY4]]
; CHECK:       for.cond63.preheader:
; CHECK-NEXT:    [[ACC_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP18:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_1_LCSSA2:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP21:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_2_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP24:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_3_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP27:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_4_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP30:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_5_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP33:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_6_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP36:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC_7_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_COND_CLEANUP3]] ], [ [[TMP39:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[COEFF_POS_0_LCSSA:%.*]] = phi i32 [ 0, [[FOR_COND_CLEANUP3]] ], [ [[LSR_IV_NEXT126:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[N_0_LCSSA:%.*]] = phi i32 [ [[TMP4]], [[FOR_COND_CLEANUP3]] ], [ [[LSR_IV_NEXT100:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[CMP2572:%.*]] = icmp slt i32 [[N_0_LCSSA]], [[TMP1]]
; CHECK-NEXT:    br i1 [[CMP2572]], label [[FOR_BODY27_LR_PH:%.*]], label [[FOR_COND_CLEANUP26:%.*]]
; CHECK:       for.body27.lr.ph:
; CHECK-NEXT:    [[TMP10:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = add i32 [[COEFF_POS_0_LCSSA]], [[TMP1]]
; CHECK-NEXT:    [[TMP13:%.*]] = sub i32 [[TMP1]], [[N_0_LCSSA]]
; CHECK-NEXT:    [[TMP14:%.*]] = shl i32 [[N_0_LCSSA]], 2
; CHECK-NEXT:    [[SCEVGEP144:%.*]] = getelementptr i8, ptr [[TMP11]], i32 [[TMP14]]
; CHECK-NEXT:    [[TMP15:%.*]] = shl i32 [[COEFF_POS_0_LCSSA]], 2
; CHECK-NEXT:    [[SCEVGEP147:%.*]] = getelementptr i8, ptr [[TMP10]], i32 [[TMP15]]
; CHECK-NEXT:    br label [[FOR_BODY14_CLONE:%.*]]
; CHECK:       for.body14.7:
; CHECK-NEXT:    [[LSR_IV125:%.*]] = phi i32 [ 0, [[FOR_BODY14_LR_PH]] ], [ [[LSR_IV_NEXT126]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[LSR_IV102:%.*]] = phi i32 [ 0, [[FOR_BODY14_LR_PH]] ], [ [[LSR_IV_NEXT103:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[LSR_IV99:%.*]] = phi i32 [ [[TMP4]], [[FOR_BODY14_LR_PH]] ], [ [[LSR_IV_NEXT100]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP18]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC3:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP21]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC4:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP24]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC5:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP27]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC6:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP30]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC7:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP33]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC8:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP36]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ACC9:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14_LR_PH]] ], [ [[TMP39]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[SCEVGEP141:%.*]] = getelementptr i8, ptr [[TMP5]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP16:%.*]] = load float, ptr [[SCEVGEP141]], align 4
; CHECK-NEXT:    [[SCEVGEP124:%.*]] = getelementptr i8, ptr [[SCEVGEP123]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP17:%.*]] = load float, ptr [[SCEVGEP124]], align 4
; CHECK-NEXT:    [[TMP18]] = tail call float @llvm.fmuladd.f32(float [[TMP16]], float [[TMP17]], float [[ACC]])
; CHECK-NEXT:    [[SCEVGEP140:%.*]] = getelementptr i8, ptr [[SCEVGEP139]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[SCEVGEP140]], align 4
; CHECK-NEXT:    [[SCEVGEP122:%.*]] = getelementptr i8, ptr [[SCEVGEP121]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP20:%.*]] = load float, ptr [[SCEVGEP122]], align 4
; CHECK-NEXT:    [[TMP21]] = tail call float @llvm.fmuladd.f32(float [[TMP19]], float [[TMP20]], float [[ACC3]])
; CHECK-NEXT:    [[SCEVGEP138:%.*]] = getelementptr i8, ptr [[SCEVGEP137]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP22:%.*]] = load float, ptr [[SCEVGEP138]], align 4
; CHECK-NEXT:    [[SCEVGEP119:%.*]] = getelementptr i8, ptr [[SCEVGEP118]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP23:%.*]] = load float, ptr [[SCEVGEP119]], align 4
; CHECK-NEXT:    [[TMP24]] = tail call float @llvm.fmuladd.f32(float [[TMP22]], float [[TMP23]], float [[ACC4]])
; CHECK-NEXT:    [[SCEVGEP136:%.*]] = getelementptr i8, ptr [[SCEVGEP135]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP25:%.*]] = load float, ptr [[SCEVGEP136]], align 4
; CHECK-NEXT:    [[SCEVGEP116:%.*]] = getelementptr i8, ptr [[SCEVGEP115]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP26:%.*]] = load float, ptr [[SCEVGEP116]], align 4
; CHECK-NEXT:    [[TMP27]] = tail call float @llvm.fmuladd.f32(float [[TMP25]], float [[TMP26]], float [[ACC5]])
; CHECK-NEXT:    [[SCEVGEP134:%.*]] = getelementptr i8, ptr [[SCEVGEP133]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP28:%.*]] = load float, ptr [[SCEVGEP134]], align 4
; CHECK-NEXT:    [[SCEVGEP113:%.*]] = getelementptr i8, ptr [[SCEVGEP112]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP29:%.*]] = load float, ptr [[SCEVGEP113]], align 4
; CHECK-NEXT:    [[TMP30]] = tail call float @llvm.fmuladd.f32(float [[TMP28]], float [[TMP29]], float [[ACC6]])
; CHECK-NEXT:    [[SCEVGEP132:%.*]] = getelementptr i8, ptr [[SCEVGEP131]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP31:%.*]] = load float, ptr [[SCEVGEP132]], align 4
; CHECK-NEXT:    [[SCEVGEP110:%.*]] = getelementptr i8, ptr [[SCEVGEP109]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP32:%.*]] = load float, ptr [[SCEVGEP110]], align 4
; CHECK-NEXT:    [[TMP33]] = tail call float @llvm.fmuladd.f32(float [[TMP31]], float [[TMP32]], float [[ACC7]])
; CHECK-NEXT:    [[SCEVGEP130:%.*]] = getelementptr i8, ptr [[SCEVGEP129]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP34:%.*]] = load float, ptr [[SCEVGEP130]], align 4
; CHECK-NEXT:    [[SCEVGEP107:%.*]] = getelementptr i8, ptr [[SCEVGEP106]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP35:%.*]] = load float, ptr [[SCEVGEP107]], align 4
; CHECK-NEXT:    [[TMP36]] = tail call float @llvm.fmuladd.f32(float [[TMP34]], float [[TMP35]], float [[ACC8]])
; CHECK-NEXT:    [[SCEVGEP128:%.*]] = getelementptr i8, ptr [[SCEVGEP127]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP37:%.*]] = load float, ptr [[SCEVGEP128]], align 4
; CHECK-NEXT:    [[SCEVGEP104:%.*]] = getelementptr i8, ptr [[SCEVGEP101]], i32 [[LSR_IV102]]
; CHECK-NEXT:    [[TMP38:%.*]] = load float, ptr [[SCEVGEP104]], align 4
; CHECK-NEXT:    [[TMP39]] = tail call float @llvm.fmuladd.f32(float [[TMP37]], float [[TMP38]], float [[ACC9]])
; CHECK-NEXT:    [[LSR_IV_NEXT100]] = add nsw i32 [[LSR_IV99]], 8
; CHECK-NEXT:    [[TMP40:%.*]] = add i32 [[LSR_IV_NEXT100]], 8
; CHECK-NEXT:    [[LSR_IV_NEXT103]] = add nuw i32 [[LSR_IV102]], 32
; CHECK-NEXT:    [[LSR_IV_NEXT126]] = add nuw i32 [[LSR_IV125]], 8
; CHECK-NEXT:    [[EXITCOND83_NOT_7:%.*]] = icmp sgt i32 [[TMP40]], [[TMP1]]
; CHECK-NEXT:    br i1 [[EXITCOND83_NOT_7]], label [[FOR_COND63_PREHEADER]], label [[FOR_BODY14_7]]
; CHECK:       for.body79.lr.ph:
; CHECK-NEXT:    [[TMP41:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP42:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    [[TMP43:%.*]] = and i32 [[TMP4]], 2147483640
; CHECK-NEXT:    [[SCEVGEP150:%.*]] = getelementptr i8, ptr [[TMP42]], i32 28
; CHECK-NEXT:    [[SCEVGEP154:%.*]] = getelementptr i8, ptr [[TMP42]], i32 24
; CHECK-NEXT:    [[SCEVGEP156:%.*]] = getelementptr i8, ptr [[TMP42]], i32 20
; CHECK-NEXT:    [[SCEVGEP158:%.*]] = getelementptr i8, ptr [[TMP42]], i32 16
; CHECK-NEXT:    [[SCEVGEP160:%.*]] = getelementptr i8, ptr [[TMP42]], i32 12
; CHECK-NEXT:    [[SCEVGEP162:%.*]] = getelementptr i8, ptr [[TMP42]], i32 8
; CHECK-NEXT:    [[SCEVGEP164:%.*]] = getelementptr i8, ptr [[TMP42]], i32 4
; CHECK-NEXT:    [[SCEVGEP169:%.*]] = getelementptr i8, ptr [[TMP41]], i32 28
; CHECK-NEXT:    [[TMP44:%.*]] = shl i32 [[COEFF_POS_1_LCSSA:%.*]], 2
; CHECK-NEXT:    [[SCEVGEP170:%.*]] = getelementptr i8, ptr [[SCEVGEP169]], i32 [[TMP44]]
; CHECK-NEXT:    [[SCEVGEP172:%.*]] = getelementptr i8, ptr [[TMP41]], i32 24
; CHECK-NEXT:    [[SCEVGEP173:%.*]] = getelementptr i8, ptr [[SCEVGEP172]], i32 [[TMP44]]
; CHECK-NEXT:    [[SCEVGEP175:%.*]] = getelementptr i8, ptr [[TMP41]], i32 20
; CHECK-NEXT:    [[SCEVGEP176:%.*]] = getelementptr i8, ptr [[SCEVGEP175]], i32 [[TMP44]]
; CHECK-NEXT:    [[SCEVGEP178:%.*]] = getelementptr i8, ptr [[TMP41]], i32 16
; CHECK-NEXT:    [[SCEVGEP179:%.*]] = getelementptr i8, ptr [[SCEVGEP178]], i32 [[TMP44]]
; CHECK-NEXT:    [[SCEVGEP181:%.*]] = getelementptr i8, ptr [[TMP41]], i32 12
; CHECK-NEXT:    [[SCEVGEP182:%.*]] = getelementptr i8, ptr [[SCEVGEP181]], i32 [[TMP44]]
; CHECK-NEXT:    [[SCEVGEP184:%.*]] = getelementptr i8, ptr [[TMP41]], i32 8
; CHECK-NEXT:    [[SCEVGEP185:%.*]] = getelementptr i8, ptr [[SCEVGEP184]], i32 [[TMP44]]
; CHECK-NEXT:    [[SCEVGEP187:%.*]] = getelementptr i8, ptr [[TMP41]], i32 4
; CHECK-NEXT:    [[SCEVGEP188:%.*]] = getelementptr i8, ptr [[SCEVGEP187]], i32 [[TMP44]]
; CHECK-NEXT:    [[SCEVGEP190:%.*]] = getelementptr i8, ptr [[TMP41]], i32 [[TMP44]]
; CHECK-NEXT:    br label [[FOR_BODY27_7:%.*]]
; CHECK:       for.body14.clone:
; CHECK-NEXT:    [[LSR_IV148:%.*]] = phi ptr [ [[SCEVGEP149:%.*]], [[FOR_BODY14_CLONE]] ], [ [[SCEVGEP147]], [[FOR_BODY27_LR_PH]] ]
; CHECK-NEXT:    [[LSR_IV145:%.*]] = phi ptr [ [[SCEVGEP146:%.*]], [[FOR_BODY14_CLONE]] ], [ [[SCEVGEP144]], [[FOR_BODY27_LR_PH]] ]
; CHECK-NEXT:    [[LSR_IV142:%.*]] = phi i32 [ [[LSR_IV_NEXT143:%.*]], [[FOR_BODY14_CLONE]] ], [ [[TMP13]], [[FOR_BODY27_LR_PH]] ]
; CHECK-NEXT:    [[ACC_067_CLONE:%.*]] = phi float [ [[ACC_0_LCSSA]], [[FOR_BODY27_LR_PH]] ], [ [[TMP47:%.*]], [[FOR_BODY14_CLONE]] ]
; CHECK-NEXT:    [[TMP45:%.*]] = load float, ptr [[LSR_IV148]], align 4
; CHECK-NEXT:    [[TMP46:%.*]] = load float, ptr [[LSR_IV145]], align 4
; CHECK-NEXT:    [[TMP47]] = tail call float @llvm.fmuladd.f32(float [[TMP45]], float [[TMP46]], float [[ACC_067_CLONE]])
; CHECK-NEXT:    [[LSR_IV_NEXT143]] = add i32 [[LSR_IV142]], -1
; CHECK-NEXT:    [[SCEVGEP146]] = getelementptr i8, ptr [[LSR_IV145]], i32 4
; CHECK-NEXT:    [[SCEVGEP149]] = getelementptr i8, ptr [[LSR_IV148]], i32 4
; CHECK-NEXT:    [[EXITCOND83_NOT_CLONE:%.*]] = icmp eq i32 [[LSR_IV_NEXT143]], 0
; CHECK-NEXT:    br i1 [[EXITCOND83_NOT_CLONE]], label [[FOR_COND_CLEANUP26_LOOPEXIT:%.*]], label [[FOR_BODY14_CLONE]]
; CHECK:       for.cond130.preheader:
; CHECK-NEXT:    [[ACC_0_LCSSA_CLONE:%.*]] = phi float [ [[ACC_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26]] ], [ [[TMP51:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_1_LCSSA2_CLONE:%.*]] = phi float [ [[ACC_1_LCSSA2]], [[FOR_COND_CLEANUP26]] ], [ [[TMP54:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_2_LCSSA_CLONE:%.*]] = phi float [ [[ACC_2_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP57:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_3_LCSSA_CLONE:%.*]] = phi float [ [[ACC_3_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP60:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_4_LCSSA_CLONE:%.*]] = phi float [ [[ACC_4_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP63:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_5_LCSSA_CLONE:%.*]] = phi float [ [[ACC_5_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP66:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_6_LCSSA_CLONE:%.*]] = phi float [ [[ACC_6_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP69:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC_7_LCSSA_CLONE:%.*]] = phi float [ [[ACC_7_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[TMP72:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[COEFF_POS_0_LCSSA_CLONE:%.*]] = phi i32 [ [[COEFF_POS_1_LCSSA]], [[FOR_COND_CLEANUP26]] ], [ [[LSR_IV_NEXT168:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[N_0_LCSSA_CLONE:%.*]] = phi i32 [ 0, [[FOR_COND_CLEANUP26]] ], [ [[TMP43]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[CMP2572_CLONE:%.*]] = icmp slt i32 [[N_0_LCSSA_CLONE]], [[TMP4]]
; CHECK-NEXT:    br i1 [[CMP2572_CLONE]], label [[FOR_BODY133_LR_PH:%.*]], label [[FOR_END141]]
; CHECK:       for.cond.cleanup26.loopexit:
; CHECK-NEXT:    [[DOTLCSSA207:%.*]] = phi float [ [[TMP47]], [[FOR_BODY14_CLONE]] ]
; CHECK-NEXT:    [[N_0_LCSSA_NEG:%.*]] = sub i32 0, [[N_0_LCSSA]]
; CHECK-NEXT:    [[TMP48:%.*]] = add i32 [[TMP12]], [[N_0_LCSSA_NEG]]
; CHECK-NEXT:    br label [[FOR_COND_CLEANUP26]]
; CHECK:       for.cond.cleanup26:
; CHECK-NEXT:    [[COEFF_POS_1_LCSSA]] = phi i32 [ [[COEFF_POS_0_LCSSA]], [[FOR_COND63_PREHEADER]] ], [ [[TMP48]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[ACC_1_LCSSA]] = phi float [ [[ACC_0_LCSSA]], [[FOR_COND63_PREHEADER]] ], [ [[DOTLCSSA207]], [[FOR_COND_CLEANUP26_LOOPEXIT]] ]
; CHECK-NEXT:    [[EXITCOND85_NOT:%.*]] = icmp slt i32 [[TMP4]], 8
; CHECK-NEXT:    br i1 [[EXITCOND85_NOT]], label [[FOR_COND130_PREHEADER:%.*]], label [[FOR_BODY79_LR_PH:%.*]]
; CHECK:       for.body27.7:
; CHECK-NEXT:    [[LSR_IV167:%.*]] = phi i32 [ [[COEFF_POS_1_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[LSR_IV_NEXT168]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[LSR_IV151:%.*]] = phi i32 [ 0, [[FOR_BODY79_LR_PH]] ], [ [[LSR_IV_NEXT152:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ADD76310:%.*]] = phi i32 [ 8, [[FOR_BODY79_LR_PH]] ], [ [[ADD76:%.*]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC38:%.*]] = phi float [ [[ACC_1_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP51]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC39:%.*]] = phi float [ [[ACC_1_LCSSA2]], [[FOR_BODY79_LR_PH]] ], [ [[TMP54]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC40:%.*]] = phi float [ [[ACC_2_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP57]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC41:%.*]] = phi float [ [[ACC_3_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP60]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC42:%.*]] = phi float [ [[ACC_4_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP63]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC43:%.*]] = phi float [ [[ACC_5_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP66]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC44:%.*]] = phi float [ [[ACC_6_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP69]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[ACC45:%.*]] = phi float [ [[ACC_7_LCSSA]], [[FOR_BODY79_LR_PH]] ], [ [[TMP72]], [[FOR_BODY27_7]] ]
; CHECK-NEXT:    [[SCEVGEP191:%.*]] = getelementptr i8, ptr [[SCEVGEP190]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP49:%.*]] = load float, ptr [[SCEVGEP191]], align 4
; CHECK-NEXT:    [[SCEVGEP166:%.*]] = getelementptr i8, ptr [[TMP42]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP50:%.*]] = load float, ptr [[SCEVGEP166]], align 4
; CHECK-NEXT:    [[TMP51]] = tail call float @llvm.fmuladd.f32(float [[TMP49]], float [[TMP50]], float [[ACC38]])
; CHECK-NEXT:    [[SCEVGEP189:%.*]] = getelementptr i8, ptr [[SCEVGEP188]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP52:%.*]] = load float, ptr [[SCEVGEP189]], align 4
; CHECK-NEXT:    [[SCEVGEP165:%.*]] = getelementptr i8, ptr [[SCEVGEP164]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP53:%.*]] = load float, ptr [[SCEVGEP165]], align 4
; CHECK-NEXT:    [[TMP54]] = tail call float @llvm.fmuladd.f32(float [[TMP52]], float [[TMP53]], float [[ACC39]])
; CHECK-NEXT:    [[SCEVGEP186:%.*]] = getelementptr i8, ptr [[SCEVGEP185]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP55:%.*]] = load float, ptr [[SCEVGEP186]], align 4
; CHECK-NEXT:    [[SCEVGEP163:%.*]] = getelementptr i8, ptr [[SCEVGEP162]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP56:%.*]] = load float, ptr [[SCEVGEP163]], align 4
; CHECK-NEXT:    [[TMP57]] = tail call float @llvm.fmuladd.f32(float [[TMP55]], float [[TMP56]], float [[ACC40]])
; CHECK-NEXT:    [[SCEVGEP183:%.*]] = getelementptr i8, ptr [[SCEVGEP182]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP58:%.*]] = load float, ptr [[SCEVGEP183]], align 4
; CHECK-NEXT:    [[SCEVGEP161:%.*]] = getelementptr i8, ptr [[SCEVGEP160]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP59:%.*]] = load float, ptr [[SCEVGEP161]], align 4
; CHECK-NEXT:    [[TMP60]] = tail call float @llvm.fmuladd.f32(float [[TMP58]], float [[TMP59]], float [[ACC41]])
; CHECK-NEXT:    [[SCEVGEP180:%.*]] = getelementptr i8, ptr [[SCEVGEP179]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP61:%.*]] = load float, ptr [[SCEVGEP180]], align 4
; CHECK-NEXT:    [[SCEVGEP159:%.*]] = getelementptr i8, ptr [[SCEVGEP158]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP62:%.*]] = load float, ptr [[SCEVGEP159]], align 4
; CHECK-NEXT:    [[TMP63]] = tail call float @llvm.fmuladd.f32(float [[TMP61]], float [[TMP62]], float [[ACC42]])
; CHECK-NEXT:    [[SCEVGEP177:%.*]] = getelementptr i8, ptr [[SCEVGEP176]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP64:%.*]] = load float, ptr [[SCEVGEP177]], align 4
; CHECK-NEXT:    [[SCEVGEP157:%.*]] = getelementptr i8, ptr [[SCEVGEP156]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP65:%.*]] = load float, ptr [[SCEVGEP157]], align 4
; CHECK-NEXT:    [[TMP66]] = tail call float @llvm.fmuladd.f32(float [[TMP64]], float [[TMP65]], float [[ACC43]])
; CHECK-NEXT:    [[SCEVGEP174:%.*]] = getelementptr i8, ptr [[SCEVGEP173]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP67:%.*]] = load float, ptr [[SCEVGEP174]], align 4
; CHECK-NEXT:    [[SCEVGEP155:%.*]] = getelementptr i8, ptr [[SCEVGEP154]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP68:%.*]] = load float, ptr [[SCEVGEP155]], align 4
; CHECK-NEXT:    [[TMP69]] = tail call float @llvm.fmuladd.f32(float [[TMP67]], float [[TMP68]], float [[ACC44]])
; CHECK-NEXT:    [[SCEVGEP171:%.*]] = getelementptr i8, ptr [[SCEVGEP170]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP70:%.*]] = load float, ptr [[SCEVGEP171]], align 4
; CHECK-NEXT:    [[SCEVGEP153:%.*]] = getelementptr i8, ptr [[SCEVGEP150]], i32 [[LSR_IV151]]
; CHECK-NEXT:    [[TMP71:%.*]] = load float, ptr [[SCEVGEP153]], align 4
; CHECK-NEXT:    [[TMP72]] = tail call float @llvm.fmuladd.f32(float [[TMP70]], float [[TMP71]], float [[ACC45]])
; CHECK-NEXT:    [[ADD76]] = add nuw nsw i32 [[ADD76310]], 8
; CHECK-NEXT:    [[LSR_IV_NEXT152]] = add nuw i32 [[LSR_IV151]], 32
; CHECK-NEXT:    [[LSR_IV_NEXT168]] = add i32 [[LSR_IV167]], 8
; CHECK-NEXT:    [[EXITCOND84_NOT_7:%.*]] = icmp sgt i32 [[ADD76]], [[TMP4]]
; CHECK-NEXT:    br i1 [[EXITCOND84_NOT_7]], label [[FOR_COND130_PREHEADER]], label [[FOR_BODY27_7]]
; CHECK:       for.body133.lr.ph:
; CHECK-NEXT:    [[TMP73:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    [[TMP74:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    [[TMP75:%.*]] = sub i32 [[TMP4]], [[N_0_LCSSA_CLONE]]
; CHECK-NEXT:    [[TMP76:%.*]] = shl i32 [[N_0_LCSSA_CLONE]], 2
; CHECK-NEXT:    [[SCEVGEP194:%.*]] = getelementptr i8, ptr [[TMP74]], i32 [[TMP76]]
; CHECK-NEXT:    [[TMP77:%.*]] = shl i32 [[COEFF_POS_0_LCSSA_CLONE]], 2
; CHECK-NEXT:    [[SCEVGEP197:%.*]] = getelementptr i8, ptr [[TMP73]], i32 [[TMP77]]
; CHECK-NEXT:    br label [[FOR_BODY27_CLONE:%.*]]
; CHECK:       for.body27.clone:
; CHECK-NEXT:    [[LSR_IV198:%.*]] = phi ptr [ [[SCEVGEP199:%.*]], [[FOR_BODY27_CLONE]] ], [ [[SCEVGEP197]], [[FOR_BODY133_LR_PH]] ]
; CHECK-NEXT:    [[LSR_IV195:%.*]] = phi ptr [ [[SCEVGEP196:%.*]], [[FOR_BODY27_CLONE]] ], [ [[SCEVGEP194]], [[FOR_BODY133_LR_PH]] ]
; CHECK-NEXT:    [[LSR_IV192:%.*]] = phi i32 [ [[LSR_IV_NEXT193:%.*]], [[FOR_BODY27_CLONE]] ], [ [[TMP75]], [[FOR_BODY133_LR_PH]] ]
; CHECK-NEXT:    [[ACC_173_CLONE:%.*]] = phi float [ [[ACC_0_LCSSA_CLONE]], [[FOR_BODY133_LR_PH]] ], [ [[TMP80:%.*]], [[FOR_BODY27_CLONE]] ]
; CHECK-NEXT:    [[TMP78:%.*]] = load float, ptr [[LSR_IV198]], align 4
; CHECK-NEXT:    [[TMP79:%.*]] = load float, ptr [[LSR_IV195]], align 4
; CHECK-NEXT:    [[TMP80]] = tail call float @llvm.fmuladd.f32(float [[TMP78]], float [[TMP79]], float [[ACC_173_CLONE]])
; CHECK-NEXT:    [[LSR_IV_NEXT193]] = add i32 [[LSR_IV192]], -1
; CHECK-NEXT:    [[SCEVGEP196]] = getelementptr i8, ptr [[LSR_IV195]], i32 4
; CHECK-NEXT:    [[SCEVGEP199]] = getelementptr i8, ptr [[LSR_IV198]], i32 4
; CHECK-NEXT:    [[EXITCOND84_NOT_CLONE:%.*]] = icmp eq i32 [[LSR_IV_NEXT193]], 0
; CHECK-NEXT:    br i1 [[EXITCOND84_NOT_CLONE]], label [[FOR_END141]], label [[FOR_BODY27_CLONE]]
; CHECK:       for.end141:
; CHECK-NEXT:    [[ACC0_3_LCSSA:%.*]] = phi float [ [[ACC_0_LCSSA_CLONE]], [[FOR_COND130_PREHEADER]] ], [ [[TMP80]], [[FOR_BODY27_CLONE]] ]
; CHECK-NEXT:    [[ADD60:%.*]] = fadd float [[ACC_1_LCSSA2_CLONE]], [[ACC0_3_LCSSA]]
; CHECK-NEXT:    [[ADD6179:%.*]] = fadd float [[ACC_2_LCSSA_CLONE]], [[ACC_3_LCSSA_CLONE]]
; CHECK-NEXT:    [[ADD62:%.*]] = fadd float [[ACC_4_LCSSA_CLONE]], [[ACC_5_LCSSA_CLONE]]
; CHECK-NEXT:    [[ADD6380:%.*]] = fadd float [[ACC_6_LCSSA_CLONE]], [[ACC_7_LCSSA_CLONE]]
; CHECK-NEXT:    [[ADD64:%.*]] = fadd float [[ADD6179]], [[ADD60]]
; CHECK-NEXT:    [[ADD6581:%.*]] = fadd float [[ADD62]], [[ADD6380]]
; CHECK-NEXT:    [[ADD66:%.*]] = fadd float [[ADD6581]], [[ADD64]]
; CHECK-NEXT:    [[ARRAYIDX37:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[I_080]]
; CHECK-NEXT:    store float [[ADD66]], ptr [[ARRAYIDX37]], align 4
; CHECK-NEXT:    [[INC152]] = add nuw nsw i32 [[I_080]], 1
; CHECK-NEXT:    [[EXITCOND350_NOT:%.*]] = icmp eq i32 [[INC152]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND350_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_COND1_PREHEADER]]
;
entry:
  %cmp77 = icmp sgt i32 %len, 0
  br i1 %cmp77, label %for.cond1.preheader.lr.ph, label %for.cond.cleanup

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %decim = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 4
  %0 = load i32, ptr %decim, align 4
  %cmp263 = icmp sgt i32 %0, 0
  %delay = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 1
  %pos = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 3
  %N = getelementptr inbounds %struct.fir_f32_s, ptr %fir, i32 0, i32 2
  %1 = load i32, ptr %N, align 4
  %pos9.promoted = load i32, ptr %pos, align 4
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond.cleanup26, %for.cond1.preheader.lr.ph
  %2 = phi i32 [ %pos9.promoted, %for.cond1.preheader.lr.ph ], [ %4, %for.cond.cleanup26 ]
  %i.080 = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %inc39, %for.cond.cleanup26 ]
  %input.addr.078 = phi ptr [ %input, %for.cond1.preheader.lr.ph ], [ %input.addr.1.lcssa, %for.cond.cleanup26 ]
  br i1 %cmp263, label %for.body4.lr.ph, label %for.cond.cleanup3

for.body4.lr.ph:                                  ; preds = %for.cond1.preheader
  %3 = load ptr, ptr %delay, align 4
  br label %for.body4

for.cond.cleanup:                                 ; preds = %for.cond.cleanup26, %entry
  %result.0.lcssa = phi i32 [ 0, %entry ], [ %len, %for.cond.cleanup26 ]
  ret i32 %result.0.lcssa

for.cond1.for.cond.cleanup3_crit_edge:            ; preds = %for.body4
  store i32 %spec.select, ptr %pos, align 4
  br label %for.cond.cleanup3

for.cond.cleanup3:                                ; preds = %for.cond1.for.cond.cleanup3_crit_edge, %for.cond1.preheader
  %4 = phi i32 [ %spec.select, %for.cond1.for.cond.cleanup3_crit_edge ], [ %2, %for.cond1.preheader ]
  %input.addr.1.lcssa = phi ptr [ %incdec.ptr, %for.cond1.for.cond.cleanup3_crit_edge ], [ %input.addr.078, %for.cond1.preheader ]
  %cmp1266 = icmp slt i32 %4, %1
  br i1 %cmp1266, label %for.body14.lr.ph, label %for.cond23.preheader

for.body14.lr.ph:                                 ; preds = %for.cond.cleanup3
  %5 = load ptr, ptr %fir, align 4
  %6 = load ptr, ptr %delay, align 4
  %7 = sub i32 %1, %4
  br label %for.body14

for.body4:                                        ; preds = %for.body4, %for.body4.lr.ph
  %8 = phi i32 [ %2, %for.body4.lr.ph ], [ %spec.select, %for.body4 ]
  %k.065 = phi i32 [ 0, %for.body4.lr.ph ], [ %inc8, %for.body4 ]
  %input.addr.164 = phi ptr [ %input.addr.078, %for.body4.lr.ph ], [ %incdec.ptr, %for.body4 ]
  %incdec.ptr = getelementptr inbounds float, ptr %input.addr.164, i32 1
  %9 = load float, ptr %input.addr.164, align 4
  %inc = add nsw i32 %8, 1
  %arrayidx = getelementptr inbounds float, ptr %3, i32 %8
  store float %9, ptr %arrayidx, align 4
  %cmp6.not = icmp slt i32 %inc, %1
  %spec.select = select i1 %cmp6.not, i32 %inc, i32 0
  %inc8 = add nuw nsw i32 %k.065, 1
  %exitcond.not = icmp eq i32 %inc8, %0
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup3_crit_edge, label %for.body4

for.cond23.preheader:                             ; preds = %for.body14, %for.cond.cleanup3
  %acc.0.lcssa = phi float [ 0.000000e+00, %for.cond.cleanup3 ], [ %14, %for.body14 ]
  %coeff_pos.0.lcssa = phi i32 [ 0, %for.cond.cleanup3 ], [ %7, %for.body14 ]
  %cmp2572 = icmp sgt i32 %4, 0
  br i1 %cmp2572, label %for.body27.lr.ph, label %for.cond.cleanup26

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %10 = load ptr, ptr %fir, align 4
  %11 = load ptr, ptr %delay, align 4
  br label %for.body27

for.body14:                                       ; preds = %for.body14, %for.body14.lr.ph
  %n.069 = phi i32 [ %4, %for.body14.lr.ph ], [ %inc20, %for.body14 ]
  %coeff_pos.068 = phi i32 [ 0, %for.body14.lr.ph ], [ %inc15, %for.body14 ]
  %acc.067 = phi float [ 0.000000e+00, %for.body14.lr.ph ], [ %14, %for.body14 ]
  %inc15 = add nuw i32 %coeff_pos.068, 1
  %arrayidx16 = getelementptr inbounds float, ptr %5, i32 %coeff_pos.068
  %12 = load float, ptr %arrayidx16, align 4
  %arrayidx18 = getelementptr inbounds float, ptr %6, i32 %n.069
  %13 = load float, ptr %arrayidx18, align 4
  %14 = tail call float @llvm.fmuladd.f32(float %12, float %13, float %acc.067)
  %inc20 = add nsw i32 %n.069, 1
  %exitcond83.not = icmp eq i32 %inc15, %7
  br i1 %exitcond83.not, label %for.cond23.preheader, label %for.body14

for.cond.cleanup26:                               ; preds = %for.body27, %for.cond23.preheader
  %acc.1.lcssa = phi float [ %acc.0.lcssa, %for.cond23.preheader ], [ %17, %for.body27 ]
  %inc39 = add nuw nsw i32 %i.080, 1
  %arrayidx37 = getelementptr inbounds float, ptr %output, i32 %i.080
  store float %acc.1.lcssa, ptr %arrayidx37, align 4
  %exitcond85.not = icmp eq i32 %inc39, %len
  br i1 %exitcond85.not, label %for.cond.cleanup, label %for.cond1.preheader

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %n22.075 = phi i32 [ 0, %for.body27.lr.ph ], [ %inc34, %for.body27 ]
  %coeff_pos.174 = phi i32 [ %coeff_pos.0.lcssa, %for.body27.lr.ph ], [ %inc29, %for.body27 ]
  %acc.173 = phi float [ %acc.0.lcssa, %for.body27.lr.ph ], [ %17, %for.body27 ]
  %inc29 = add nuw nsw i32 %coeff_pos.174, 1
  %arrayidx30 = getelementptr inbounds float, ptr %10, i32 %coeff_pos.174
  %15 = load float, ptr %arrayidx30, align 4
  %arrayidx32 = getelementptr inbounds float, ptr %11, i32 %n22.075
  %16 = load float, ptr %arrayidx32, align 4
  %17 = tail call float @llvm.fmuladd.f32(float %15, float %16, float %acc.173)
  %inc34 = add nuw nsw i32 %n22.075, 1
  %exitcond84.not = icmp eq i32 %inc34, %4
  br i1 %exitcond84.not, label %for.cond.cleanup26, label %for.body27
}
