; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=false < %s | FileCheck %s
define dso_local noundef i32 @dsps_ccorr_f32_ansi(ptr noundef readonly %Signal, i32 noundef %siglen, ptr noundef readonly %Kernel, i32 noundef %kernlen, ptr noundef writeonly %corrvout) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_ccorr_f32_ansi(
; CHECK-SAME: ptr noundef readonly [[SIGNAL:%.*]], i32 noundef [[SIGLEN:%.*]], ptr noundef readonly [[KERNEL:%.*]], i32 noundef [[KERNLEN:%.*]], ptr noundef writeonly [[CORRVOUT:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq ptr [[SIGNAL]], null
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq ptr [[KERNEL]], null
; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP]], [[CMP1]]
; CHECK-NEXT:    [[CMP4:%.*]] = icmp eq ptr [[CORRVOUT]], null
; CHECK-NEXT:    [[OR_COND122:%.*]] = or i1 [[OR_COND]], [[CMP4]]
; CHECK-NEXT:    br i1 [[OR_COND122]], label [[RETURN:%.*]], label [[IF_END6:%.*]]
; CHECK:       if.end6:
; CHECK-NEXT:    [[CMP7:%.*]] = icmp slt i32 [[SIGLEN]], [[KERNLEN]]
; CHECK-NEXT:    br i1 [[CMP7]], label [[IF_THEN8:%.*]], label [[IF_END9:%.*]]
; CHECK:       if.then8:
; CHECK-NEXT:    br label [[IF_END9]]
; CHECK:       if.end9:
; CHECK-NEXT:    [[LKERN_0:%.*]] = phi i32 [ [[SIGLEN]], [[IF_THEN8]] ], [ [[KERNLEN]], [[IF_END6]] ]
; CHECK-NEXT:    [[LSIG_0:%.*]] = phi i32 [ [[KERNLEN]], [[IF_THEN8]] ], [ [[SIGLEN]], [[IF_END6]] ]
; CHECK-NEXT:    [[KERN_0:%.*]] = phi ptr [ [[SIGNAL]], [[IF_THEN8]] ], [ [[KERNEL]], [[IF_END6]] ]
; CHECK-NEXT:    [[SIG_0:%.*]] = phi ptr [ [[KERNEL]], [[IF_THEN8]] ], [ [[SIGNAL]], [[IF_END6]] ]
; CHECK-NEXT:    [[CMP10124:%.*]] = icmp sgt i32 [[LKERN_0]], 0
; CHECK-NEXT:    br i1 [[CMP10124]], label [[FOR_BODY:%.*]], label [[FOR_COND22_PREHEADER:%.*]]
; CHECK:       for.cond22.preheader:
; CHECK-NEXT:    [[CMP23128:%.*]] = icmp slt i32 [[LKERN_0]], [[LSIG_0]]
; CHECK-NEXT:    br i1 [[CMP23128]], label [[FOR_BODY25:%.*]], label [[FOR_COND45_PREHEADER:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i32 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_END:%.*]] ], [ 1, [[IF_END9]] ]
; CHECK-NEXT:    [[N_0125:%.*]] = phi i32 [ [[INC19:%.*]], [[FOR_END]] ], [ 0, [[IF_END9]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = xor i32 [[N_0125]], -1
; CHECK-NEXT:    [[SUB11:%.*]] = add nsw i32 [[LKERN_0]], [[TMP0]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[CORRVOUT]], i32 [[N_0125]]
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    br label [[FOR_BODY14:%.*]]
; CHECK:       for.body14:
; CHECK-NEXT:    [[K_0123:%.*]] = phi i32 [ 0, [[FOR_BODY]] ], [ [[INC:%.*]], [[FOR_BODY14]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP4:%.*]], [[FOR_BODY14]] ]
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K_0123]]
; CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX15]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[SUB11]], [[K_0123]]
; CHECK-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD]]
; CHECK-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX16]], align 4
; CHECK-NEXT:    [[TMP4]] = tail call float @llvm.fmuladd.f32(float [[TMP2]], float [[TMP3]], float [[TMP1]])
; CHECK-NEXT:    store float [[TMP4]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[K_0123]], 1
; CHECK-NEXT:    [[EXITCOND:%.*]] = icmp eq i32 [[INC]], [[INDVARS_IV]]
; CHECK-NEXT:    br i1 [[EXITCOND]], label [[FOR_END]], label [[FOR_BODY14]]
; CHECK:       for.end:
; CHECK-NEXT:    [[INC19]] = add nuw nsw i32 [[N_0125]], 1
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw i32 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND134_NOT:%.*]] = icmp eq i32 [[INC19]], [[LKERN_0]]
; CHECK-NEXT:    br i1 [[EXITCOND134_NOT]], label [[FOR_COND22_PREHEADER]], label [[FOR_BODY]]
; CHECK:       for.cond45.preheader:
; CHECK-NEXT:    [[ADD46:%.*]] = add i32 [[SIGLEN]], -1
; CHECK-NEXT:    [[SUB47:%.*]] = add i32 [[ADD46]], [[KERNLEN]]
; CHECK-NEXT:    [[CMP48132:%.*]] = icmp slt i32 [[LSIG_0]], [[SUB47]]
; CHECK-NEXT:    br i1 [[CMP48132]], label [[FOR_BODY50_LR_PH:%.*]], label [[RETURN]]
; CHECK:       for.body50.lr.ph:
; CHECK-NEXT:    [[SUB57:%.*]] = add nsw i32 [[LSIG_0]], -1
; CHECK-NEXT:    br label [[FOR_BODY50:%.*]]
; CHECK:       for.body25:
; CHECK-NEXT:    [[N21_0129:%.*]] = phi i32 [ [[INC42:%.*]], [[FOR_END40:%.*]] ], [ [[LKERN_0]], [[FOR_COND22_PREHEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX28:%.*]] = getelementptr inbounds float, ptr [[CORRVOUT]], i32 [[N21_0129]]
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX28]], align 4
; CHECK-NEXT:    [[SUB29:%.*]] = sub nuw nsw i32 [[N21_0129]], [[LKERN_0]]
; CHECK-NEXT:    [[ADD30:%.*]] = add nsw i32 [[SUB29]], 1
; CHECK-NEXT:    [[CMP32_NOT126:%.*]] = icmp ugt i32 [[ADD30]], [[N21_0129]]
; CHECK-NEXT:    br i1 [[CMP32_NOT126]], label [[FOR_END40]], label [[FOR_BODY33:%.*]]
; CHECK:       for.body33:
; CHECK-NEXT:    [[TMP5:%.*]] = phi float [ [[TMP8:%.*]], [[FOR_BODY33]] ], [ 0.000000e+00, [[FOR_BODY25]] ]
; CHECK-NEXT:    [[K27_0127:%.*]] = phi i32 [ [[INC39:%.*]], [[FOR_BODY33]] ], [ [[ADD30]], [[FOR_BODY25]] ]
; CHECK-NEXT:    [[ARRAYIDX34:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K27_0127]]
; CHECK-NEXT:    [[TMP6:%.*]] = load float, ptr [[ARRAYIDX34]], align 4
; CHECK-NEXT:    [[SUB35:%.*]] = sub i32 [[K27_0127]], [[ADD30]]
; CHECK-NEXT:    [[ARRAYIDX36:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35]]
; CHECK-NEXT:    [[TMP7:%.*]] = load float, ptr [[ARRAYIDX36]], align 4
; CHECK-NEXT:    [[TMP8]] = tail call float @llvm.fmuladd.f32(float [[TMP6]], float [[TMP7]], float [[TMP5]])
; CHECK-NEXT:    store float [[TMP8]], ptr [[ARRAYIDX28]], align 4
; CHECK-NEXT:    [[INC39]] = add i32 [[K27_0127]], 1
; CHECK-NEXT:    [[CMP32_NOT:%.*]] = icmp ugt i32 [[INC39]], [[N21_0129]]
; CHECK-NEXT:    br i1 [[CMP32_NOT]], label [[FOR_END40]], label [[FOR_BODY33]]
; CHECK:       for.end40:
; CHECK-NEXT:    [[INC42]] = add nuw nsw i32 [[N21_0129]], 1
; CHECK-NEXT:    [[EXITCOND135_NOT:%.*]] = icmp eq i32 [[INC42]], [[LSIG_0]]
; CHECK-NEXT:    br i1 [[EXITCOND135_NOT]], label [[FOR_COND45_PREHEADER]], label [[FOR_BODY25]]
; CHECK:       for.body50:
; CHECK-NEXT:    [[N44_0133:%.*]] = phi i32 [ [[LSIG_0]], [[FOR_BODY50_LR_PH]] ], [ [[INC69:%.*]], [[FOR_END67:%.*]] ]
; CHECK-NEXT:    [[ARRAYIDX54:%.*]] = getelementptr inbounds float, ptr [[CORRVOUT]], i32 [[N44_0133]]
; CHECK-NEXT:    store float 0.000000e+00, ptr [[ARRAYIDX54]], align 4
; CHECK-NEXT:    [[SUB55:%.*]] = sub nsw i32 [[N44_0133]], [[LKERN_0]]
; CHECK-NEXT:    [[ADD56:%.*]] = add nsw i32 [[SUB55]], 1
; CHECK-NEXT:    [[CMP59_NOT130:%.*]] = icmp ugt i32 [[ADD56]], [[SUB57]]
; CHECK-NEXT:    br i1 [[CMP59_NOT130]], label [[FOR_END67]], label [[FOR_BODY60:%.*]]
; CHECK:       for.body60:
; CHECK-NEXT:    [[TMP9:%.*]] = phi float [ [[TMP12:%.*]], [[FOR_BODY60]] ], [ 0.000000e+00, [[FOR_BODY50]] ]
; CHECK-NEXT:    [[K53_0131:%.*]] = phi i32 [ [[INC66:%.*]], [[FOR_BODY60]] ], [ [[ADD56]], [[FOR_BODY50]] ]
; CHECK-NEXT:    [[ARRAYIDX61:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K53_0131]]
; CHECK-NEXT:    [[TMP10:%.*]] = load float, ptr [[ARRAYIDX61]], align 4
; CHECK-NEXT:    [[SUB62:%.*]] = sub i32 [[K53_0131]], [[ADD56]]
; CHECK-NEXT:    [[ARRAYIDX63:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62]]
; CHECK-NEXT:    [[TMP11:%.*]] = load float, ptr [[ARRAYIDX63]], align 4
; CHECK-NEXT:    [[TMP12]] = tail call float @llvm.fmuladd.f32(float [[TMP10]], float [[TMP11]], float [[TMP9]])
; CHECK-NEXT:    store float [[TMP12]], ptr [[ARRAYIDX54]], align 4
; CHECK-NEXT:    [[INC66]] = add i32 [[K53_0131]], 1
; CHECK-NEXT:    [[CMP59_NOT:%.*]] = icmp ugt i32 [[INC66]], [[SUB57]]
; CHECK-NEXT:    br i1 [[CMP59_NOT]], label [[FOR_END67]], label [[FOR_BODY60]]
; CHECK:       for.end67:
; CHECK-NEXT:    [[INC69]] = add nsw i32 [[N44_0133]], 1
; CHECK-NEXT:    [[EXITCOND136_NOT:%.*]] = icmp eq i32 [[INC69]], [[SUB47]]
; CHECK-NEXT:    br i1 [[EXITCOND136_NOT]], label [[RETURN]], label [[FOR_BODY50]]
; CHECK:       return:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ 458755, [[ENTRY:%.*]] ], [ 0, [[FOR_COND45_PREHEADER]] ], [ 0, [[FOR_END67]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0]]
;
entry:
  %cmp = icmp eq ptr %Signal, null
  %cmp1 = icmp eq ptr %Kernel, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp4 = icmp eq ptr %corrvout, null
  %or.cond122 = or i1 %or.cond, %cmp4
  br i1 %or.cond122, label %return, label %if.end6

if.end6:                                          ; preds = %entry
  %cmp7 = icmp slt i32 %siglen, %kernlen
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end6
  %lkern.0 = phi i32 [ %siglen, %if.then8 ], [ %kernlen, %if.end6 ]
  %lsig.0 = phi i32 [ %kernlen, %if.then8 ], [ %siglen, %if.end6 ]
  %kern.0 = phi ptr [ %Signal, %if.then8 ], [ %Kernel, %if.end6 ]
  %sig.0 = phi ptr [ %Kernel, %if.then8 ], [ %Signal, %if.end6 ]
  %cmp10124 = icmp sgt i32 %lkern.0, 0
  br i1 %cmp10124, label %for.body, label %for.cond22.preheader

for.cond22.preheader:                             ; preds = %for.end, %if.end9
  %cmp23128 = icmp slt i32 %lkern.0, %lsig.0
  br i1 %cmp23128, label %for.body25, label %for.cond45.preheader

for.body:                                         ; preds = %for.end, %if.end9
  %indvars.iv = phi i32 [ %indvars.iv.next, %for.end ], [ 1, %if.end9 ]
  %n.0125 = phi i32 [ %inc19, %for.end ], [ 0, %if.end9 ]
  %0 = xor i32 %n.0125, -1
  %sub11 = add nsw i32 %lkern.0, %0
  %arrayidx = getelementptr inbounds float, ptr %corrvout, i32 %n.0125
  store float 0.000000e+00, ptr %arrayidx, align 4
  br label %for.body14

for.body14:                                       ; preds = %for.body14, %for.body
  %k.0123 = phi i32 [ 0, %for.body ], [ %inc, %for.body14 ]
  %1 = phi float [ 0.000000e+00, %for.body ], [ %4, %for.body14 ]
  %arrayidx15 = getelementptr inbounds float, ptr %sig.0, i32 %k.0123
  %2 = load float, ptr %arrayidx15, align 4
  %add = add i32 %sub11, %k.0123
  %arrayidx16 = getelementptr inbounds float, ptr %kern.0, i32 %add
  %3 = load float, ptr %arrayidx16, align 4
  %4 = tail call float @llvm.fmuladd.f32(float %2, float %3, float %1)
  store float %4, ptr %arrayidx, align 4
  %inc = add nuw nsw i32 %k.0123, 1
  %exitcond = icmp eq i32 %inc, %indvars.iv
  br i1 %exitcond, label %for.end, label %for.body14

for.end:                                          ; preds = %for.body14
  %inc19 = add nuw nsw i32 %n.0125, 1
  %indvars.iv.next = add nuw i32 %indvars.iv, 1
  %exitcond134.not = icmp eq i32 %inc19, %lkern.0
  br i1 %exitcond134.not, label %for.cond22.preheader, label %for.body

for.cond45.preheader:                             ; preds = %for.end40, %for.cond22.preheader
  %add46 = add i32 %siglen, -1
  %sub47 = add i32 %add46, %kernlen
  %cmp48132 = icmp slt i32 %lsig.0, %sub47
  br i1 %cmp48132, label %for.body50.lr.ph, label %return

for.body50.lr.ph:                                 ; preds = %for.cond45.preheader
  %sub57 = add nsw i32 %lsig.0, -1
  br label %for.body50

for.body25:                                       ; preds = %for.end40, %for.cond22.preheader
  %n21.0129 = phi i32 [ %inc42, %for.end40 ], [ %lkern.0, %for.cond22.preheader ]
  %arrayidx28 = getelementptr inbounds float, ptr %corrvout, i32 %n21.0129
  store float 0.000000e+00, ptr %arrayidx28, align 4
  %sub29 = sub nuw nsw i32 %n21.0129, %lkern.0
  %add30 = add nsw i32 %sub29, 1
  %cmp32.not126 = icmp ugt i32 %add30, %n21.0129
  br i1 %cmp32.not126, label %for.end40, label %for.body33

for.body33:                                       ; preds = %for.body33, %for.body25
  %5 = phi float [ %8, %for.body33 ], [ 0.000000e+00, %for.body25 ]
  %k27.0127 = phi i32 [ %inc39, %for.body33 ], [ %add30, %for.body25 ]
  %arrayidx34 = getelementptr inbounds float, ptr %sig.0, i32 %k27.0127
  %6 = load float, ptr %arrayidx34, align 4
  %sub35 = sub i32 %k27.0127, %add30
  %arrayidx36 = getelementptr inbounds float, ptr %kern.0, i32 %sub35
  %7 = load float, ptr %arrayidx36, align 4
  %8 = tail call float @llvm.fmuladd.f32(float %6, float %7, float %5)
  store float %8, ptr %arrayidx28, align 4
  %inc39 = add i32 %k27.0127, 1
  %cmp32.not = icmp ugt i32 %inc39, %n21.0129
  br i1 %cmp32.not, label %for.end40, label %for.body33

for.end40:                                        ; preds = %for.body33, %for.body25
  %inc42 = add nuw nsw i32 %n21.0129, 1
  %exitcond135.not = icmp eq i32 %inc42, %lsig.0
  br i1 %exitcond135.not, label %for.cond45.preheader, label %for.body25

for.body50:                                       ; preds = %for.end67, %for.body50.lr.ph
  %n44.0133 = phi i32 [ %lsig.0, %for.body50.lr.ph ], [ %inc69, %for.end67 ]
  %arrayidx54 = getelementptr inbounds float, ptr %corrvout, i32 %n44.0133
  store float 0.000000e+00, ptr %arrayidx54, align 4
  %sub55 = sub nsw i32 %n44.0133, %lkern.0
  %add56 = add nsw i32 %sub55, 1
  %cmp59.not130 = icmp ugt i32 %add56, %sub57
  br i1 %cmp59.not130, label %for.end67, label %for.body60

for.body60:                                       ; preds = %for.body60, %for.body50
  %9 = phi float [ %12, %for.body60 ], [ 0.000000e+00, %for.body50 ]
  %k53.0131 = phi i32 [ %inc66, %for.body60 ], [ %add56, %for.body50 ]
  %arrayidx61 = getelementptr inbounds float, ptr %sig.0, i32 %k53.0131
  %10 = load float, ptr %arrayidx61, align 4
  %sub62 = sub i32 %k53.0131, %add56
  %arrayidx63 = getelementptr inbounds float, ptr %kern.0, i32 %sub62
  %11 = load float, ptr %arrayidx63, align 4
  %12 = tail call float @llvm.fmuladd.f32(float %10, float %11, float %9)
  store float %12, ptr %arrayidx54, align 4
  %inc66 = add i32 %k53.0131, 1
  %cmp59.not = icmp ugt i32 %inc66, %sub57
  br i1 %cmp59.not, label %for.end67, label %for.body60

for.end67:                                        ; preds = %for.body60, %for.body50
  %inc69 = add nsw i32 %n44.0133, 1
  %exitcond136.not = icmp eq i32 %inc69, %sub47
  br i1 %exitcond136.not, label %return, label %for.body50

return:                                           ; preds = %for.end67, %for.cond45.preheader, %entry
  %retval.0 = phi i32 [ 458755, %entry ], [ 0, %for.cond45.preheader ], [ 0, %for.end67 ]
  ret i32 %retval.0
}
