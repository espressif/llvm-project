; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=true < %s | FileCheck %s
define dso_local noundef i32 @dsps_sub_f32_ansi(ptr noundef readonly %input1, ptr noundef readonly %input2, ptr noundef writeonly %output, i32 noundef %len, i32 noundef %step1, i32 noundef %step2, i32 noundef %step_out) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_sub_f32_ansi(
; CHECK-SAME: ptr noalias noundef readonly [[INPUT1:%.*]], ptr noalias noundef readonly [[INPUT2:%.*]], ptr noalias noundef writeonly [[OUTPUT:%.*]], i32 noundef [[LEN:%.*]], i32 noundef [[STEP1:%.*]], i32 noundef [[STEP2:%.*]], i32 noundef [[STEP_OUT:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq ptr [[INPUT1]], null
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq ptr [[INPUT2]], null
; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP]], [[CMP1]]
; CHECK-NEXT:    [[CMP4:%.*]] = icmp eq ptr [[OUTPUT]], null
; CHECK-NEXT:    [[OR_COND19:%.*]] = or i1 [[OR_COND]], [[CMP4]]
; CHECK-NEXT:    br i1 [[OR_COND19]], label [[RETURN:%.*]], label [[IF_END:%.*]]
; CHECK:       if.end:
; CHECK-NEXT:    [[CMP41:%.*]] = icmp sgt i32 [[LEN]], 2
; CHECK-NEXT:    br i1 [[CMP41]], label [[FOR_COND_PREHEADER_NEW:%.*]], label [[FOR_COND_PREHEADER:%.*]]
; CHECK:       for.cond.preheader:
; CHECK-NEXT:    [[CMP720:%.*]] = icmp sgt i32 [[LEN]], 0
; CHECK-NEXT:    br i1 [[CMP720]], label [[FOR_BODY_CLONE:%.*]], label [[RETURN]]
; CHECK:       for.cond.preheader.new:
; CHECK-NEXT:    [[SUB63:%.*]] = add nsw i32 [[LEN]], -16
; CHECK-NEXT:    [[CMP6_NOT207:%.*]] = icmp ult i32 [[LEN]], 16
; CHECK-NEXT:    br i1 [[CMP6_NOT207]], label [[FOR_COND_PREHEADER_NEW2:%.*]], label [[FOR_BODY_MODIFY:%.*]]
; CHECK:       for.cond.preheader.new2:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i32 [ [[TMP1:%.*]], [[FOR_BODY_MODIFY]] ], [ 0, [[FOR_COND_PREHEADER_NEW]] ]
; CHECK-NEXT:    [[CMP85209:%.*]] = icmp slt i32 [[TMP0]], [[LEN]]
; CHECK-NEXT:    br i1 [[CMP85209]], label [[FOR_BODY:%.*]], label [[RETURN]]
; CHECK:       for.body.modify:
; CHECK-NEXT:    [[I_021_MODIFY:%.*]] = phi i32 [ [[TMP1]], [[FOR_BODY_MODIFY]] ], [ 0, [[FOR_COND_PREHEADER_NEW]] ]
; CHECK-NEXT:    [[TMP1]] = add nuw i32 [[I_021_MODIFY]], 16
; CHECK-NEXT:    [[ADD:%.*]] = or disjoint i32 [[I_021_MODIFY]], 1
; CHECK-NEXT:    [[ADD4:%.*]] = or disjoint i32 [[I_021_MODIFY]], 2
; CHECK-NEXT:    [[ADD8:%.*]] = or disjoint i32 [[I_021_MODIFY]], 3
; CHECK-NEXT:    [[ADD14:%.*]] = or disjoint i32 [[I_021_MODIFY]], 4
; CHECK-NEXT:    [[ADD18:%.*]] = or disjoint i32 [[I_021_MODIFY]], 5
; CHECK-NEXT:    [[ADD22:%.*]] = or disjoint i32 [[I_021_MODIFY]], 6
; CHECK-NEXT:    [[ADD26:%.*]] = or disjoint i32 [[I_021_MODIFY]], 7
; CHECK-NEXT:    [[ADD30:%.*]] = or disjoint i32 [[I_021_MODIFY]], 8
; CHECK-NEXT:    [[ADD34:%.*]] = or disjoint i32 [[I_021_MODIFY]], 9
; CHECK-NEXT:    [[ADD38:%.*]] = or disjoint i32 [[I_021_MODIFY]], 10
; CHECK-NEXT:    [[ADD42:%.*]] = or disjoint i32 [[I_021_MODIFY]], 11
; CHECK-NEXT:    [[ADD46:%.*]] = or disjoint i32 [[I_021_MODIFY]], 12
; CHECK-NEXT:    [[ADD50:%.*]] = or disjoint i32 [[I_021_MODIFY]], 13
; CHECK-NEXT:    [[ADD54:%.*]] = or disjoint i32 [[I_021_MODIFY]], 14
; CHECK-NEXT:    [[ADD58:%.*]] = or disjoint i32 [[I_021_MODIFY]], 15
; CHECK-NEXT:    [[ARRAYIDX_MODIFY:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[I_021_MODIFY]]
; CHECK-NEXT:    [[ARRAYIDX9_MODIFY:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[I_021_MODIFY]]
; CHECK-NEXT:    [[ARRAYIDX11_MODIFY:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[I_021_MODIFY]]
; CHECK-NEXT:    [[ARRAYIDX1:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD]]
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD]]
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD]]
; CHECK-NEXT:    [[ARRAYIDX5:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD4]]
; CHECK-NEXT:    [[ARRAYIDX6:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD4]]
; CHECK-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD4]]
; CHECK-NEXT:    [[ARRAYIDX10:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD8]]
; CHECK-NEXT:    [[ARRAYIDX12:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD8]]
; CHECK-NEXT:    [[ARRAYIDX13:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD8]]
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD14]]
; CHECK-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD14]]
; CHECK-NEXT:    [[ARRAYIDX17:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD14]]
; CHECK-NEXT:    [[ARRAYIDX19:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD18]]
; CHECK-NEXT:    [[ARRAYIDX20:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD18]]
; CHECK-NEXT:    [[ARRAYIDX21:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD18]]
; CHECK-NEXT:    [[ARRAYIDX23:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD22]]
; CHECK-NEXT:    [[ARRAYIDX24:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD22]]
; CHECK-NEXT:    [[ARRAYIDX25:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD22]]
; CHECK-NEXT:    [[ARRAYIDX27:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD26]]
; CHECK-NEXT:    [[ARRAYIDX28:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD26]]
; CHECK-NEXT:    [[ARRAYIDX29:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD26]]
; CHECK-NEXT:    [[ARRAYIDX31:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD30]]
; CHECK-NEXT:    [[ARRAYIDX32:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD30]]
; CHECK-NEXT:    [[ARRAYIDX33:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD30]]
; CHECK-NEXT:    [[ARRAYIDX35:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD34]]
; CHECK-NEXT:    [[ARRAYIDX36:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD34]]
; CHECK-NEXT:    [[ARRAYIDX37:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD34]]
; CHECK-NEXT:    [[ARRAYIDX39:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD38]]
; CHECK-NEXT:    [[ARRAYIDX40:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD38]]
; CHECK-NEXT:    [[ARRAYIDX41:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD38]]
; CHECK-NEXT:    [[ARRAYIDX43:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD42]]
; CHECK-NEXT:    [[ARRAYIDX44:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD42]]
; CHECK-NEXT:    [[ARRAYIDX45:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD42]]
; CHECK-NEXT:    [[ARRAYIDX47:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD46]]
; CHECK-NEXT:    [[ARRAYIDX48:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD46]]
; CHECK-NEXT:    [[ARRAYIDX49:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD46]]
; CHECK-NEXT:    [[ARRAYIDX51:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD50]]
; CHECK-NEXT:    [[ARRAYIDX52:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD50]]
; CHECK-NEXT:    [[ARRAYIDX53:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD50]]
; CHECK-NEXT:    [[ARRAYIDX55:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD54]]
; CHECK-NEXT:    [[ARRAYIDX56:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD54]]
; CHECK-NEXT:    [[ARRAYIDX57:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD54]]
; CHECK-NEXT:    [[ARRAYIDX59:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[ADD58]]
; CHECK-NEXT:    [[ARRAYIDX60:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[ADD58]]
; CHECK-NEXT:    [[ARRAYIDX61:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[ADD58]]
; CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX_MODIFY]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX9_MODIFY]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX1]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load float, ptr [[ARRAYIDX2]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = load float, ptr [[ARRAYIDX5]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load float, ptr [[ARRAYIDX6]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = load float, ptr [[ARRAYIDX10]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[ARRAYIDX12]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load float, ptr [[ARRAYIDX15]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = load float, ptr [[ARRAYIDX16]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = load float, ptr [[ARRAYIDX19]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = load float, ptr [[ARRAYIDX20]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = load float, ptr [[ARRAYIDX23]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[ARRAYIDX24]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = load float, ptr [[ARRAYIDX27]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = load float, ptr [[ARRAYIDX28]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = load float, ptr [[ARRAYIDX31]], align 4
; CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[ARRAYIDX32]], align 4
; CHECK-NEXT:    [[TMP20:%.*]] = load float, ptr [[ARRAYIDX35]], align 4
; CHECK-NEXT:    [[TMP21:%.*]] = load float, ptr [[ARRAYIDX36]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = load float, ptr [[ARRAYIDX39]], align 4
; CHECK-NEXT:    [[TMP23:%.*]] = load float, ptr [[ARRAYIDX40]], align 4
; CHECK-NEXT:    [[TMP24:%.*]] = load float, ptr [[ARRAYIDX43]], align 4
; CHECK-NEXT:    [[TMP25:%.*]] = load float, ptr [[ARRAYIDX44]], align 4
; CHECK-NEXT:    [[TMP26:%.*]] = load float, ptr [[ARRAYIDX47]], align 4
; CHECK-NEXT:    [[TMP27:%.*]] = load float, ptr [[ARRAYIDX48]], align 4
; CHECK-NEXT:    [[TMP28:%.*]] = load float, ptr [[ARRAYIDX51]], align 4
; CHECK-NEXT:    [[TMP29:%.*]] = load float, ptr [[ARRAYIDX52]], align 4
; CHECK-NEXT:    [[TMP30:%.*]] = load float, ptr [[ARRAYIDX55]], align 4
; CHECK-NEXT:    [[TMP31:%.*]] = load float, ptr [[ARRAYIDX56]], align 4
; CHECK-NEXT:    [[TMP32:%.*]] = load float, ptr [[ARRAYIDX59]], align 4
; CHECK-NEXT:    [[TMP33:%.*]] = load float, ptr [[ARRAYIDX60]], align 4
; CHECK-NEXT:    [[SUB_MODIFY:%.*]] = fsub float [[TMP2]], [[TMP3]]
; CHECK-NEXT:    [[TMP34:%.*]] = fsub float [[TMP4]], [[TMP5]]
; CHECK-NEXT:    [[TMP35:%.*]] = fsub float [[TMP6]], [[TMP7]]
; CHECK-NEXT:    [[TMP36:%.*]] = fsub float [[TMP8]], [[TMP9]]
; CHECK-NEXT:    [[TMP37:%.*]] = fsub float [[TMP10]], [[TMP11]]
; CHECK-NEXT:    [[TMP38:%.*]] = fsub float [[TMP12]], [[TMP13]]
; CHECK-NEXT:    [[TMP39:%.*]] = fsub float [[TMP14]], [[TMP15]]
; CHECK-NEXT:    [[TMP40:%.*]] = fsub float [[TMP16]], [[TMP17]]
; CHECK-NEXT:    [[TMP41:%.*]] = fsub float [[TMP18]], [[TMP19]]
; CHECK-NEXT:    [[TMP42:%.*]] = fsub float [[TMP20]], [[TMP21]]
; CHECK-NEXT:    [[TMP43:%.*]] = fsub float [[TMP22]], [[TMP23]]
; CHECK-NEXT:    [[TMP44:%.*]] = fsub float [[TMP24]], [[TMP25]]
; CHECK-NEXT:    [[TMP45:%.*]] = fsub float [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[TMP46:%.*]] = fsub float [[TMP28]], [[TMP29]]
; CHECK-NEXT:    [[TMP47:%.*]] = fsub float [[TMP30]], [[TMP31]]
; CHECK-NEXT:    [[TMP48:%.*]] = fsub float [[TMP32]], [[TMP33]]
; CHECK-NEXT:    store float [[SUB_MODIFY]], ptr [[ARRAYIDX11_MODIFY]], align 4
; CHECK-NEXT:    store float [[TMP34]], ptr [[ARRAYIDX3]], align 4
; CHECK-NEXT:    store float [[TMP35]], ptr [[ARRAYIDX7]], align 4
; CHECK-NEXT:    store float [[TMP36]], ptr [[ARRAYIDX13]], align 4
; CHECK-NEXT:    store float [[TMP37]], ptr [[ARRAYIDX17]], align 4
; CHECK-NEXT:    store float [[TMP38]], ptr [[ARRAYIDX21]], align 4
; CHECK-NEXT:    store float [[TMP39]], ptr [[ARRAYIDX25]], align 4
; CHECK-NEXT:    store float [[TMP40]], ptr [[ARRAYIDX29]], align 4
; CHECK-NEXT:    store float [[TMP41]], ptr [[ARRAYIDX33]], align 4
; CHECK-NEXT:    store float [[TMP42]], ptr [[ARRAYIDX37]], align 4
; CHECK-NEXT:    store float [[TMP43]], ptr [[ARRAYIDX41]], align 4
; CHECK-NEXT:    store float [[TMP44]], ptr [[ARRAYIDX45]], align 4
; CHECK-NEXT:    store float [[TMP45]], ptr [[ARRAYIDX49]], align 4
; CHECK-NEXT:    store float [[TMP46]], ptr [[ARRAYIDX53]], align 4
; CHECK-NEXT:    store float [[TMP47]], ptr [[ARRAYIDX57]], align 4
; CHECK-NEXT:    store float [[TMP48]], ptr [[ARRAYIDX61]], align 4
; CHECK-NEXT:    [[EXITCOND_NOT_MODIFY:%.*]] = icmp sgt i32 [[TMP1]], [[SUB63]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_MODIFY]], label [[FOR_COND_PREHEADER_NEW2]], label [[FOR_BODY_MODIFY]]
; CHECK:       for.body:
; CHECK-NEXT:    [[I_021:%.*]] = phi i32 [ [[INC:%.*]], [[FOR_BODY]] ], [ [[TMP0]], [[FOR_COND_PREHEADER_NEW2]] ]
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[I_021]], [[STEP1]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[MUL]]
; CHECK-NEXT:    [[TMP49:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[MUL8:%.*]] = mul nsw i32 [[I_021]], [[STEP2]]
; CHECK-NEXT:    [[ARRAYIDX9:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[MUL8]]
; CHECK-NEXT:    [[TMP50:%.*]] = load float, ptr [[ARRAYIDX9]], align 4
; CHECK-NEXT:    [[SUB:%.*]] = fsub float [[TMP49]], [[TMP50]]
; CHECK-NEXT:    [[MUL10:%.*]] = mul nsw i32 [[I_021]], [[STEP_OUT]]
; CHECK-NEXT:    [[ARRAYIDX11:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[MUL10]]
; CHECK-NEXT:    store float [[SUB]], ptr [[ARRAYIDX11]], align 4
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_021]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[RETURN]], label [[FOR_BODY]]
; CHECK:       for.body.clone:
; CHECK-NEXT:    [[I_021_CLONE:%.*]] = phi i32 [ [[INC_CLONE:%.*]], [[FOR_BODY_CLONE]] ], [ 0, [[FOR_COND_PREHEADER]] ]
; CHECK-NEXT:    [[MUL_CLONE:%.*]] = mul nsw i32 [[I_021_CLONE]], [[STEP1]]
; CHECK-NEXT:    [[ARRAYIDX_CLONE:%.*]] = getelementptr inbounds float, ptr [[INPUT1]], i32 [[MUL_CLONE]]
; CHECK-NEXT:    [[TMP51:%.*]] = load float, ptr [[ARRAYIDX_CLONE]], align 4
; CHECK-NEXT:    [[MUL8_CLONE:%.*]] = mul nsw i32 [[I_021_CLONE]], [[STEP2]]
; CHECK-NEXT:    [[ARRAYIDX9_CLONE:%.*]] = getelementptr inbounds float, ptr [[INPUT2]], i32 [[MUL8_CLONE]]
; CHECK-NEXT:    [[TMP52:%.*]] = load float, ptr [[ARRAYIDX9_CLONE]], align 4
; CHECK-NEXT:    [[SUB_CLONE:%.*]] = fsub float [[TMP51]], [[TMP52]]
; CHECK-NEXT:    [[MUL10_CLONE:%.*]] = mul nsw i32 [[I_021_CLONE]], [[STEP_OUT]]
; CHECK-NEXT:    [[ARRAYIDX11_CLONE:%.*]] = getelementptr inbounds float, ptr [[OUTPUT]], i32 [[MUL10_CLONE]]
; CHECK-NEXT:    store float [[SUB_CLONE]], ptr [[ARRAYIDX11_CLONE]], align 4
; CHECK-NEXT:    [[INC_CLONE]] = add nuw nsw i32 [[I_021_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND_NOT_CLONE:%.*]] = icmp eq i32 [[INC_CLONE]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_CLONE]], label [[RETURN]], label [[FOR_BODY_CLONE]]
; CHECK:       return:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ 458755, [[ENTRY:%.*]] ], [ 0, [[FOR_COND_PREHEADER]] ], [ 0, [[FOR_BODY]] ], [ 0, [[FOR_BODY_CLONE]] ], [ 0, [[FOR_COND_PREHEADER_NEW2]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0]]
;
entry:
  %cmp = icmp eq ptr %input1, null
  %cmp1 = icmp eq ptr %input2, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp4 = icmp eq ptr %output, null
  %or.cond19 = or i1 %or.cond, %cmp4
  br i1 %or.cond19, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp41 = icmp sgt i32 %len, 2
  br i1 %cmp41, label %for.body, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end
  %cmp720 = icmp sgt i32 %len, 0
  br i1 %cmp720, label %for.body.clone, label %return

for.body:                                         ; preds = %for.body, %if.end
  %i.021 = phi i32 [ %inc, %for.body ], [ 0, %if.end ]
  %mul = mul nsw i32 %i.021, %step1
  %arrayidx = getelementptr inbounds float, ptr %input1, i32 %mul
  %0 = load float, ptr %arrayidx, align 4
  %mul8 = mul nsw i32 %i.021, %step2
  %arrayidx9 = getelementptr inbounds float, ptr %input2, i32 %mul8
  %1 = load float, ptr %arrayidx9, align 4
  %sub = fsub float %0, %1
  %mul10 = mul nsw i32 %i.021, %step_out
  %arrayidx11 = getelementptr inbounds float, ptr %output, i32 %mul10
  store float %sub, ptr %arrayidx11, align 4
  %inc = add nuw nsw i32 %i.021, 1
  %exitcond.not = icmp eq i32 %inc, %len
  br i1 %exitcond.not, label %return, label %for.body

for.body.clone:                                   ; preds = %for.body.clone, %for.cond.preheader
  %i.021.clone = phi i32 [ %inc.clone, %for.body.clone ], [ 0, %for.cond.preheader ]
  %mul.clone = mul nsw i32 %i.021.clone, %step1
  %arrayidx.clone = getelementptr inbounds float, ptr %input1, i32 %mul.clone
  %2 = load float, ptr %arrayidx.clone, align 4
  %mul8.clone = mul nsw i32 %i.021.clone, %step2
  %arrayidx9.clone = getelementptr inbounds float, ptr %input2, i32 %mul8.clone
  %3 = load float, ptr %arrayidx9.clone, align 4
  %sub.clone = fsub float %2, %3
  %mul10.clone = mul nsw i32 %i.021.clone, %step_out
  %arrayidx11.clone = getelementptr inbounds float, ptr %output, i32 %mul10.clone
  store float %sub.clone, ptr %arrayidx11.clone, align 4
  %inc.clone = add nuw nsw i32 %i.021.clone, 1
  %exitcond.not.clone = icmp eq i32 %inc.clone, %len
  br i1 %exitcond.not.clone, label %return, label %for.body.clone

return:                                           ; preds = %for.body.clone, %for.body, %for.cond.preheader, %entry
  %retval.0 = phi i32 [ 458755, %entry ], [ 0, %for.cond.preheader ], [ 0, %for.body ], [ 0, %for.body.clone ]
  ret i32 %retval.0
}
