; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-loop-unroll-and-remainder -riscv-loop-unroll-and-remainder=true < %s | FileCheck %s
define dso_local noundef i32 @dsps_ccorr_f32_ansi(ptr noundef readonly %Signal, i32 noundef %siglen, ptr noundef readonly %Kernel, i32 noundef %kernlen, ptr noundef writeonly %corrvout) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_ccorr_f32_ansi(
; CHECK-SAME: ptr noalias noundef readonly [[SIGNAL:%.*]], i32 noundef [[SIGLEN:%.*]], ptr noalias noundef readonly [[KERNEL:%.*]], i32 noundef [[KERNLEN:%.*]], ptr noalias noundef writeonly [[CORRVOUT:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq ptr [[SIGNAL]], null
; CHECK-NEXT:    [[CMP1:%.*]] = icmp eq ptr [[KERNEL]], null
; CHECK-NEXT:    [[OR_COND:%.*]] = or i1 [[CMP]], [[CMP1]]
; CHECK-NEXT:    [[CMP4:%.*]] = icmp eq ptr [[CORRVOUT]], null
; CHECK-NEXT:    [[OR_COND122:%.*]] = or i1 [[OR_COND]], [[CMP4]]
; CHECK-NEXT:    br i1 [[OR_COND122]], label [[RETURN:%.*]], label [[IF_END6:%.*]]
; CHECK:       if.end6:
; CHECK-NEXT:    [[CMP7:%.*]] = icmp slt i32 [[SIGLEN]], [[KERNLEN]]
; CHECK-NEXT:    br i1 [[CMP7]], label [[IF_THEN8:%.*]], label [[IF_END9:%.*]]
; CHECK:       if.then8:
; CHECK-NEXT:    br label [[IF_END9]]
; CHECK:       if.end9:
; CHECK-NEXT:    [[LKERN_0:%.*]] = phi i32 [ [[SIGLEN]], [[IF_THEN8]] ], [ [[KERNLEN]], [[IF_END6]] ]
; CHECK-NEXT:    [[LSIG_0:%.*]] = phi i32 [ [[KERNLEN]], [[IF_THEN8]] ], [ [[SIGLEN]], [[IF_END6]] ]
; CHECK-NEXT:    [[KERN_0:%.*]] = phi ptr [ [[SIGNAL]], [[IF_THEN8]] ], [ [[KERNEL]], [[IF_END6]] ]
; CHECK-NEXT:    [[SIG_0:%.*]] = phi ptr [ [[KERNEL]], [[IF_THEN8]] ], [ [[SIGNAL]], [[IF_END6]] ]
; CHECK-NEXT:    [[CMP10124:%.*]] = icmp sgt i32 [[LKERN_0]], 0
; CHECK-NEXT:    br i1 [[CMP10124]], label [[FOR_BODY_PREHEADER:%.*]], label [[FOR_COND22_PREHEADER:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.cond22.preheader.loopexit:
; CHECK-NEXT:    br label [[FOR_COND22_PREHEADER]]
; CHECK:       for.cond22.preheader:
; CHECK-NEXT:    [[CMP23128:%.*]] = icmp slt i32 [[LKERN_0]], [[LSIG_0]]
; CHECK-NEXT:    br i1 [[CMP23128]], label [[FOR_BODY25_PREHEADER:%.*]], label [[FOR_COND45_PREHEADER:%.*]]
; CHECK:       for.body25.preheader:
; CHECK-NEXT:    [[DIV536:%.*]] = and i32 [[LKERN_0]], -16
; CHECK-NEXT:    br label [[FOR_BODY25:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[INDVARS_IV:%.*]] = phi i32 [ [[INDVARS_IV_NEXT:%.*]], [[FOR_END:%.*]] ], [ 1, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[N_0125:%.*]] = phi i32 [ [[INC19:%.*]], [[FOR_END]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = and i32 [[N_0125]], -8
; CHECK-NEXT:    [[TMP1:%.*]] = and i32 [[N_0125]], 2147483640
; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq i32 [[TMP1]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[N_0125]], -1
; CHECK-NEXT:    [[SUB11:%.*]] = add nsw i32 [[TMP3]], [[LKERN_0]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds float, ptr [[CORRVOUT]], i32 [[N_0125]]
; CHECK-NEXT:    br i1 [[TMP2]], label [[FOR_BODY14_CLONE_PREHEADER:%.*]], label [[FOR_BODY14_7:%.*]]
; CHECK:       for.body14.7:
; CHECK-NEXT:    [[K_0123:%.*]] = phi i32 [ 0, [[FOR_BODY]] ], [ [[INC_7:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[DOTPHI:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP20:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[DOTPHI1:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP21:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[DOTPHI2:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP22:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[DOTPHI3:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP23:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[DOTPHI4:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP24:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[DOTPHI5:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP25:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[DOTPHI6:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP26:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[DOTPHI7:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[TMP27:%.*]], [[FOR_BODY14_7]] ]
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[K_0123]], [[SUB11]]
; CHECK-NEXT:    [[INC:%.*]] = add nuw nsw i32 [[K_0123]], 1
; CHECK-NEXT:    [[ADD_1:%.*]] = add i32 [[INC]], [[SUB11]]
; CHECK-NEXT:    [[INC_1:%.*]] = add nuw nsw i32 [[K_0123]], 2
; CHECK-NEXT:    [[ADD_2:%.*]] = add i32 [[INC_1]], [[SUB11]]
; CHECK-NEXT:    [[INC_2:%.*]] = add nuw nsw i32 [[K_0123]], 3
; CHECK-NEXT:    [[ADD_3:%.*]] = add i32 [[INC_2]], [[SUB11]]
; CHECK-NEXT:    [[INC_3:%.*]] = add nuw nsw i32 [[K_0123]], 4
; CHECK-NEXT:    [[ADD_4:%.*]] = add i32 [[INC_3]], [[SUB11]]
; CHECK-NEXT:    [[INC_4:%.*]] = add nuw nsw i32 [[K_0123]], 5
; CHECK-NEXT:    [[ADD_5:%.*]] = add i32 [[INC_4]], [[SUB11]]
; CHECK-NEXT:    [[INC_5:%.*]] = add nuw nsw i32 [[K_0123]], 6
; CHECK-NEXT:    [[ADD_6:%.*]] = add i32 [[INC_5]], [[SUB11]]
; CHECK-NEXT:    [[INC_6:%.*]] = add nuw nsw i32 [[K_0123]], 7
; CHECK-NEXT:    [[ADD_7:%.*]] = add i32 [[INC_6]], [[SUB11]]
; CHECK-NEXT:    [[INC_7]] = add nuw nsw i32 [[K_0123]], 8
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K_0123]]
; CHECK-NEXT:    [[ARRAYIDX16:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD]]
; CHECK-NEXT:    [[ARRAYIDX15_1:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC]]
; CHECK-NEXT:    [[ARRAYIDX16_1:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD_1]]
; CHECK-NEXT:    [[ARRAYIDX15_2:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC_1]]
; CHECK-NEXT:    [[ARRAYIDX16_2:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD_2]]
; CHECK-NEXT:    [[ARRAYIDX15_3:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC_2]]
; CHECK-NEXT:    [[ARRAYIDX16_3:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD_3]]
; CHECK-NEXT:    [[ARRAYIDX15_4:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC_3]]
; CHECK-NEXT:    [[ARRAYIDX16_4:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD_4]]
; CHECK-NEXT:    [[ARRAYIDX15_5:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC_4]]
; CHECK-NEXT:    [[ARRAYIDX16_5:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD_5]]
; CHECK-NEXT:    [[ARRAYIDX15_6:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC_5]]
; CHECK-NEXT:    [[ARRAYIDX16_6:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD_6]]
; CHECK-NEXT:    [[ARRAYIDX15_7:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC_6]]
; CHECK-NEXT:    [[ARRAYIDX16_7:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD_7]]
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX15]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load float, ptr [[ARRAYIDX16]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = load float, ptr [[ARRAYIDX15_1]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = load float, ptr [[ARRAYIDX16_1]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = load float, ptr [[ARRAYIDX15_2]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[ARRAYIDX16_2]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load float, ptr [[ARRAYIDX15_3]], align 4
; CHECK-NEXT:    [[TMP11:%.*]] = load float, ptr [[ARRAYIDX16_3]], align 4
; CHECK-NEXT:    [[TMP12:%.*]] = load float, ptr [[ARRAYIDX15_4]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = load float, ptr [[ARRAYIDX16_4]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = load float, ptr [[ARRAYIDX15_5]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = load float, ptr [[ARRAYIDX16_5]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = load float, ptr [[ARRAYIDX15_6]], align 4
; CHECK-NEXT:    [[TMP17:%.*]] = load float, ptr [[ARRAYIDX16_6]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = load float, ptr [[ARRAYIDX15_7]], align 4
; CHECK-NEXT:    [[TMP19:%.*]] = load float, ptr [[ARRAYIDX16_7]], align 4
; CHECK-NEXT:    [[TMP20]] = tail call float @llvm.fmuladd.f32(float [[TMP4]], float [[TMP5]], float [[DOTPHI]])
; CHECK-NEXT:    [[TMP21]] = tail call float @llvm.fmuladd.f32(float [[TMP6]], float [[TMP7]], float [[DOTPHI1]])
; CHECK-NEXT:    [[TMP22]] = tail call float @llvm.fmuladd.f32(float [[TMP8]], float [[TMP9]], float [[DOTPHI2]])
; CHECK-NEXT:    [[TMP23]] = tail call float @llvm.fmuladd.f32(float [[TMP10]], float [[TMP11]], float [[DOTPHI3]])
; CHECK-NEXT:    [[TMP24]] = tail call float @llvm.fmuladd.f32(float [[TMP12]], float [[TMP13]], float [[DOTPHI4]])
; CHECK-NEXT:    [[TMP25]] = tail call float @llvm.fmuladd.f32(float [[TMP14]], float [[TMP15]], float [[DOTPHI5]])
; CHECK-NEXT:    [[TMP26]] = tail call float @llvm.fmuladd.f32(float [[TMP16]], float [[TMP17]], float [[DOTPHI6]])
; CHECK-NEXT:    [[TMP27]] = tail call float @llvm.fmuladd.f32(float [[TMP18]], float [[TMP19]], float [[DOTPHI7]])
; CHECK-NEXT:    [[EXITCOND_7:%.*]] = icmp ult i32 [[INC_7]], [[TMP1]]
; CHECK-NEXT:    br i1 [[EXITCOND_7]], label [[FOR_BODY14_7]], label [[FOR_END8:%.*]]
; CHECK:       for.end8:
; CHECK-NEXT:    [[SUM:%.*]] = fadd float [[TMP20]], [[TMP21]]
; CHECK-NEXT:    [[SUM23:%.*]] = fadd float [[TMP22]], [[TMP23]]
; CHECK-NEXT:    [[SUM24:%.*]] = fadd float [[TMP24]], [[TMP25]]
; CHECK-NEXT:    [[SUM25:%.*]] = fadd float [[TMP26]], [[TMP27]]
; CHECK-NEXT:    [[SUM26:%.*]] = fadd float [[SUM]], [[SUM23]]
; CHECK-NEXT:    [[SUM27:%.*]] = fadd float [[SUM24]], [[SUM25]]
; CHECK-NEXT:    [[SUM28:%.*]] = fadd float [[SUM26]], [[SUM27]]
; CHECK-NEXT:    store float [[SUM28]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    br i1 false, label [[FOR_END]], label [[FOR_BODY14_CLONE_PREHEADER]]
; CHECK:       for.body14.clone.preheader:
; CHECK-NEXT:    [[SUM_PHI:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY]] ], [ [[SUM28]], [[FOR_END8]] ]
; CHECK-NEXT:    [[ADD_PHI:%.*]] = phi i32 [ 0, [[FOR_BODY]] ], [ [[TMP0]], [[FOR_END8]] ]
; CHECK-NEXT:    br label [[FOR_BODY14_CLONE:%.*]]
; CHECK:       for.body14.clone:
; CHECK-NEXT:    [[K_0123_CLONE:%.*]] = phi i32 [ [[ADD_PHI]], [[FOR_BODY14_CLONE_PREHEADER]] ], [ [[INC_CLONE:%.*]], [[FOR_BODY14_CLONE]] ]
; CHECK-NEXT:    [[TMP28:%.*]] = phi float [ [[SUM_PHI]], [[FOR_BODY14_CLONE_PREHEADER]] ], [ [[TMP31:%.*]], [[FOR_BODY14_CLONE]] ]
; CHECK-NEXT:    [[ARRAYIDX15_CLONE:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K_0123_CLONE]]
; CHECK-NEXT:    [[TMP29:%.*]] = load float, ptr [[ARRAYIDX15_CLONE]], align 4
; CHECK-NEXT:    [[ADD_CLONE:%.*]] = add i32 [[K_0123_CLONE]], [[SUB11]]
; CHECK-NEXT:    [[ARRAYIDX16_CLONE:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[ADD_CLONE]]
; CHECK-NEXT:    [[TMP30:%.*]] = load float, ptr [[ARRAYIDX16_CLONE]], align 4
; CHECK-NEXT:    [[TMP31]] = tail call float @llvm.fmuladd.f32(float [[TMP29]], float [[TMP30]], float [[TMP28]])
; CHECK-NEXT:    [[INC_CLONE]] = add nuw nsw i32 [[K_0123_CLONE]], 1
; CHECK-NEXT:    [[EXITCOND_CLONE:%.*]] = icmp eq i32 [[INC_CLONE]], [[INDVARS_IV]]
; CHECK-NEXT:    br i1 [[EXITCOND_CLONE]], label [[FOR_COND_FOR_END_CRIT_EDGE:%.*]], label [[FOR_BODY14_CLONE]]
; CHECK:       for.cond.for.end_crit_edge:
; CHECK-NEXT:    store float [[TMP31]], ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    [[INC19]] = add nuw nsw i32 [[N_0125]], 1
; CHECK-NEXT:    [[INDVARS_IV_NEXT]] = add nuw i32 [[INDVARS_IV]], 1
; CHECK-NEXT:    [[EXITCOND134_NOT:%.*]] = icmp eq i32 [[INC19]], [[LKERN_0]]
; CHECK-NEXT:    br i1 [[EXITCOND134_NOT]], label [[FOR_COND22_PREHEADER_LOOPEXIT:%.*]], label [[FOR_BODY]]
; CHECK:       for.cond45.preheader.loopexit:
; CHECK-NEXT:    br label [[FOR_COND45_PREHEADER]]
; CHECK:       for.cond45.preheader:
; CHECK-NEXT:    [[ADD46:%.*]] = add i32 [[SIGLEN]], -1
; CHECK-NEXT:    [[SUB47:%.*]] = add i32 [[ADD46]], [[KERNLEN]]
; CHECK-NEXT:    [[CMP48132:%.*]] = icmp slt i32 [[LSIG_0]], [[SUB47]]
; CHECK-NEXT:    br i1 [[CMP48132]], label [[FOR_BODY50_LR_PH:%.*]], label [[RETURN]]
; CHECK:       for.body50.lr.ph:
; CHECK-NEXT:    [[SUB57:%.*]] = add nsw i32 [[LSIG_0]], -1
; CHECK-NEXT:    br label [[FOR_BODY50:%.*]]
; CHECK:       for.body25:
; CHECK-NEXT:    [[N21_0129:%.*]] = phi i32 [ [[INC42:%.*]], [[FOR_END40:%.*]] ], [ [[LKERN_0]], [[FOR_BODY25_PREHEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX28:%.*]] = getelementptr inbounds float, ptr [[CORRVOUT]], i32 [[N21_0129]]
; CHECK-NEXT:    [[SUB29:%.*]] = sub nuw nsw i32 [[N21_0129]], [[LKERN_0]]
; CHECK-NEXT:    [[ADD30:%.*]] = add nsw i32 [[SUB29]], 1
; CHECK-NEXT:    [[ADD60:%.*]] = add i32 [[ADD30]], [[DIV536]]
; CHECK-NEXT:    [[CMP32_NOT126:%.*]] = icmp ult i32 [[ADD30]], [[ADD60]]
; CHECK-NEXT:    br i1 [[CMP32_NOT126]], label [[FOR_BODY33_PREHEADER:%.*]], label [[FOR_END164:%.*]]
; CHECK:       for.body33.preheader:
; CHECK-NEXT:    br label [[FOR_BODY33_15:%.*]]
; CHECK:       for.body33.15:
; CHECK-NEXT:    [[K27_0127:%.*]] = phi i32 [ [[ADD30]], [[FOR_BODY33_PREHEADER]] ], [ [[INC39_15:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI9:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP64:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI10:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP65:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI11:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP66:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI12:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP67:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI13:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP68:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI14:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP69:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI15:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP70:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI16:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP71:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI17:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP72:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI18:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP73:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI19:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP74:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI20:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP75:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI21:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP76:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI22:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP77:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI23:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP78:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[DOTPHI24:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY33_PREHEADER]] ], [ [[TMP79:%.*]], [[FOR_BODY33_15]] ]
; CHECK-NEXT:    [[INC39:%.*]] = add i32 [[K27_0127]], 1
; CHECK-NEXT:    [[INC39_1:%.*]] = add i32 [[K27_0127]], 2
; CHECK-NEXT:    [[INC39_2:%.*]] = add i32 [[K27_0127]], 3
; CHECK-NEXT:    [[INC39_3:%.*]] = add i32 [[K27_0127]], 4
; CHECK-NEXT:    [[INC39_4:%.*]] = add i32 [[K27_0127]], 5
; CHECK-NEXT:    [[INC39_5:%.*]] = add i32 [[K27_0127]], 6
; CHECK-NEXT:    [[INC39_6:%.*]] = add i32 [[K27_0127]], 7
; CHECK-NEXT:    [[INC39_7:%.*]] = add i32 [[K27_0127]], 8
; CHECK-NEXT:    [[INC39_8:%.*]] = add i32 [[K27_0127]], 9
; CHECK-NEXT:    [[INC39_9:%.*]] = add i32 [[K27_0127]], 10
; CHECK-NEXT:    [[INC39_10:%.*]] = add i32 [[K27_0127]], 11
; CHECK-NEXT:    [[INC39_11:%.*]] = add i32 [[K27_0127]], 12
; CHECK-NEXT:    [[INC39_12:%.*]] = add i32 [[K27_0127]], 13
; CHECK-NEXT:    [[INC39_13:%.*]] = add i32 [[K27_0127]], 14
; CHECK-NEXT:    [[INC39_14:%.*]] = add i32 [[K27_0127]], 15
; CHECK-NEXT:    [[INC39_15]] = add i32 [[K27_0127]], 16
; CHECK-NEXT:    [[SUB35:%.*]] = sub i32 [[K27_0127]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_1:%.*]] = sub i32 [[INC39]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_2:%.*]] = sub i32 [[INC39_1]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_3:%.*]] = sub i32 [[INC39_2]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_4:%.*]] = sub i32 [[INC39_3]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_5:%.*]] = sub i32 [[INC39_4]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_6:%.*]] = sub i32 [[INC39_5]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_7:%.*]] = sub i32 [[INC39_6]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_8:%.*]] = sub i32 [[INC39_7]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_9:%.*]] = sub i32 [[INC39_8]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_10:%.*]] = sub i32 [[INC39_9]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_11:%.*]] = sub i32 [[INC39_10]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_12:%.*]] = sub i32 [[INC39_11]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_13:%.*]] = sub i32 [[INC39_12]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_14:%.*]] = sub i32 [[INC39_13]], [[ADD30]]
; CHECK-NEXT:    [[SUB35_15:%.*]] = sub i32 [[INC39_14]], [[ADD30]]
; CHECK-NEXT:    [[ARRAYIDX34:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K27_0127]]
; CHECK-NEXT:    [[ARRAYIDX36:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35]]
; CHECK-NEXT:    [[ARRAYIDX34_1:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39]]
; CHECK-NEXT:    [[ARRAYIDX36_1:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_1]]
; CHECK-NEXT:    [[ARRAYIDX34_2:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_1]]
; CHECK-NEXT:    [[ARRAYIDX36_2:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_2]]
; CHECK-NEXT:    [[ARRAYIDX34_3:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_2]]
; CHECK-NEXT:    [[ARRAYIDX36_3:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_3]]
; CHECK-NEXT:    [[ARRAYIDX34_4:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_3]]
; CHECK-NEXT:    [[ARRAYIDX36_4:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_4]]
; CHECK-NEXT:    [[ARRAYIDX34_5:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_4]]
; CHECK-NEXT:    [[ARRAYIDX36_5:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_5]]
; CHECK-NEXT:    [[ARRAYIDX34_6:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_5]]
; CHECK-NEXT:    [[ARRAYIDX36_6:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_6]]
; CHECK-NEXT:    [[ARRAYIDX34_7:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_6]]
; CHECK-NEXT:    [[ARRAYIDX36_7:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_7]]
; CHECK-NEXT:    [[ARRAYIDX34_8:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_7]]
; CHECK-NEXT:    [[ARRAYIDX36_8:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_8]]
; CHECK-NEXT:    [[ARRAYIDX34_9:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_8]]
; CHECK-NEXT:    [[ARRAYIDX36_9:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_9]]
; CHECK-NEXT:    [[ARRAYIDX34_10:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_9]]
; CHECK-NEXT:    [[ARRAYIDX36_10:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_10]]
; CHECK-NEXT:    [[ARRAYIDX34_11:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_10]]
; CHECK-NEXT:    [[ARRAYIDX36_11:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_11]]
; CHECK-NEXT:    [[ARRAYIDX34_12:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_11]]
; CHECK-NEXT:    [[ARRAYIDX36_12:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_12]]
; CHECK-NEXT:    [[ARRAYIDX34_13:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_12]]
; CHECK-NEXT:    [[ARRAYIDX36_13:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_13]]
; CHECK-NEXT:    [[ARRAYIDX34_14:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_13]]
; CHECK-NEXT:    [[ARRAYIDX36_14:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_14]]
; CHECK-NEXT:    [[ARRAYIDX34_15:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC39_14]]
; CHECK-NEXT:    [[ARRAYIDX36_15:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_15]]
; CHECK-NEXT:    [[TMP32:%.*]] = load float, ptr [[ARRAYIDX34]], align 4
; CHECK-NEXT:    [[TMP33:%.*]] = load float, ptr [[ARRAYIDX36]], align 4
; CHECK-NEXT:    [[TMP34:%.*]] = load float, ptr [[ARRAYIDX34_1]], align 4
; CHECK-NEXT:    [[TMP35:%.*]] = load float, ptr [[ARRAYIDX36_1]], align 4
; CHECK-NEXT:    [[TMP36:%.*]] = load float, ptr [[ARRAYIDX34_2]], align 4
; CHECK-NEXT:    [[TMP37:%.*]] = load float, ptr [[ARRAYIDX36_2]], align 4
; CHECK-NEXT:    [[TMP38:%.*]] = load float, ptr [[ARRAYIDX34_3]], align 4
; CHECK-NEXT:    [[TMP39:%.*]] = load float, ptr [[ARRAYIDX36_3]], align 4
; CHECK-NEXT:    [[TMP40:%.*]] = load float, ptr [[ARRAYIDX34_4]], align 4
; CHECK-NEXT:    [[TMP41:%.*]] = load float, ptr [[ARRAYIDX36_4]], align 4
; CHECK-NEXT:    [[TMP42:%.*]] = load float, ptr [[ARRAYIDX34_5]], align 4
; CHECK-NEXT:    [[TMP43:%.*]] = load float, ptr [[ARRAYIDX36_5]], align 4
; CHECK-NEXT:    [[TMP44:%.*]] = load float, ptr [[ARRAYIDX34_6]], align 4
; CHECK-NEXT:    [[TMP45:%.*]] = load float, ptr [[ARRAYIDX36_6]], align 4
; CHECK-NEXT:    [[TMP46:%.*]] = load float, ptr [[ARRAYIDX34_7]], align 4
; CHECK-NEXT:    [[TMP47:%.*]] = load float, ptr [[ARRAYIDX36_7]], align 4
; CHECK-NEXT:    [[TMP48:%.*]] = load float, ptr [[ARRAYIDX34_8]], align 4
; CHECK-NEXT:    [[TMP49:%.*]] = load float, ptr [[ARRAYIDX36_8]], align 4
; CHECK-NEXT:    [[TMP50:%.*]] = load float, ptr [[ARRAYIDX34_9]], align 4
; CHECK-NEXT:    [[TMP51:%.*]] = load float, ptr [[ARRAYIDX36_9]], align 4
; CHECK-NEXT:    [[TMP52:%.*]] = load float, ptr [[ARRAYIDX34_10]], align 4
; CHECK-NEXT:    [[TMP53:%.*]] = load float, ptr [[ARRAYIDX36_10]], align 4
; CHECK-NEXT:    [[TMP54:%.*]] = load float, ptr [[ARRAYIDX34_11]], align 4
; CHECK-NEXT:    [[TMP55:%.*]] = load float, ptr [[ARRAYIDX36_11]], align 4
; CHECK-NEXT:    [[TMP56:%.*]] = load float, ptr [[ARRAYIDX34_12]], align 4
; CHECK-NEXT:    [[TMP57:%.*]] = load float, ptr [[ARRAYIDX36_12]], align 4
; CHECK-NEXT:    [[TMP58:%.*]] = load float, ptr [[ARRAYIDX34_13]], align 4
; CHECK-NEXT:    [[TMP59:%.*]] = load float, ptr [[ARRAYIDX36_13]], align 4
; CHECK-NEXT:    [[TMP60:%.*]] = load float, ptr [[ARRAYIDX34_14]], align 4
; CHECK-NEXT:    [[TMP61:%.*]] = load float, ptr [[ARRAYIDX36_14]], align 4
; CHECK-NEXT:    [[TMP62:%.*]] = load float, ptr [[ARRAYIDX34_15]], align 4
; CHECK-NEXT:    [[TMP63:%.*]] = load float, ptr [[ARRAYIDX36_15]], align 4
; CHECK-NEXT:    [[TMP64]] = tail call float @llvm.fmuladd.f32(float [[TMP32]], float [[TMP33]], float [[DOTPHI9]])
; CHECK-NEXT:    [[TMP65]] = tail call float @llvm.fmuladd.f32(float [[TMP34]], float [[TMP35]], float [[DOTPHI10]])
; CHECK-NEXT:    [[TMP66]] = tail call float @llvm.fmuladd.f32(float [[TMP36]], float [[TMP37]], float [[DOTPHI11]])
; CHECK-NEXT:    [[TMP67]] = tail call float @llvm.fmuladd.f32(float [[TMP38]], float [[TMP39]], float [[DOTPHI12]])
; CHECK-NEXT:    [[TMP68]] = tail call float @llvm.fmuladd.f32(float [[TMP40]], float [[TMP41]], float [[DOTPHI13]])
; CHECK-NEXT:    [[TMP69]] = tail call float @llvm.fmuladd.f32(float [[TMP42]], float [[TMP43]], float [[DOTPHI14]])
; CHECK-NEXT:    [[TMP70]] = tail call float @llvm.fmuladd.f32(float [[TMP44]], float [[TMP45]], float [[DOTPHI15]])
; CHECK-NEXT:    [[TMP71]] = tail call float @llvm.fmuladd.f32(float [[TMP46]], float [[TMP47]], float [[DOTPHI16]])
; CHECK-NEXT:    [[TMP72]] = tail call float @llvm.fmuladd.f32(float [[TMP48]], float [[TMP49]], float [[DOTPHI17]])
; CHECK-NEXT:    [[TMP73]] = tail call float @llvm.fmuladd.f32(float [[TMP50]], float [[TMP51]], float [[DOTPHI18]])
; CHECK-NEXT:    [[TMP74]] = tail call float @llvm.fmuladd.f32(float [[TMP52]], float [[TMP53]], float [[DOTPHI19]])
; CHECK-NEXT:    [[TMP75]] = tail call float @llvm.fmuladd.f32(float [[TMP54]], float [[TMP55]], float [[DOTPHI20]])
; CHECK-NEXT:    [[TMP76]] = tail call float @llvm.fmuladd.f32(float [[TMP56]], float [[TMP57]], float [[DOTPHI21]])
; CHECK-NEXT:    [[TMP77]] = tail call float @llvm.fmuladd.f32(float [[TMP58]], float [[TMP59]], float [[DOTPHI22]])
; CHECK-NEXT:    [[TMP78]] = tail call float @llvm.fmuladd.f32(float [[TMP60]], float [[TMP61]], float [[DOTPHI23]])
; CHECK-NEXT:    [[TMP79]] = tail call float @llvm.fmuladd.f32(float [[TMP62]], float [[TMP63]], float [[DOTPHI24]])
; CHECK-NEXT:    [[CMP32_NOT_15:%.*]] = icmp ult i32 [[INC39_15]], [[ADD60]]
; CHECK-NEXT:    br i1 [[CMP32_NOT_15]], label [[FOR_BODY33_15]], label [[FOR_END40_LOOPEXIT:%.*]]
; CHECK:       for.end40.loopexit:
; CHECK-NEXT:    [[SUM45:%.*]] = fadd float [[TMP64]], [[TMP65]]
; CHECK-NEXT:    [[SUM46:%.*]] = fadd float [[TMP66]], [[TMP67]]
; CHECK-NEXT:    [[SUM47:%.*]] = fadd float [[TMP68]], [[TMP69]]
; CHECK-NEXT:    [[SUM48:%.*]] = fadd float [[TMP70]], [[TMP71]]
; CHECK-NEXT:    [[SUM49:%.*]] = fadd float [[TMP72]], [[TMP73]]
; CHECK-NEXT:    [[SUM50:%.*]] = fadd float [[TMP74]], [[TMP75]]
; CHECK-NEXT:    [[SUM51:%.*]] = fadd float [[TMP76]], [[TMP77]]
; CHECK-NEXT:    [[SUM52:%.*]] = fadd float [[TMP78]], [[TMP79]]
; CHECK-NEXT:    [[SUM53:%.*]] = fadd float [[SUM45]], [[SUM46]]
; CHECK-NEXT:    [[SUM54:%.*]] = fadd float [[SUM47]], [[SUM48]]
; CHECK-NEXT:    [[SUM55:%.*]] = fadd float [[SUM49]], [[SUM50]]
; CHECK-NEXT:    [[SUM56:%.*]] = fadd float [[SUM51]], [[SUM52]]
; CHECK-NEXT:    [[SUM57:%.*]] = fadd float [[SUM53]], [[SUM54]]
; CHECK-NEXT:    [[SUM58:%.*]] = fadd float [[SUM55]], [[SUM56]]
; CHECK-NEXT:    [[SUM59:%.*]] = fadd float [[SUM57]], [[SUM58]]
; CHECK-NEXT:    br label [[FOR_END164]]
; CHECK:       for.end164:
; CHECK-NEXT:    [[PHI_SUM:%.*]] = phi i32 [ [[ADD30]], [[FOR_BODY25]] ], [ [[INC39_15]], [[FOR_END40_LOOPEXIT]] ]
; CHECK-NEXT:    [[PHI_FLOAT:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY25]] ], [ [[SUM59]], [[FOR_END40_LOOPEXIT]] ]
; CHECK-NEXT:    store float [[PHI_FLOAT]], ptr [[ARRAYIDX28]], align 4
; CHECK-NEXT:    [[CMP182_NOT587:%.*]] = icmp ugt i32 [[PHI_SUM]], [[N21_0129]]
; CHECK-NEXT:    br i1 [[CMP182_NOT587]], label [[FOR_END40]], label [[FOR_BODY33_CLONE:%.*]]
; CHECK:       for.body33.clone:
; CHECK-NEXT:    [[TMP80:%.*]] = phi float [ [[TMP83:%.*]], [[FOR_BODY33_CLONE]] ], [ [[PHI_FLOAT]], [[FOR_END164]] ]
; CHECK-NEXT:    [[K27_0127_CLONE:%.*]] = phi i32 [ [[INC39_CLONE:%.*]], [[FOR_BODY33_CLONE]] ], [ [[PHI_SUM]], [[FOR_END164]] ]
; CHECK-NEXT:    [[ARRAYIDX34_CLONE:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K27_0127_CLONE]]
; CHECK-NEXT:    [[TMP81:%.*]] = load float, ptr [[ARRAYIDX34_CLONE]], align 4
; CHECK-NEXT:    [[SUB35_CLONE:%.*]] = sub i32 [[K27_0127_CLONE]], [[ADD30]]
; CHECK-NEXT:    [[ARRAYIDX36_CLONE:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB35_CLONE]]
; CHECK-NEXT:    [[TMP82:%.*]] = load float, ptr [[ARRAYIDX36_CLONE]], align 4
; CHECK-NEXT:    [[TMP83]] = tail call float @llvm.fmuladd.f32(float [[TMP81]], float [[TMP82]], float [[TMP80]])
; CHECK-NEXT:    [[INC39_CLONE]] = add i32 [[K27_0127_CLONE]], 1
; CHECK-NEXT:    [[CMP32_NOT_CLONE:%.*]] = icmp ugt i32 [[INC39_CLONE]], [[N21_0129]]
; CHECK-NEXT:    br i1 [[CMP32_NOT_CLONE]], label [[FOR_COND_FOR_END_CRIT_EDGE25:%.*]], label [[FOR_BODY33_CLONE]]
; CHECK:       for.cond.for.end_crit_edge25:
; CHECK-NEXT:    store float [[TMP83]], ptr [[ARRAYIDX28]], align 4
; CHECK-NEXT:    br label [[FOR_END40]]
; CHECK:       for.end40:
; CHECK-NEXT:    [[INC42]] = add nuw nsw i32 [[N21_0129]], 1
; CHECK-NEXT:    [[EXITCOND135_NOT:%.*]] = icmp eq i32 [[INC42]], [[LSIG_0]]
; CHECK-NEXT:    br i1 [[EXITCOND135_NOT]], label [[FOR_COND45_PREHEADER_LOOPEXIT:%.*]], label [[FOR_BODY25]]
; CHECK:       for.body50:
; CHECK-NEXT:    [[N44_0133:%.*]] = phi i32 [ [[LSIG_0]], [[FOR_BODY50_LR_PH]] ], [ [[INC69:%.*]], [[FOR_END67:%.*]] ]
; CHECK-NEXT:    [[ARRAYIDX54:%.*]] = getelementptr inbounds float, ptr [[CORRVOUT]], i32 [[N44_0133]]
; CHECK-NEXT:    [[SUB55:%.*]] = sub nsw i32 [[N44_0133]], [[LKERN_0]]
; CHECK-NEXT:    [[ADD56:%.*]] = add nsw i32 [[SUB55]], 1
; CHECK-NEXT:    [[ADD207_NEG:%.*]] = xor i32 [[SUB55]], -1
; CHECK-NEXT:    [[ADD211:%.*]] = add i32 [[ADD207_NEG]], [[LSIG_0]]
; CHECK-NEXT:    [[DIV212535:%.*]] = and i32 [[ADD211]], -8
; CHECK-NEXT:    [[ADD214:%.*]] = add i32 [[DIV212535]], [[ADD56]]
; CHECK-NEXT:    [[CMP59_NOT130:%.*]] = icmp ult i32 [[ADD56]], [[ADD214]]
; CHECK-NEXT:    br i1 [[CMP59_NOT130]], label [[FOR_BODY60_PREHEADER:%.*]], label [[FOR_END16434:%.*]]
; CHECK:       for.body60.preheader:
; CHECK-NEXT:    br label [[FOR_BODY60_7:%.*]]
; CHECK:       for.body60.7:
; CHECK-NEXT:    [[K53_0131:%.*]] = phi i32 [ [[ADD56]], [[FOR_BODY60_PREHEADER]] ], [ [[INC66_7:%.*]], [[FOR_BODY60_7]] ]
; CHECK-NEXT:    [[DOTPHI26:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY60_PREHEADER]] ], [ [[TMP100:%.*]], [[FOR_BODY60_7]] ]
; CHECK-NEXT:    [[DOTPHI27:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY60_PREHEADER]] ], [ [[TMP101:%.*]], [[FOR_BODY60_7]] ]
; CHECK-NEXT:    [[DOTPHI28:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY60_PREHEADER]] ], [ [[TMP102:%.*]], [[FOR_BODY60_7]] ]
; CHECK-NEXT:    [[DOTPHI29:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY60_PREHEADER]] ], [ [[TMP103:%.*]], [[FOR_BODY60_7]] ]
; CHECK-NEXT:    [[DOTPHI30:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY60_PREHEADER]] ], [ [[TMP104:%.*]], [[FOR_BODY60_7]] ]
; CHECK-NEXT:    [[DOTPHI31:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY60_PREHEADER]] ], [ [[TMP105:%.*]], [[FOR_BODY60_7]] ]
; CHECK-NEXT:    [[DOTPHI32:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY60_PREHEADER]] ], [ [[TMP106:%.*]], [[FOR_BODY60_7]] ]
; CHECK-NEXT:    [[DOTPHI33:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY60_PREHEADER]] ], [ [[TMP107:%.*]], [[FOR_BODY60_7]] ]
; CHECK-NEXT:    [[INC66:%.*]] = add i32 [[K53_0131]], 1
; CHECK-NEXT:    [[INC66_1:%.*]] = add i32 [[K53_0131]], 2
; CHECK-NEXT:    [[INC66_2:%.*]] = add i32 [[K53_0131]], 3
; CHECK-NEXT:    [[INC66_3:%.*]] = add i32 [[K53_0131]], 4
; CHECK-NEXT:    [[INC66_4:%.*]] = add i32 [[K53_0131]], 5
; CHECK-NEXT:    [[INC66_5:%.*]] = add i32 [[K53_0131]], 6
; CHECK-NEXT:    [[INC66_6:%.*]] = add i32 [[K53_0131]], 7
; CHECK-NEXT:    [[INC66_7]] = add i32 [[K53_0131]], 8
; CHECK-NEXT:    [[SUB62:%.*]] = sub i32 [[K53_0131]], [[ADD56]]
; CHECK-NEXT:    [[SUB62_1:%.*]] = sub i32 [[INC66]], [[ADD56]]
; CHECK-NEXT:    [[SUB62_2:%.*]] = sub i32 [[INC66_1]], [[ADD56]]
; CHECK-NEXT:    [[SUB62_3:%.*]] = sub i32 [[INC66_2]], [[ADD56]]
; CHECK-NEXT:    [[SUB62_4:%.*]] = sub i32 [[INC66_3]], [[ADD56]]
; CHECK-NEXT:    [[SUB62_5:%.*]] = sub i32 [[INC66_4]], [[ADD56]]
; CHECK-NEXT:    [[SUB62_6:%.*]] = sub i32 [[INC66_5]], [[ADD56]]
; CHECK-NEXT:    [[SUB62_7:%.*]] = sub i32 [[INC66_6]], [[ADD56]]
; CHECK-NEXT:    [[ARRAYIDX61:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K53_0131]]
; CHECK-NEXT:    [[ARRAYIDX63:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62]]
; CHECK-NEXT:    [[ARRAYIDX61_1:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC66]]
; CHECK-NEXT:    [[ARRAYIDX63_1:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62_1]]
; CHECK-NEXT:    [[ARRAYIDX61_2:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC66_1]]
; CHECK-NEXT:    [[ARRAYIDX63_2:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62_2]]
; CHECK-NEXT:    [[ARRAYIDX61_3:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC66_2]]
; CHECK-NEXT:    [[ARRAYIDX63_3:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62_3]]
; CHECK-NEXT:    [[ARRAYIDX61_4:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC66_3]]
; CHECK-NEXT:    [[ARRAYIDX63_4:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62_4]]
; CHECK-NEXT:    [[ARRAYIDX61_5:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC66_4]]
; CHECK-NEXT:    [[ARRAYIDX63_5:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62_5]]
; CHECK-NEXT:    [[ARRAYIDX61_6:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC66_5]]
; CHECK-NEXT:    [[ARRAYIDX63_6:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62_6]]
; CHECK-NEXT:    [[ARRAYIDX61_7:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[INC66_6]]
; CHECK-NEXT:    [[ARRAYIDX63_7:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62_7]]
; CHECK-NEXT:    [[TMP84:%.*]] = load float, ptr [[ARRAYIDX61]], align 4
; CHECK-NEXT:    [[TMP85:%.*]] = load float, ptr [[ARRAYIDX63]], align 4
; CHECK-NEXT:    [[TMP86:%.*]] = load float, ptr [[ARRAYIDX61_1]], align 4
; CHECK-NEXT:    [[TMP87:%.*]] = load float, ptr [[ARRAYIDX63_1]], align 4
; CHECK-NEXT:    [[TMP88:%.*]] = load float, ptr [[ARRAYIDX61_2]], align 4
; CHECK-NEXT:    [[TMP89:%.*]] = load float, ptr [[ARRAYIDX63_2]], align 4
; CHECK-NEXT:    [[TMP90:%.*]] = load float, ptr [[ARRAYIDX61_3]], align 4
; CHECK-NEXT:    [[TMP91:%.*]] = load float, ptr [[ARRAYIDX63_3]], align 4
; CHECK-NEXT:    [[TMP92:%.*]] = load float, ptr [[ARRAYIDX61_4]], align 4
; CHECK-NEXT:    [[TMP93:%.*]] = load float, ptr [[ARRAYIDX63_4]], align 4
; CHECK-NEXT:    [[TMP94:%.*]] = load float, ptr [[ARRAYIDX61_5]], align 4
; CHECK-NEXT:    [[TMP95:%.*]] = load float, ptr [[ARRAYIDX63_5]], align 4
; CHECK-NEXT:    [[TMP96:%.*]] = load float, ptr [[ARRAYIDX61_6]], align 4
; CHECK-NEXT:    [[TMP97:%.*]] = load float, ptr [[ARRAYIDX63_6]], align 4
; CHECK-NEXT:    [[TMP98:%.*]] = load float, ptr [[ARRAYIDX61_7]], align 4
; CHECK-NEXT:    [[TMP99:%.*]] = load float, ptr [[ARRAYIDX63_7]], align 4
; CHECK-NEXT:    [[TMP100]] = tail call float @llvm.fmuladd.f32(float [[TMP84]], float [[TMP85]], float [[DOTPHI26]])
; CHECK-NEXT:    [[TMP101]] = tail call float @llvm.fmuladd.f32(float [[TMP86]], float [[TMP87]], float [[DOTPHI27]])
; CHECK-NEXT:    [[TMP102]] = tail call float @llvm.fmuladd.f32(float [[TMP88]], float [[TMP89]], float [[DOTPHI28]])
; CHECK-NEXT:    [[TMP103]] = tail call float @llvm.fmuladd.f32(float [[TMP90]], float [[TMP91]], float [[DOTPHI29]])
; CHECK-NEXT:    [[TMP104]] = tail call float @llvm.fmuladd.f32(float [[TMP92]], float [[TMP93]], float [[DOTPHI30]])
; CHECK-NEXT:    [[TMP105]] = tail call float @llvm.fmuladd.f32(float [[TMP94]], float [[TMP95]], float [[DOTPHI31]])
; CHECK-NEXT:    [[TMP106]] = tail call float @llvm.fmuladd.f32(float [[TMP96]], float [[TMP97]], float [[DOTPHI32]])
; CHECK-NEXT:    [[TMP107]] = tail call float @llvm.fmuladd.f32(float [[TMP98]], float [[TMP99]], float [[DOTPHI33]])
; CHECK-NEXT:    [[CMP59_NOT_7:%.*]] = icmp ult i32 [[INC66_7]], [[ADD214]]
; CHECK-NEXT:    br i1 [[CMP59_NOT_7]], label [[FOR_BODY60_7]], label [[FOR_END67_LOOPEXIT:%.*]]
; CHECK:       for.end67.loopexit:
; CHECK-NEXT:    [[SUM60:%.*]] = fadd float [[TMP100]], [[TMP101]]
; CHECK-NEXT:    [[SUM61:%.*]] = fadd float [[TMP102]], [[TMP103]]
; CHECK-NEXT:    [[SUM62:%.*]] = fadd float [[TMP104]], [[TMP105]]
; CHECK-NEXT:    [[SUM63:%.*]] = fadd float [[TMP106]], [[TMP107]]
; CHECK-NEXT:    [[SUM64:%.*]] = fadd float [[SUM60]], [[SUM61]]
; CHECK-NEXT:    [[SUM65:%.*]] = fadd float [[SUM62]], [[SUM63]]
; CHECK-NEXT:    [[SUM66:%.*]] = fadd float [[SUM64]], [[SUM65]]
; CHECK-NEXT:    br label [[FOR_END16434]]
; CHECK:       for.end16434:
; CHECK-NEXT:    [[PHI_SUM35:%.*]] = phi i32 [ [[ADD56]], [[FOR_BODY50]] ], [ [[INC66_7]], [[FOR_END67_LOOPEXIT]] ]
; CHECK-NEXT:    [[PHI_FLOAT36:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY50]] ], [ [[SUM66]], [[FOR_END67_LOOPEXIT]] ]
; CHECK-NEXT:    store float [[PHI_FLOAT36]], ptr [[ARRAYIDX54]], align 4
; CHECK-NEXT:    [[CMP182_NOT58737:%.*]] = icmp ugt i32 [[PHI_SUM35]], [[SUB57]]
; CHECK-NEXT:    br i1 [[CMP182_NOT58737]], label [[FOR_END67]], label [[FOR_BODY60_CLONE:%.*]]
; CHECK:       for.body60.clone:
; CHECK-NEXT:    [[TMP108:%.*]] = phi float [ [[TMP111:%.*]], [[FOR_BODY60_CLONE]] ], [ [[PHI_FLOAT36]], [[FOR_END16434]] ]
; CHECK-NEXT:    [[K53_0131_CLONE:%.*]] = phi i32 [ [[INC66_CLONE:%.*]], [[FOR_BODY60_CLONE]] ], [ [[PHI_SUM35]], [[FOR_END16434]] ]
; CHECK-NEXT:    [[ARRAYIDX61_CLONE:%.*]] = getelementptr inbounds float, ptr [[SIG_0]], i32 [[K53_0131_CLONE]]
; CHECK-NEXT:    [[TMP109:%.*]] = load float, ptr [[ARRAYIDX61_CLONE]], align 4
; CHECK-NEXT:    [[SUB62_CLONE:%.*]] = sub i32 [[K53_0131_CLONE]], [[ADD56]]
; CHECK-NEXT:    [[ARRAYIDX63_CLONE:%.*]] = getelementptr inbounds float, ptr [[KERN_0]], i32 [[SUB62_CLONE]]
; CHECK-NEXT:    [[TMP110:%.*]] = load float, ptr [[ARRAYIDX63_CLONE]], align 4
; CHECK-NEXT:    [[TMP111]] = tail call float @llvm.fmuladd.f32(float [[TMP109]], float [[TMP110]], float [[TMP108]])
; CHECK-NEXT:    [[INC66_CLONE]] = add i32 [[K53_0131_CLONE]], 1
; CHECK-NEXT:    [[CMP59_NOT_CLONE:%.*]] = icmp ugt i32 [[INC66_CLONE]], [[SUB57]]
; CHECK-NEXT:    br i1 [[CMP59_NOT_CLONE]], label [[FOR_COND_FOR_END_CRIT_EDGE38:%.*]], label [[FOR_BODY60_CLONE]]
; CHECK:       for.cond.for.end_crit_edge38:
; CHECK-NEXT:    store float [[TMP111]], ptr [[ARRAYIDX54]], align 4
; CHECK-NEXT:    br label [[FOR_END67]]
; CHECK:       for.end67:
; CHECK-NEXT:    [[INC69]] = add nsw i32 [[N44_0133]], 1
; CHECK-NEXT:    [[EXITCOND136_NOT:%.*]] = icmp eq i32 [[INC69]], [[SUB47]]
; CHECK-NEXT:    br i1 [[EXITCOND136_NOT]], label [[RETURN_LOOPEXIT:%.*]], label [[FOR_BODY50]]
; CHECK:       return.loopexit:
; CHECK-NEXT:    br label [[RETURN]]
; CHECK:       return:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ 458755, [[ENTRY:%.*]] ], [ 0, [[FOR_COND45_PREHEADER]] ], [ 0, [[RETURN_LOOPEXIT]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0]]
;
entry:
  %cmp = icmp eq ptr %Signal, null
  %cmp1 = icmp eq ptr %Kernel, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp4 = icmp eq ptr %corrvout, null
  %or.cond122 = or i1 %or.cond, %cmp4
  br i1 %or.cond122, label %return, label %if.end6

if.end6:                                          ; preds = %entry
  %cmp7 = icmp slt i32 %siglen, %kernlen
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end6
  %lkern.0 = phi i32 [ %siglen, %if.then8 ], [ %kernlen, %if.end6 ]
  %lsig.0 = phi i32 [ %kernlen, %if.then8 ], [ %siglen, %if.end6 ]
  %kern.0 = phi ptr [ %Signal, %if.then8 ], [ %Kernel, %if.end6 ]
  %sig.0 = phi ptr [ %Kernel, %if.then8 ], [ %Signal, %if.end6 ]
  %cmp10124 = icmp sgt i32 %lkern.0, 0
  br i1 %cmp10124, label %for.body, label %for.cond22.preheader

for.cond22.preheader:                             ; preds = %for.end, %if.end9
  %cmp23128 = icmp slt i32 %lkern.0, %lsig.0
  br i1 %cmp23128, label %for.body25, label %for.cond45.preheader

for.body:                                         ; preds = %for.end, %if.end9
  %indvars.iv = phi i32 [ %indvars.iv.next, %for.end ], [ 1, %if.end9 ]
  %n.0125 = phi i32 [ %inc19, %for.end ], [ 0, %if.end9 ]
  %0 = xor i32 %n.0125, -1
  %sub11 = add nsw i32 %lkern.0, %0
  %arrayidx = getelementptr inbounds float, ptr %corrvout, i32 %n.0125
  store float 0.000000e+00, ptr %arrayidx, align 4
  br label %for.body14

for.body14:                                       ; preds = %for.body14, %for.body
  %k.0123 = phi i32 [ 0, %for.body ], [ %inc, %for.body14 ]
  %1 = phi float [ 0.000000e+00, %for.body ], [ %4, %for.body14 ]
  %arrayidx15 = getelementptr inbounds float, ptr %sig.0, i32 %k.0123
  %2 = load float, ptr %arrayidx15, align 4
  %add = add i32 %sub11, %k.0123
  %arrayidx16 = getelementptr inbounds float, ptr %kern.0, i32 %add
  %3 = load float, ptr %arrayidx16, align 4
  %4 = tail call float @llvm.fmuladd.f32(float %2, float %3, float %1)
  store float %4, ptr %arrayidx, align 4
  %inc = add nuw nsw i32 %k.0123, 1
  %exitcond = icmp eq i32 %inc, %indvars.iv
  br i1 %exitcond, label %for.end, label %for.body14

for.end:                                          ; preds = %for.body14
  %inc19 = add nuw nsw i32 %n.0125, 1
  %indvars.iv.next = add nuw i32 %indvars.iv, 1
  %exitcond134.not = icmp eq i32 %inc19, %lkern.0
  br i1 %exitcond134.not, label %for.cond22.preheader, label %for.body

for.cond45.preheader:                             ; preds = %for.end40, %for.cond22.preheader
  %add46 = add i32 %siglen, -1
  %sub47 = add i32 %add46, %kernlen
  %cmp48132 = icmp slt i32 %lsig.0, %sub47
  br i1 %cmp48132, label %for.body50.lr.ph, label %return

for.body50.lr.ph:                                 ; preds = %for.cond45.preheader
  %sub57 = add nsw i32 %lsig.0, -1
  br label %for.body50

for.body25:                                       ; preds = %for.end40, %for.cond22.preheader
  %n21.0129 = phi i32 [ %inc42, %for.end40 ], [ %lkern.0, %for.cond22.preheader ]
  %arrayidx28 = getelementptr inbounds float, ptr %corrvout, i32 %n21.0129
  store float 0.000000e+00, ptr %arrayidx28, align 4
  %sub29 = sub nuw nsw i32 %n21.0129, %lkern.0
  %add30 = add nsw i32 %sub29, 1
  %cmp32.not126 = icmp ugt i32 %add30, %n21.0129
  br i1 %cmp32.not126, label %for.end40, label %for.body33

for.body33:                                       ; preds = %for.body33, %for.body25
  %5 = phi float [ %8, %for.body33 ], [ 0.000000e+00, %for.body25 ]
  %k27.0127 = phi i32 [ %inc39, %for.body33 ], [ %add30, %for.body25 ]
  %arrayidx34 = getelementptr inbounds float, ptr %sig.0, i32 %k27.0127
  %6 = load float, ptr %arrayidx34, align 4
  %sub35 = sub i32 %k27.0127, %add30
  %arrayidx36 = getelementptr inbounds float, ptr %kern.0, i32 %sub35
  %7 = load float, ptr %arrayidx36, align 4
  %8 = tail call float @llvm.fmuladd.f32(float %6, float %7, float %5)
  store float %8, ptr %arrayidx28, align 4
  %inc39 = add i32 %k27.0127, 1
  %cmp32.not = icmp ugt i32 %inc39, %n21.0129
  br i1 %cmp32.not, label %for.end40, label %for.body33

for.end40:                                        ; preds = %for.body33, %for.body25
  %inc42 = add nuw nsw i32 %n21.0129, 1
  %exitcond135.not = icmp eq i32 %inc42, %lsig.0
  br i1 %exitcond135.not, label %for.cond45.preheader, label %for.body25

for.body50:                                       ; preds = %for.end67, %for.body50.lr.ph
  %n44.0133 = phi i32 [ %lsig.0, %for.body50.lr.ph ], [ %inc69, %for.end67 ]
  %arrayidx54 = getelementptr inbounds float, ptr %corrvout, i32 %n44.0133
  store float 0.000000e+00, ptr %arrayidx54, align 4
  %sub55 = sub nsw i32 %n44.0133, %lkern.0
  %add56 = add nsw i32 %sub55, 1
  %cmp59.not130 = icmp ugt i32 %add56, %sub57
  br i1 %cmp59.not130, label %for.end67, label %for.body60

for.body60:                                       ; preds = %for.body60, %for.body50
  %9 = phi float [ %12, %for.body60 ], [ 0.000000e+00, %for.body50 ]
  %k53.0131 = phi i32 [ %inc66, %for.body60 ], [ %add56, %for.body50 ]
  %arrayidx61 = getelementptr inbounds float, ptr %sig.0, i32 %k53.0131
  %10 = load float, ptr %arrayidx61, align 4
  %sub62 = sub i32 %k53.0131, %add56
  %arrayidx63 = getelementptr inbounds float, ptr %kern.0, i32 %sub62
  %11 = load float, ptr %arrayidx63, align 4
  %12 = tail call float @llvm.fmuladd.f32(float %10, float %11, float %9)
  store float %12, ptr %arrayidx54, align 4
  %inc66 = add i32 %k53.0131, 1
  %cmp59.not = icmp ugt i32 %inc66, %sub57
  br i1 %cmp59.not, label %for.end67, label %for.body60

for.end67:                                        ; preds = %for.body60, %for.body50
  %inc69 = add nsw i32 %n44.0133, 1
  %exitcond136.not = icmp eq i32 %inc69, %sub47
  br i1 %exitcond136.not, label %return, label %for.body50

return:                                           ; preds = %for.end67, %for.cond45.preheader, %entry
  %retval.0 = phi i32 [ 458755, %entry ], [ 0, %for.cond45.preheader ], [ 0, %for.end67 ]
  ret i32 %retval.0
}
