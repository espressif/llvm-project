; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-custom-licm -riscv-custom-licm=true < %s | FileCheck %s
%struct.fir_s16_s = type { ptr, ptr, i16, i16, i16, i16, i16, ptr, i32, i16 }

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dsps_fird_s16_ansi(ptr nocapture noundef %fir, ptr nocapture noundef readonly %input, ptr nocapture noundef writeonly %output, i32 noundef %len) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_fird_s16_ansi(
; CHECK-SAME: ptr noundef captures(none) [[FIR:%.*]], ptr noundef readonly captures(none) [[INPUT:%.*]], ptr noundef writeonly captures(none) [[OUTPUT:%.*]], i32 noundef [[LEN:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SHIFT:%.*]] = getelementptr inbounds [[STRUCT_FIR_S16_S:%.*]], ptr [[FIR]], i32 0, i32 6
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[SHIFT]], align 4
; CHECK-NEXT:    [[CONV:%.*]] = sext i16 [[TMP0]] to i32
; CHECK-NEXT:    [[SUB:%.*]] = add nsw i32 [[CONV]], -15
; CHECK-NEXT:    [[ROUNDING_VAL:%.*]] = getelementptr inbounds [[STRUCT_FIR_S16_S]], ptr [[FIR]], i32 0, i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ROUNDING_VAL]], align 4
; CHECK-NEXT:    [[CONV1:%.*]] = sext i32 [[TMP1]] to i64
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i16 [[TMP0]], -1
; CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[SH_PROM:%.*]] = zext nneg i32 [[CONV]] to i64
; CHECK-NEXT:    [[SHR:%.*]] = ashr i64 [[CONV1]], [[SH_PROM]]
; CHECK-NEXT:    br label [[IF_END:%.*]]
; CHECK:       if.else:
; CHECK-NEXT:    [[SUB9:%.*]] = sub nsw i32 0, [[CONV]]
; CHECK-NEXT:    [[SH_PROM10:%.*]] = zext nneg i32 [[SUB9]] to i64
; CHECK-NEXT:    [[SHL:%.*]] = shl i64 [[CONV1]], [[SH_PROM10]]
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    [[ROUNDING_0_IN:%.*]] = phi i64 [ [[SHR]], [[IF_THEN]] ], [ [[SHL]], [[IF_ELSE]] ]
; CHECK-NEXT:    [[ROUNDING_0:%.*]] = and i64 [[ROUNDING_0_IN]], 1099511627775
; CHECK-NEXT:    [[DECIM:%.*]] = getelementptr inbounds [[STRUCT_FIR_S16_S]], ptr [[FIR]], i32 0, i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[DECIM]], align 4
; CHECK-NEXT:    [[COEFFS_LEN:%.*]] = getelementptr inbounds [[STRUCT_FIR_S16_S]], ptr [[FIR]], i32 0, i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[COEFFS_LEN]], align 4
; CHECK-NEXT:    [[DELAY:%.*]] = getelementptr inbounds [[STRUCT_FIR_S16_S]], ptr [[FIR]], i32 0, i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[DELAY]], align 4
; CHECK-NEXT:    [[CMP12153:%.*]] = icmp sgt i32 [[LEN]], 0
; CHECK-NEXT:    br i1 [[CMP12153]], label [[FOR_COND14_PREHEADER_LR_PH:%.*]], label [[FOR_COND_CLEANUP:%.*]]
; CHECK:       for.cond14.preheader.lr.ph:
; CHECK-NEXT:    [[D_POS:%.*]] = getelementptr inbounds [[STRUCT_FIR_S16_S]], ptr [[FIR]], i32 0, i32 5
; CHECK-NEXT:    [[POS:%.*]] = getelementptr inbounds [[STRUCT_FIR_S16_S]], ptr [[FIR]], i32 0, i32 3
; CHECK-NEXT:    [[CMP79:%.*]] = icmp sgt i16 [[TMP0]], 15
; CHECK-NEXT:    [[SUB88:%.*]] = sub nsw i32 15, [[CONV]]
; CHECK-NEXT:    [[SH_PROM89:%.*]] = zext nneg i32 [[SUB88]] to i64
; CHECK-NEXT:    [[SH_PROM82:%.*]] = zext nneg i32 [[SUB]] to i64
; CHECK-NEXT:    br label [[FOR_COND14_PREHEADER:%.*]]
; CHECK:       for.cond14.preheader:
; CHECK-NEXT:    [[I_0156:%.*]] = phi i32 [ 0, [[FOR_COND14_PREHEADER_LR_PH]] ], [ [[INC96:%.*]], [[FOR_COND_CLEANUP63:%.*]] ]
; CHECK-NEXT:    [[INPUT_POS_0154:%.*]] = phi i32 [ 0, [[FOR_COND14_PREHEADER_LR_PH]] ], [ [[INPUT_POS_1_LCSSA:%.*]], [[FOR_COND_CLEANUP63]] ]
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[D_POS]], align 2
; CHECK-NEXT:    [[CMP18138:%.*]] = icmp sgt i16 [[TMP2]], [[TMP5]]
; CHECK-NEXT:    br i1 [[CMP18138]], label [[FOR_BODY21_LR_PH:%.*]], label [[FOR_COND_CLEANUP20:%.*]]
; CHECK:       for.body21.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY21:%.*]]
; CHECK:       for.cond.cleanup:
; CHECK-NEXT:    [[RESULT_0_LCSSA:%.*]] = phi i32 [ 0, [[IF_END]] ], [ [[LEN]], [[FOR_COND_CLEANUP63]] ]
; CHECK-NEXT:    ret i32 [[RESULT_0_LCSSA]]
; CHECK:       for.cond.cleanup20:
; CHECK-NEXT:    [[INPUT_POS_1_LCSSA]] = phi i32 [ [[INPUT_POS_0154]], [[FOR_COND14_PREHEADER]] ], [ [[INC:%.*]], [[IF_END28:%.*]] ]
; CHECK-NEXT:    store i16 0, ptr [[D_POS]], align 2
; CHECK-NEXT:    [[TMP6:%.*]] = load i16, ptr [[POS]], align 2
; CHECK-NEXT:    [[CONV39:%.*]] = sext i16 [[TMP6]] to i32
; CHECK-NEXT:    [[CONV42:%.*]] = sext i16 [[TMP3]] to i32
; CHECK-NEXT:    [[COEFF_POS_0141:%.*]] = add i16 [[TMP3]], -1
; CHECK-NEXT:    [[CMP43142:%.*]] = icmp slt i16 [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br i1 [[CMP43142]], label [[FOR_BODY46_LR_PH:%.*]], label [[FOR_COND58_PREHEADER:%.*]]
; CHECK:       for.body46.lr.ph:
; CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    br label [[FOR_BODY46:%.*]]
; CHECK:       for.body21:
; CHECK-NEXT:    [[J_0140:%.*]] = phi i32 [ 0, [[FOR_BODY21_LR_PH]] ], [ [[INC32:%.*]], [[IF_END28]] ]
; CHECK-NEXT:    [[INPUT_POS_1139:%.*]] = phi i32 [ [[INPUT_POS_0154]], [[FOR_BODY21_LR_PH]] ], [ [[INC]], [[IF_END28]] ]
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[POS]], align 2
; CHECK-NEXT:    [[CMP24_NOT:%.*]] = icmp slt i16 [[TMP8]], [[TMP3]]
; CHECK-NEXT:    br i1 [[CMP24_NOT]], label [[IF_END28]], label [[IF_THEN26:%.*]]
; CHECK:       if.then26:
; CHECK-NEXT:    store i16 0, ptr [[POS]], align 2
; CHECK-NEXT:    br label [[IF_END28]]
; CHECK:       if.end28:
; CHECK-NEXT:    [[TMP9:%.*]] = phi i16 [ 0, [[IF_THEN26]] ], [ [[TMP8]], [[FOR_BODY21]] ]
; CHECK-NEXT:    [[INC]] = add nsw i32 [[INPUT_POS_1139]], 1
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds i16, ptr [[INPUT]], i32 [[INPUT_POS_1139]]
; CHECK-NEXT:    [[TMP10:%.*]] = load i16, ptr [[ARRAYIDX]], align 2
; CHECK-NEXT:    [[INC30:%.*]] = add nsw i16 [[TMP9]], 1
; CHECK-NEXT:    store i16 [[INC30]], ptr [[POS]], align 2
; CHECK-NEXT:    [[IDXPROM:%.*]] = sext i16 [[TMP9]] to i32
; CHECK-NEXT:    [[ARRAYIDX31:%.*]] = getelementptr inbounds i16, ptr [[TMP4]], i32 [[IDXPROM]]
; CHECK-NEXT:    store i16 [[TMP10]], ptr [[ARRAYIDX31]], align 2
; CHECK-NEXT:    [[INC32]] = add nuw nsw i32 [[J_0140]], 1
; CHECK-NEXT:    [[CONV15:%.*]] = sext i16 [[TMP2]] to i32
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[D_POS]], align 2
; CHECK-NEXT:    [[CONV16:%.*]] = sext i16 [[TMP11]] to i32
; CHECK-NEXT:    [[SUB17:%.*]] = sub nsw i32 [[CONV15]], [[CONV16]]
; CHECK-NEXT:    [[CMP18:%.*]] = icmp slt i32 [[INC32]], [[SUB17]]
; CHECK-NEXT:    br i1 [[CMP18]], label [[FOR_BODY21]], label [[FOR_COND_CLEANUP20]]
; CHECK:       for.cond58.preheader.loopexit:
; CHECK-NEXT:    [[TMP12:%.*]] = add i16 [[TMP6]], -1
; CHECK-NEXT:    br label [[FOR_COND58_PREHEADER]]
; CHECK:       for.cond58.preheader:
; CHECK-NEXT:    [[ACC_0_LCSSA:%.*]] = phi i64 [ [[ROUNDING_0]], [[FOR_COND_CLEANUP20]] ], [ [[ADD:%.*]], [[FOR_COND58_PREHEADER_LOOPEXIT:%.*]] ]
; CHECK-NEXT:    [[COEFF_POS_0_LCSSA:%.*]] = phi i16 [ [[COEFF_POS_0141]], [[FOR_COND_CLEANUP20]] ], [ [[TMP12]], [[FOR_COND58_PREHEADER_LOOPEXIT]] ]
; CHECK-NEXT:    [[CMP61148:%.*]] = icmp sgt i16 [[TMP6]], 0
; CHECK-NEXT:    br i1 [[CMP61148]], label [[FOR_BODY64_LR_PH:%.*]], label [[FOR_COND_CLEANUP63]]
; CHECK:       for.body64.lr.ph:
; CHECK-NEXT:    [[TMP13:%.*]] = load ptr, ptr [[FIR]], align 4
; CHECK-NEXT:    br label [[FOR_BODY64:%.*]]
; CHECK:       for.body46:
; CHECK-NEXT:    [[COEFF_POS_0145:%.*]] = phi i16 [ [[COEFF_POS_0141]], [[FOR_BODY46_LR_PH]] ], [ [[COEFF_POS_0:%.*]], [[FOR_BODY46]] ]
; CHECK-NEXT:    [[N_0144:%.*]] = phi i32 [ [[CONV39]], [[FOR_BODY46_LR_PH]] ], [ [[INC55:%.*]], [[FOR_BODY46]] ]
; CHECK-NEXT:    [[ACC_0143:%.*]] = phi i64 [ [[ROUNDING_0]], [[FOR_BODY46_LR_PH]] ], [ [[ADD]], [[FOR_BODY46]] ]
; CHECK-NEXT:    [[IDXPROM47:%.*]] = sext i16 [[COEFF_POS_0145]] to i32
; CHECK-NEXT:    [[ARRAYIDX48:%.*]] = getelementptr inbounds i16, ptr [[TMP7]], i32 [[IDXPROM47]]
; CHECK-NEXT:    [[TMP14:%.*]] = load i16, ptr [[ARRAYIDX48]], align 2
; CHECK-NEXT:    [[CONV49:%.*]] = sext i16 [[TMP14]] to i32
; CHECK-NEXT:    [[ARRAYIDX51:%.*]] = getelementptr inbounds i16, ptr [[TMP4]], i32 [[N_0144]]
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[ARRAYIDX51]], align 2
; CHECK-NEXT:    [[CONV52:%.*]] = sext i16 [[TMP15]] to i32
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[CONV52]], [[CONV49]]
; CHECK-NEXT:    [[CONV53:%.*]] = sext i32 [[MUL]] to i64
; CHECK-NEXT:    [[ADD]] = add nsw i64 [[ACC_0143]], [[CONV53]]
; CHECK-NEXT:    [[INC55]] = add nsw i32 [[N_0144]], 1
; CHECK-NEXT:    [[COEFF_POS_0]] = add i16 [[COEFF_POS_0145]], -1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC55]], [[CONV42]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND58_PREHEADER_LOOPEXIT]], label [[FOR_BODY46]]
; CHECK:       for.cond.cleanup63:
; CHECK-NEXT:    [[ACC_1_LCSSA:%.*]] = phi i64 [ [[ACC_0_LCSSA]], [[FOR_COND58_PREHEADER]] ], [ [[ADD75:%.*]], [[FOR_BODY64]] ]
; CHECK-NEXT:    [[SHR90:%.*]] = ashr i64 [[ACC_1_LCSSA]], [[SH_PROM89]]
; CHECK-NEXT:    [[SHL83:%.*]] = shl i64 [[ACC_1_LCSSA]], [[SH_PROM82]]
; CHECK-NEXT:    [[SHR90_SINK:%.*]] = select i1 [[CMP79]], i64 [[SHL83]], i64 [[SHR90]]
; CHECK-NEXT:    [[CONV91:%.*]] = trunc i64 [[SHR90_SINK]] to i16
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds i16, ptr [[OUTPUT]], i32 [[I_0156]]
; CHECK-NEXT:    store i16 [[CONV91]], ptr [[TMP16]], align 2
; CHECK-NEXT:    [[INC96]] = add nuw nsw i32 [[I_0156]], 1
; CHECK-NEXT:    [[EXITCOND160_NOT:%.*]] = icmp eq i32 [[INC96]], [[LEN]]
; CHECK-NEXT:    br i1 [[EXITCOND160_NOT]], label [[FOR_COND_CLEANUP]], label [[FOR_COND14_PREHEADER]]
; CHECK:       for.body64:
; CHECK-NEXT:    [[N57_0151:%.*]] = phi i32 [ 0, [[FOR_BODY64_LR_PH]] ], [ [[INC77:%.*]], [[FOR_BODY64]] ]
; CHECK-NEXT:    [[COEFF_POS_1150:%.*]] = phi i16 [ [[COEFF_POS_0_LCSSA]], [[FOR_BODY64_LR_PH]] ], [ [[DEC66:%.*]], [[FOR_BODY64]] ]
; CHECK-NEXT:    [[ACC_1149:%.*]] = phi i64 [ [[ACC_0_LCSSA]], [[FOR_BODY64_LR_PH]] ], [ [[ADD75]], [[FOR_BODY64]] ]
; CHECK-NEXT:    [[DEC66]] = add i16 [[COEFF_POS_1150]], -1
; CHECK-NEXT:    [[IDXPROM67:%.*]] = sext i16 [[COEFF_POS_1150]] to i32
; CHECK-NEXT:    [[ARRAYIDX68:%.*]] = getelementptr inbounds i16, ptr [[TMP13]], i32 [[IDXPROM67]]
; CHECK-NEXT:    [[TMP17:%.*]] = load i16, ptr [[ARRAYIDX68]], align 2
; CHECK-NEXT:    [[CONV69:%.*]] = sext i16 [[TMP17]] to i32
; CHECK-NEXT:    [[ARRAYIDX71:%.*]] = getelementptr inbounds i16, ptr [[TMP4]], i32 [[N57_0151]]
; CHECK-NEXT:    [[TMP18:%.*]] = load i16, ptr [[ARRAYIDX71]], align 2
; CHECK-NEXT:    [[CONV72:%.*]] = sext i16 [[TMP18]] to i32
; CHECK-NEXT:    [[MUL73:%.*]] = mul nsw i32 [[CONV72]], [[CONV69]]
; CHECK-NEXT:    [[CONV74:%.*]] = sext i32 [[MUL73]] to i64
; CHECK-NEXT:    [[ADD75]] = add nsw i64 [[ACC_1149]], [[CONV74]]
; CHECK-NEXT:    [[INC77]] = add nuw nsw i32 [[N57_0151]], 1
; CHECK-NEXT:    [[EXITCOND159_NOT:%.*]] = icmp eq i32 [[INC77]], [[CONV39]]
; CHECK-NEXT:    br i1 [[EXITCOND159_NOT]], label [[FOR_COND_CLEANUP63]], label [[FOR_BODY64]]
;
entry:
  %shift = getelementptr inbounds %struct.fir_s16_s, ptr %fir, i32 0, i32 6
  %0 = load i16, ptr %shift, align 4
  %conv = sext i16 %0 to i32
  %sub = add nsw i32 %conv, -15
  %rounding_val = getelementptr inbounds %struct.fir_s16_s, ptr %fir, i32 0, i32 8
  %1 = load i32, ptr %rounding_val, align 4
  %conv1 = sext i32 %1 to i64
  %cmp = icmp sgt i16 %0, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %sh_prom = zext nneg i32 %conv to i64
  %shr = ashr i64 %conv1, %sh_prom
  br label %if.end

if.else:                                          ; preds = %entry
  %sub9 = sub nsw i32 0, %conv
  %sh_prom10 = zext nneg i32 %sub9 to i64
  %shl = shl i64 %conv1, %sh_prom10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %rounding.0.in = phi i64 [ %shr, %if.then ], [ %shl, %if.else ]
  %rounding.0 = and i64 %rounding.0.in, 1099511627775
  %cmp12153 = icmp sgt i32 %len, 0
  br i1 %cmp12153, label %for.cond14.preheader.lr.ph, label %for.cond.cleanup

for.cond14.preheader.lr.ph:                       ; preds = %if.end
  %decim = getelementptr inbounds %struct.fir_s16_s, ptr %fir, i32 0, i32 4
  %d_pos = getelementptr inbounds %struct.fir_s16_s, ptr %fir, i32 0, i32 5
  %pos = getelementptr inbounds %struct.fir_s16_s, ptr %fir, i32 0, i32 3
  %coeffs_len = getelementptr inbounds %struct.fir_s16_s, ptr %fir, i32 0, i32 2
  %delay = getelementptr inbounds %struct.fir_s16_s, ptr %fir, i32 0, i32 1
  %cmp79 = icmp sgt i16 %0, 15
  %sub88 = sub nsw i32 15, %conv
  %sh_prom89 = zext nneg i32 %sub88 to i64
  %sh_prom82 = zext nneg i32 %sub to i64
  br label %for.cond14.preheader

for.cond14.preheader:                             ; preds = %for.cond14.preheader.lr.ph, %for.cond.cleanup63
  %i.0156 = phi i32 [ 0, %for.cond14.preheader.lr.ph ], [ %inc96, %for.cond.cleanup63 ]
  %input_pos.0154 = phi i32 [ 0, %for.cond14.preheader.lr.ph ], [ %input_pos.1.lcssa, %for.cond.cleanup63 ]
  %2 = load i16, ptr %decim, align 4
  %3 = load i16, ptr %d_pos, align 2
  %cmp18138 = icmp sgt i16 %2, %3
  br i1 %cmp18138, label %for.body21.lr.ph, label %for.cond.cleanup20

for.body21.lr.ph:                                 ; preds = %for.cond14.preheader
  %4 = load ptr, ptr %delay, align 4
  br label %for.body21

for.cond.cleanup:                                 ; preds = %for.cond.cleanup63, %if.end
  %result.0.lcssa = phi i32 [ 0, %if.end ], [ %len, %for.cond.cleanup63 ]
  ret i32 %result.0.lcssa

for.cond.cleanup20:                               ; preds = %if.end28, %for.cond14.preheader
  %input_pos.1.lcssa = phi i32 [ %input_pos.0154, %for.cond14.preheader ], [ %inc, %if.end28 ]
  store i16 0, ptr %d_pos, align 2
  %5 = load i16, ptr %coeffs_len, align 4
  %6 = load i16, ptr %pos, align 2
  %conv39 = sext i16 %6 to i32
  %conv42 = sext i16 %5 to i32
  %coeff_pos.0141 = add i16 %5, -1
  %cmp43142 = icmp slt i16 %6, %5
  br i1 %cmp43142, label %for.body46.lr.ph, label %for.cond58.preheader

for.body46.lr.ph:                                 ; preds = %for.cond.cleanup20
  %7 = load ptr, ptr %fir, align 4
  %8 = load ptr, ptr %delay, align 4
  br label %for.body46

for.body21:                                       ; preds = %for.body21.lr.ph, %if.end28
  %j.0140 = phi i32 [ 0, %for.body21.lr.ph ], [ %inc32, %if.end28 ]
  %input_pos.1139 = phi i32 [ %input_pos.0154, %for.body21.lr.ph ], [ %inc, %if.end28 ]
  %9 = load i16, ptr %pos, align 2
  %10 = load i16, ptr %coeffs_len, align 4
  %cmp24.not = icmp slt i16 %9, %10
  br i1 %cmp24.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %for.body21
  store i16 0, ptr %pos, align 2
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.body21
  %11 = phi i16 [ 0, %if.then26 ], [ %9, %for.body21 ]
  %inc = add nsw i32 %input_pos.1139, 1
  %arrayidx = getelementptr inbounds i16, ptr %input, i32 %input_pos.1139
  %12 = load i16, ptr %arrayidx, align 2
  %inc30 = add nsw i16 %11, 1
  store i16 %inc30, ptr %pos, align 2
  %idxprom = sext i16 %11 to i32
  %arrayidx31 = getelementptr inbounds i16, ptr %4, i32 %idxprom
  store i16 %12, ptr %arrayidx31, align 2
  %inc32 = add nuw nsw i32 %j.0140, 1
  %13 = load i16, ptr %decim, align 4
  %conv15 = sext i16 %13 to i32
  %14 = load i16, ptr %d_pos, align 2
  %conv16 = sext i16 %14 to i32
  %sub17 = sub nsw i32 %conv15, %conv16
  %cmp18 = icmp slt i32 %inc32, %sub17
  br i1 %cmp18, label %for.body21, label %for.cond.cleanup20

for.cond58.preheader.loopexit:                    ; preds = %for.body46
  %15 = add i16 %6, -1
  br label %for.cond58.preheader

for.cond58.preheader:                             ; preds = %for.cond58.preheader.loopexit, %for.cond.cleanup20
  %acc.0.lcssa = phi i64 [ %rounding.0, %for.cond.cleanup20 ], [ %add, %for.cond58.preheader.loopexit ]
  %coeff_pos.0.lcssa = phi i16 [ %coeff_pos.0141, %for.cond.cleanup20 ], [ %15, %for.cond58.preheader.loopexit ]
  %cmp61148 = icmp sgt i16 %6, 0
  br i1 %cmp61148, label %for.body64.lr.ph, label %for.cond.cleanup63

for.body64.lr.ph:                                 ; preds = %for.cond58.preheader
  %16 = load ptr, ptr %fir, align 4
  %17 = load ptr, ptr %delay, align 4
  br label %for.body64

for.body46:                                       ; preds = %for.body46.lr.ph, %for.body46
  %coeff_pos.0145 = phi i16 [ %coeff_pos.0141, %for.body46.lr.ph ], [ %coeff_pos.0, %for.body46 ]
  %n.0144 = phi i32 [ %conv39, %for.body46.lr.ph ], [ %inc55, %for.body46 ]
  %acc.0143 = phi i64 [ %rounding.0, %for.body46.lr.ph ], [ %add, %for.body46 ]
  %idxprom47 = sext i16 %coeff_pos.0145 to i32
  %arrayidx48 = getelementptr inbounds i16, ptr %7, i32 %idxprom47
  %18 = load i16, ptr %arrayidx48, align 2
  %conv49 = sext i16 %18 to i32
  %arrayidx51 = getelementptr inbounds i16, ptr %8, i32 %n.0144
  %19 = load i16, ptr %arrayidx51, align 2
  %conv52 = sext i16 %19 to i32
  %mul = mul nsw i32 %conv52, %conv49
  %conv53 = sext i32 %mul to i64
  %add = add nsw i64 %acc.0143, %conv53
  %inc55 = add nsw i32 %n.0144, 1
  %coeff_pos.0 = add i16 %coeff_pos.0145, -1
  %exitcond.not = icmp eq i32 %inc55, %conv42
  br i1 %exitcond.not, label %for.cond58.preheader.loopexit, label %for.body46

for.cond.cleanup63:                               ; preds = %for.body64, %for.cond58.preheader
  %acc.1.lcssa = phi i64 [ %acc.0.lcssa, %for.cond58.preheader ], [ %add75, %for.body64 ]
  %shr90 = ashr i64 %acc.1.lcssa, %sh_prom89
  %shl83 = shl i64 %acc.1.lcssa, %sh_prom82
  %shr90.sink = select i1 %cmp79, i64 %shl83, i64 %shr90
  %conv91 = trunc i64 %shr90.sink to i16
  %20 = getelementptr inbounds i16, ptr %output, i32 %i.0156
  store i16 %conv91, ptr %20, align 2
  %inc96 = add nuw nsw i32 %i.0156, 1
  %exitcond160.not = icmp eq i32 %inc96, %len
  br i1 %exitcond160.not, label %for.cond.cleanup, label %for.cond14.preheader

for.body64:                                       ; preds = %for.body64.lr.ph, %for.body64
  %n57.0151 = phi i32 [ 0, %for.body64.lr.ph ], [ %inc77, %for.body64 ]
  %coeff_pos.1150 = phi i16 [ %coeff_pos.0.lcssa, %for.body64.lr.ph ], [ %dec66, %for.body64 ]
  %acc.1149 = phi i64 [ %acc.0.lcssa, %for.body64.lr.ph ], [ %add75, %for.body64 ]
  %dec66 = add i16 %coeff_pos.1150, -1
  %idxprom67 = sext i16 %coeff_pos.1150 to i32
  %arrayidx68 = getelementptr inbounds i16, ptr %16, i32 %idxprom67
  %21 = load i16, ptr %arrayidx68, align 2
  %conv69 = sext i16 %21 to i32
  %arrayidx71 = getelementptr inbounds i16, ptr %17, i32 %n57.0151
  %22 = load i16, ptr %arrayidx71, align 2
  %conv72 = sext i16 %22 to i32
  %mul73 = mul nsw i32 %conv72, %conv69
  %conv74 = sext i32 %mul73 to i64
  %add75 = add nsw i64 %acc.1149, %conv74
  %inc77 = add nuw nsw i32 %n57.0151, 1
  %exitcond159.not = icmp eq i32 %inc77, %conv39
  br i1 %exitcond159.not, label %for.cond.cleanup63, label %for.body64
}

