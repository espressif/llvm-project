; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-custom-licm -riscv-custom-licm=true < %s | FileCheck %s

@dsps_fft2r_initialized = external dso_local local_unnamed_addr global i8, align 1

; Function Attrs: nounwind
define dso_local noundef i32 @dsps_fft2r_fc32_ansi(ptr nocapture noundef %data, i32 noundef %N, ptr nocapture noundef readonly %w) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dsps_fft2r_fc32_ansi(
; CHECK-SAME: ptr noundef captures(none) [[DATA:%.*]], i32 noundef [[N:%.*]], ptr noundef readonly captures(none) [[W:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = tail call zeroext i1 @dsp_is_power_of_two(i32 noundef [[N]])
; CHECK-NEXT:    br i1 [[CALL]], label [[IF_END:%.*]], label [[RETURN:%.*]]
; CHECK:       if.end:
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr @dsps_fft2r_initialized, align 1
; CHECK-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; CHECK-NEXT:    br i1 [[TOBOOL_NOT]], label [[RETURN]], label [[IF_END2:%.*]]
; CHECK:       if.end2:
; CHECK-NEXT:    [[CMP103:%.*]] = icmp sgt i32 [[N]], 1
; CHECK-NEXT:    br i1 [[CMP103]], label [[FOR_COND3_PREHEADER:%.*]], label [[RETURN]]
; CHECK:       for.cond3.preheader:
; CHECK-NEXT:    [[N2_0105_IN:%.*]] = phi i32 [ [[N2_0105:%.*]], [[FOR_COND_CLEANUP5:%.*]] ], [ [[N]], [[IF_END2]] ]
; CHECK-NEXT:    [[IE_0104:%.*]] = phi i32 [ [[SHL:%.*]], [[FOR_COND_CLEANUP5]] ], [ 1, [[IF_END2]] ]
; CHECK-NEXT:    [[N2_0105]] = lshr i32 [[N2_0105_IN]], 1
; CHECK-NEXT:    [[CMP4100:%.*]] = icmp sgt i32 [[IE_0104]], 0
; CHECK-NEXT:    br i1 [[CMP4100]], label [[FOR_BODY6_LR_PH:%.*]], label [[FOR_COND_CLEANUP5]]
; CHECK:       for.body6.lr.ph:
; CHECK-NEXT:    [[CMP1097_NOT:%.*]] = icmp samesign ult i32 [[N2_0105_IN]], 2
; CHECK-NEXT:    br label [[FOR_BODY6:%.*]]
; CHECK:       for.cond.cleanup5:
; CHECK-NEXT:    [[SHL]] = shl i32 [[IE_0104]], 1
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp samesign ult i32 [[N2_0105_IN]], 4
; CHECK-NEXT:    br i1 [[CMP_NOT]], label [[RETURN]], label [[FOR_COND3_PREHEADER]]
; CHECK:       for.body6:
; CHECK-NEXT:    [[J_0102:%.*]] = phi i32 [ 0, [[FOR_BODY6_LR_PH]] ], [ [[INC54:%.*]], [[FOR_COND_CLEANUP11:%.*]] ]
; CHECK-NEXT:    [[IA_0101:%.*]] = phi i32 [ 0, [[FOR_BODY6_LR_PH]] ], [ [[ADD52:%.*]], [[FOR_COND_CLEANUP11]] ]
; CHECK-NEXT:    [[MUL:%.*]] = shl nuw nsw i32 [[J_0102]], 1
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw float, ptr [[W]], i32 [[MUL]]
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = or disjoint i32 [[MUL]], 1
; CHECK-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds nuw float, ptr [[W]], i32 [[ADD]]
; CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; CHECK-NEXT:    br i1 [[CMP1097_NOT]], label [[FOR_COND_CLEANUP11]], label [[FOR_BODY12_LR_PH:%.*]]
; CHECK:       for.body12.preheader:
; CHECK-NEXT:    [[NEG_:%.*]] = fneg float [[TMP2]]
; CHECK-NEXT:    br label [[FOR_BODY12:%.*]]
; CHECK:       for.cond.cleanup11:
; CHECK-NEXT:    [[IA_1_LCSSA:%.*]] = phi i32 [ [[IA_0101]], [[FOR_BODY6]] ], [ [[INC:%.*]], [[FOR_BODY12]] ]
; CHECK-NEXT:    [[ADD52]] = add nsw i32 [[IA_1_LCSSA]], [[N2_0105]]
; CHECK-NEXT:    [[INC54]] = add nuw nsw i32 [[J_0102]], 1
; CHECK-NEXT:    [[EXITCOND106_NOT:%.*]] = icmp eq i32 [[INC54]], [[IE_0104]]
; CHECK-NEXT:    br i1 [[EXITCOND106_NOT]], label [[FOR_COND_CLEANUP5]], label [[FOR_BODY6]]
; CHECK:       for.body12:
; CHECK-NEXT:    [[I_099:%.*]] = phi i32 [ [[INC51:%.*]], [[FOR_BODY12]] ], [ 0, [[FOR_BODY12_LR_PH]] ]
; CHECK-NEXT:    [[IA_198:%.*]] = phi i32 [ [[INC]], [[FOR_BODY12]] ], [ [[IA_0101]], [[FOR_BODY12_LR_PH]] ]
; CHECK-NEXT:    [[ADD13:%.*]] = add nsw i32 [[IA_198]], [[N2_0105]]
; CHECK-NEXT:    [[INC]] = add nsw i32 [[IA_198]], 1
; CHECK-NEXT:    [[INC51]] = add nuw nsw i32 [[I_099]], 1
; CHECK-NEXT:    [[MUL14:%.*]] = shl nsw i32 [[ADD13]], 1
; CHECK-NEXT:    [[MUL28:%.*]] = shl nsw i32 [[IA_198]], 1
; CHECK-NEXT:    [[ADD18:%.*]] = or disjoint i32 [[MUL14]], 1
; CHECK-NEXT:    [[ADD33:%.*]] = or disjoint i32 [[MUL28]], 1
; CHECK-NEXT:    [[ARRAYIDX19:%.*]] = getelementptr inbounds float, ptr [[DATA]], i32 [[MUL14]]
; CHECK-NEXT:    [[ARRAYIDX29:%.*]] = getelementptr inbounds float, ptr [[DATA]], i32 [[ADD18]]
; CHECK-NEXT:    [[ARRAYIDX34:%.*]] = getelementptr inbounds float, ptr [[DATA]], i32 [[MUL28]]
; CHECK-NEXT:    [[ARRAYIDX35:%.*]] = getelementptr inbounds float, ptr [[DATA]], i32 [[ADD33]]
; CHECK-NEXT:    [[TMP5:%.*]] = load float, ptr [[ARRAYIDX19]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX29]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = load float, ptr [[ARRAYIDX34]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = load float, ptr [[ARRAYIDX35]], align 4
; CHECK-NEXT:    [[NEG:%.*]] = fmul float [[TMP2]], [[TMP4]]
; CHECK-NEXT:    [[NEG1:%.*]] = fmul float [[TMP5]], [[NEG_]]
; CHECK-NEXT:    [[TMP7:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP1]], float [[TMP5]], float [[NEG]])
; CHECK-NEXT:    [[TMP10:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP1]], float [[TMP4]], float [[NEG1]])
; CHECK-NEXT:    [[ADD47:%.*]] = fadd float [[TMP9]], [[TMP7]]
; CHECK-NEXT:    [[ADD48:%.*]] = fadd float [[TMP10]], [[TMP6]]
; CHECK-NEXT:    [[SUB35:%.*]] = fsub float [[TMP9]], [[TMP7]]
; CHECK-NEXT:    [[ADD41:%.*]] = fsub float [[TMP6]], [[TMP10]]
; CHECK-NEXT:    store float [[SUB35]], ptr [[ARRAYIDX19]], align 4
; CHECK-NEXT:    store float [[ADD41]], ptr [[ARRAYIDX29]], align 4
; CHECK-NEXT:    store float [[ADD47]], ptr [[ARRAYIDX34]], align 4
; CHECK-NEXT:    store float [[ADD48]], ptr [[ARRAYIDX35]], align 4
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC51]], [[N2_0105]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP11]], label [[FOR_BODY12]]
; CHECK:       return:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ 458753, [[ENTRY:%.*]] ], [ 458756, [[IF_END]] ], [ 0, [[IF_END2]] ], [ 0, [[FOR_COND_CLEANUP5]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0]]
;
entry:
  %call = tail call zeroext i1 @dsp_is_power_of_two(i32 noundef %N)
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %0 = load i8, ptr @dsps_fft2r_initialized, align 1
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %return, label %if.end2

if.end2:                                          ; preds = %if.end
  %cmp103 = icmp sgt i32 %N, 1
  br i1 %cmp103, label %for.cond3.preheader, label %return

for.cond3.preheader:                              ; preds = %for.cond.cleanup5, %if.end2
  %N2.0105.in = phi i32 [ %N2.0105, %for.cond.cleanup5 ], [ %N, %if.end2 ]
  %ie.0104 = phi i32 [ %shl, %for.cond.cleanup5 ], [ 1, %if.end2 ]
  %N2.0105 = lshr i32 %N2.0105.in, 1
  %cmp4100 = icmp sgt i32 %ie.0104, 0
  br i1 %cmp4100, label %for.body6.lr.ph, label %for.cond.cleanup5

for.body6.lr.ph:                                  ; preds = %for.cond3.preheader
  %cmp1097.not = icmp samesign ult i32 %N2.0105.in, 2
  br label %for.body6

for.cond.cleanup5:                                ; preds = %for.cond.cleanup11, %for.cond3.preheader
  %shl = shl i32 %ie.0104, 1
  %cmp.not = icmp samesign ult i32 %N2.0105.in, 4
  br i1 %cmp.not, label %return, label %for.cond3.preheader

for.body6:                                        ; preds = %for.cond.cleanup11, %for.body6.lr.ph
  %j.0102 = phi i32 [ 0, %for.body6.lr.ph ], [ %inc54, %for.cond.cleanup11 ]
  %ia.0101 = phi i32 [ 0, %for.body6.lr.ph ], [ %add52, %for.cond.cleanup11 ]
  %mul = shl nuw nsw i32 %j.0102, 1
  %arrayidx = getelementptr inbounds nuw float, ptr %w, i32 %mul
  %1 = load float, ptr %arrayidx, align 4
  %add = or disjoint i32 %mul, 1
  %arrayidx8 = getelementptr inbounds nuw float, ptr %w, i32 %add
  %2 = load float, ptr %arrayidx8, align 4
  br i1 %cmp1097.not, label %for.cond.cleanup11, label %for.body12

for.cond.cleanup11:                               ; preds = %for.body12, %for.body6
  %ia.1.lcssa = phi i32 [ %ia.0101, %for.body6 ], [ %inc, %for.body12 ]
  %add52 = add nsw i32 %ia.1.lcssa, %N2.0105
  %inc54 = add nuw nsw i32 %j.0102, 1
  %exitcond106.not = icmp eq i32 %inc54, %ie.0104
  br i1 %exitcond106.not, label %for.cond.cleanup5, label %for.body6

for.body12:                                       ; preds = %for.body12, %for.body6
  %i.099 = phi i32 [ %inc51, %for.body12 ], [ 0, %for.body6 ]
  %ia.198 = phi i32 [ %inc, %for.body12 ], [ %ia.0101, %for.body6 ]
  %add13 = add nsw i32 %ia.198, %N2.0105
  %mul14 = shl nsw i32 %add13, 1
  %arrayidx15 = getelementptr inbounds float, ptr %data, i32 %mul14
  %3 = load float, ptr %arrayidx15, align 4
  %add18 = or disjoint i32 %mul14, 1
  %arrayidx19 = getelementptr inbounds float, ptr %data, i32 %add18
  %4 = load float, ptr %arrayidx19, align 4
  %mul20 = fmul float %2, %4
  %5 = tail call float @llvm.fmuladd.f32(float %1, float %3, float %mul20)
  %6 = fneg float %3
  %neg = fmul float %2, %6
  %7 = tail call float @llvm.fmuladd.f32(float %1, float %4, float %neg)
  %mul28 = shl nsw i32 %ia.198, 1
  %arrayidx29 = getelementptr inbounds float, ptr %data, i32 %mul28
  %8 = load float, ptr %arrayidx29, align 4
  %sub = fsub float %8, %5
  store float %sub, ptr %arrayidx15, align 4
  %add33 = or disjoint i32 %mul28, 1
  %arrayidx34 = getelementptr inbounds float, ptr %data, i32 %add33
  %9 = load float, ptr %arrayidx34, align 4
  %sub35 = fsub float %9, %7
  store float %sub35, ptr %arrayidx19, align 4
  %add41 = fadd float %8, %5
  store float %add41, ptr %arrayidx29, align 4
  %add47 = fadd float %7, %9
  store float %add47, ptr %arrayidx34, align 4
  %inc = add nsw i32 %ia.198, 1
  %inc51 = add nuw nsw i32 %i.099, 1
  %exitcond.not = icmp eq i32 %inc51, %N2.0105
  br i1 %exitcond.not, label %for.cond.cleanup11, label %for.body12

return:                                           ; preds = %for.cond.cleanup5, %if.end2, %if.end, %entry
  %retval.0 = phi i32 [ 458753, %entry ], [ 458756, %if.end ], [ 0, %if.end2 ], [ 0, %for.cond.cleanup5 ]
  ret i32 %retval.0
}


; Function Attrs: nounwind
define dso_local range(i32 0, 458757) i32 @dsps_fft2r_fc32_ansi_2(ptr nocapture noundef %data, i32 noundef %N, ptr nocapture noundef readonly %w) local_unnamed_addr #0 {
; CHECK-LABEL: define dso_local range(i32 0, 458757) i32 @dsps_fft2r_fc32_ansi_2(
; CHECK-SAME: ptr noundef captures(none) [[DATA:%.*]], i32 noundef [[N:%.*]], ptr noundef readonly captures(none) [[W:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = tail call zeroext i1 @dsp_is_power_of_two(i32 noundef [[N]])
; CHECK-NEXT:    br i1 [[CALL]], label [[IF_END:%.*]], label [[RETURN:%.*]]
; CHECK:       if.end:
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr @dsps_fft2r_initialized, align 1
; CHECK-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i8 [[TMP0]], 0
; CHECK-NEXT:    br i1 [[TOBOOL_NOT]], label [[RETURN]], label [[IF_END2:%.*]]
; CHECK:       if.end2:
; CHECK-NEXT:    [[CMP103:%.*]] = icmp sgt i32 [[N]], 1
; CHECK-NEXT:    br i1 [[CMP103]], label [[FOR_COND3_PREHEADER:%.*]], label [[RETURN]]
; CHECK:       for.cond3.preheader:
; CHECK-NEXT:    [[N2_0105_IN:%.*]] = phi i32 [ [[N2_0105:%.*]], [[FOR_COND_CLEANUP5:%.*]] ], [ [[N]], [[IF_END2]] ]
; CHECK-NEXT:    [[IE_0104:%.*]] = phi i32 [ [[SHL:%.*]], [[FOR_COND_CLEANUP5]] ], [ 1, [[IF_END2]] ]
; CHECK-NEXT:    [[N2_0105]] = lshr i32 [[N2_0105_IN]], 1
; CHECK-NEXT:    [[CMP4100:%.*]] = icmp sgt i32 [[IE_0104]], 0
; CHECK-NEXT:    br i1 [[CMP4100]], label [[FOR_BODY6_LR_PH:%.*]], label [[FOR_COND_CLEANUP5]]
; CHECK:       for.body6.lr.ph:
; CHECK-NEXT:    [[CMP1097_NOT:%.*]] = icmp samesign ult i32 [[N2_0105_IN]], 2
; CHECK-NEXT:    br label [[FOR_BODY6:%.*]]
; CHECK:       for.cond.cleanup5:
; CHECK-NEXT:    [[SHL]] = shl i32 [[IE_0104]], 1
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp samesign ult i32 [[N2_0105_IN]], 4
; CHECK-NEXT:    br i1 [[CMP_NOT]], label [[RETURN]], label [[FOR_COND3_PREHEADER]]
; CHECK:       for.body6:
; CHECK-NEXT:    [[J_0102:%.*]] = phi i32 [ 0, [[FOR_BODY6_LR_PH]] ], [ [[INC54:%.*]], [[FOR_COND_CLEANUP11:%.*]] ]
; CHECK-NEXT:    [[IA_0101:%.*]] = phi i32 [ 0, [[FOR_BODY6_LR_PH]] ], [ [[ADD52:%.*]], [[FOR_COND_CLEANUP11]] ]
; CHECK-NEXT:    [[MUL:%.*]] = shl nuw nsw i32 [[J_0102]], 1
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw float, ptr [[W]], i32 [[MUL]]
; CHECK-NEXT:    [[TMP1:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = or disjoint i32 [[MUL]], 1
; CHECK-NEXT:    [[ARRAYIDX8:%.*]] = getelementptr inbounds nuw float, ptr [[W]], i32 [[ADD]]
; CHECK-NEXT:    [[TMP2:%.*]] = load float, ptr [[ARRAYIDX8]], align 4
; CHECK-NEXT:    br i1 [[CMP1097_NOT]], label [[FOR_COND_CLEANUP11]], label [[FOR_BODY12_PREHEADER:%.*]]
; CHECK:       for.body12.preheader:
; CHECK-NEXT:    [[NEG_:%.*]] = fneg float [[TMP2]]
; CHECK-NEXT:    br label [[FOR_BODY12:%.*]]
; CHECK:       for.cond.cleanup11:
; CHECK-NEXT:    [[IA_1_LCSSA:%.*]] = phi i32 [ [[IA_0101]], [[FOR_BODY6]] ], [ [[INC:%.*]], [[FOR_BODY12]] ]
; CHECK-NEXT:    [[ADD52]] = add nsw i32 [[IA_1_LCSSA]], [[N2_0105]]
; CHECK-NEXT:    [[INC54]] = add nuw nsw i32 [[J_0102]], 1
; CHECK-NEXT:    [[EXITCOND106_NOT:%.*]] = icmp eq i32 [[INC54]], [[IE_0104]]
; CHECK-NEXT:    br i1 [[EXITCOND106_NOT]], label [[FOR_COND_CLEANUP5]], label [[FOR_BODY6]]
; CHECK:       for.body12:
; CHECK-NEXT:    [[I_099:%.*]] = phi i32 [ [[INC51:%.*]], [[FOR_BODY12]] ], [ 0, [[FOR_BODY12_PREHEADER]] ]
; CHECK-NEXT:    [[IA_198:%.*]] = phi i32 [ [[INC]], [[FOR_BODY12]] ], [ [[IA_0101]], [[FOR_BODY12_PREHEADER]] ]
; CHECK-NEXT:    [[ADD13:%.*]] = add nsw i32 [[IA_198]], [[N2_0105]]
; CHECK-NEXT:    [[INC]] = add nsw i32 [[IA_198]], 1
; CHECK-NEXT:    [[INC51]] = add nuw nsw i32 [[I_099]], 1
; CHECK-NEXT:    [[MUL14:%.*]] = shl nsw i32 [[ADD13]], 1
; CHECK-NEXT:    [[MUL28:%.*]] = shl nsw i32 [[IA_198]], 1
; CHECK-NEXT:    [[ADD18:%.*]] = or disjoint i32 [[MUL14]], 1
; CHECK-NEXT:    [[ADD33:%.*]] = or disjoint i32 [[MUL28]], 1
; CHECK-NEXT:    [[ARRAYIDX15:%.*]] = getelementptr inbounds float, ptr [[DATA]], i32 [[MUL14]]
; CHECK-NEXT:    [[ARRAYIDX19:%.*]] = getelementptr inbounds float, ptr [[DATA]], i32 [[ADD18]]
; CHECK-NEXT:    [[ARRAYIDX29:%.*]] = getelementptr inbounds float, ptr [[DATA]], i32 [[MUL28]]
; CHECK-NEXT:    [[ARRAYIDX34:%.*]] = getelementptr inbounds float, ptr [[DATA]], i32 [[ADD33]]
; CHECK-NEXT:    [[TMP3:%.*]] = load float, ptr [[ARRAYIDX15]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[ARRAYIDX19]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = load float, ptr [[ARRAYIDX29]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = load float, ptr [[ARRAYIDX34]], align 4
; CHECK-NEXT:    [[MUL20:%.*]] = fmul float [[TMP2]], [[TMP4]]
; CHECK-NEXT:    [[REARRANGED_MUL:%.*]] = fmul float [[TMP3]], [[NEG_]]
; CHECK-NEXT:    [[TMP7:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP1]], float [[TMP3]], float [[MUL20]])
; CHECK-NEXT:    [[TMP8:%.*]] = tail call float @llvm.fmuladd.f32(float [[TMP1]], float [[TMP4]], float [[REARRANGED_MUL]])
; CHECK-NEXT:    [[ADD41:%.*]] = fadd float [[TMP5]], [[TMP7]]
; CHECK-NEXT:    [[ADD47:%.*]] = fadd float [[TMP8]], [[TMP6]]
; CHECK-NEXT:    [[SUB:%.*]] = fsub float [[TMP5]], [[TMP7]]
; CHECK-NEXT:    [[SUB35:%.*]] = fsub float [[TMP6]], [[TMP8]]
; CHECK-NEXT:    store float [[SUB]], ptr [[ARRAYIDX15]], align 4
; CHECK-NEXT:    store float [[SUB35]], ptr [[ARRAYIDX19]], align 4
; CHECK-NEXT:    store float [[ADD41]], ptr [[ARRAYIDX29]], align 4
; CHECK-NEXT:    store float [[ADD47]], ptr [[ARRAYIDX34]], align 4
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC51]], [[N2_0105]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND_CLEANUP11]], label [[FOR_BODY12]]
; CHECK:       return:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i32 [ 458753, [[ENTRY:%.*]] ], [ 458756, [[IF_END]] ], [ 0, [[IF_END2]] ], [ 0, [[FOR_COND_CLEANUP5]] ]
; CHECK-NEXT:    ret i32 [[RETVAL_0]]
;
entry:
  %call = tail call zeroext i1 @dsp_is_power_of_two(i32 noundef %N)
  br i1 %call, label %if.end, label %return

if.end:                                           ; preds = %entry
  %0 = load i8, ptr @dsps_fft2r_initialized, align 1
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %return, label %if.end2

if.end2:                                          ; preds = %if.end
  %cmp103 = icmp sgt i32 %N, 1
  br i1 %cmp103, label %for.cond3.preheader, label %return

for.cond3.preheader:                              ; preds = %for.cond.cleanup5, %if.end2
  %N2.0105.in = phi i32 [ %N2.0105, %for.cond.cleanup5 ], [ %N, %if.end2 ]
  %ie.0104 = phi i32 [ %shl, %for.cond.cleanup5 ], [ 1, %if.end2 ]
  %N2.0105 = lshr i32 %N2.0105.in, 1
  %cmp4100 = icmp sgt i32 %ie.0104, 0
  br i1 %cmp4100, label %for.body6.lr.ph, label %for.cond.cleanup5

for.body6.lr.ph:                                  ; preds = %for.cond3.preheader
  %cmp1097.not = icmp samesign ult i32 %N2.0105.in, 2
  br label %for.body6

for.cond.cleanup5:                                ; preds = %for.cond.cleanup11, %for.cond3.preheader
  %shl = shl i32 %ie.0104, 1
  %cmp.not = icmp samesign ult i32 %N2.0105.in, 4
  br i1 %cmp.not, label %return, label %for.cond3.preheader

for.body6:                                        ; preds = %for.cond.cleanup11, %for.body6.lr.ph
  %j.0102 = phi i32 [ 0, %for.body6.lr.ph ], [ %inc54, %for.cond.cleanup11 ]
  %ia.0101 = phi i32 [ 0, %for.body6.lr.ph ], [ %add52, %for.cond.cleanup11 ]
  %mul = shl nuw nsw i32 %j.0102, 1
  %arrayidx = getelementptr inbounds nuw float, ptr %w, i32 %mul
  %1 = load float, ptr %arrayidx, align 4
  %add = or disjoint i32 %mul, 1
  %arrayidx8 = getelementptr inbounds nuw float, ptr %w, i32 %add
  %2 = load float, ptr %arrayidx8, align 4
  br i1 %cmp1097.not, label %for.cond.cleanup11, label %for.body12

for.cond.cleanup11:                               ; preds = %for.body12, %for.body6
  %ia.1.lcssa = phi i32 [ %ia.0101, %for.body6 ], [ %inc, %for.body12 ]
  %add52 = add nsw i32 %ia.1.lcssa, %N2.0105
  %inc54 = add nuw nsw i32 %j.0102, 1
  %exitcond106.not = icmp eq i32 %inc54, %ie.0104
  br i1 %exitcond106.not, label %for.cond.cleanup5, label %for.body6

for.body12:                                       ; preds = %for.body12, %for.body6
  %i.099 = phi i32 [ %inc51, %for.body12 ], [ 0, %for.body6 ]
  %ia.198 = phi i32 [ %inc, %for.body12 ], [ %ia.0101, %for.body6 ]
  %add13 = add nsw i32 %ia.198, %N2.0105
  %mul14 = shl nsw i32 %add13, 1
  %arrayidx15 = getelementptr inbounds float, ptr %data, i32 %mul14
  %3 = load float, ptr %arrayidx15, align 4
  %add18 = or disjoint i32 %mul14, 1
  %arrayidx19 = getelementptr inbounds float, ptr %data, i32 %add18
  %4 = load float, ptr %arrayidx19, align 4
  %mul20 = fmul float %2, %4
  %5 = tail call float @llvm.fmuladd.f32(float %1, float %3, float %mul20)
  %6 = fneg float %3
  %neg = fmul float %2, %6
  %7 = tail call float @llvm.fmuladd.f32(float %1, float %4, float %neg)
  %mul28 = shl nsw i32 %ia.198, 1
  %arrayidx29 = getelementptr inbounds float, ptr %data, i32 %mul28
  %8 = load float, ptr %arrayidx29, align 4
  %sub = fsub float %8, %5
  store float %sub, ptr %arrayidx15, align 4
  %add33 = or disjoint i32 %mul28, 1
  %arrayidx34 = getelementptr inbounds float, ptr %data, i32 %add33
  %9 = load float, ptr %arrayidx34, align 4
  %sub35 = fsub float %9, %7
  store float %sub35, ptr %arrayidx19, align 4
  %add41 = fadd float %8, %5
  store float %add41, ptr %arrayidx29, align 4
  %add47 = fadd float %7, %9
  store float %add47, ptr %arrayidx34, align 4
  %inc = add nsw i32 %ia.198, 1
  %inc51 = add nuw nsw i32 %i.099, 1
  %exitcond.not = icmp eq i32 %inc51, %N2.0105
  br i1 %exitcond.not, label %for.cond.cleanup11, label %for.body12

return:                                           ; preds = %for.cond.cleanup5, %if.end2, %if.end, %entry
  %retval.0 = phi i32 [ 458753, %entry ], [ 458756, %if.end ], [ 0, %if.end2 ], [ 0, %for.cond.cleanup5 ]
  ret i32 %retval.0
}


declare dso_local zeroext i1 @dsp_is_power_of_two(i32 noundef) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float)

