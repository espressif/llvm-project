; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-custom-licm -riscv-custom-licm=true < %s | FileCheck %s

%struct.image2d_s = type { ptr, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define dso_local noundef i32 @dspi_conv_f32_ansi(ptr nocapture noundef readonly %in_image, ptr nocapture noundef readonly %filter, ptr nocapture noundef %out_image) local_unnamed_addr {
; CHECK-LABEL: define dso_local noundef i32 @dspi_conv_f32_ansi(
; CHECK-SAME: ptr nocapture noundef readonly [[IN_IMAGE:%.*]], ptr nocapture noundef readonly [[FILTER:%.*]], ptr nocapture noundef [[OUT_IMAGE:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[SIZE_X:%.*]] = getelementptr inbounds nuw i8, ptr [[IN_IMAGE]], i32 20
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[SIZE_X]], align 4
; CHECK-NEXT:    [[SIZE_X1:%.*]] = getelementptr inbounds nuw i8, ptr [[OUT_IMAGE]], i32 20
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[SIZE_X1]], align 4
; CHECK-NEXT:    [[SIZE_Y:%.*]] = getelementptr inbounds nuw i8, ptr [[IN_IMAGE]], i32 24
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[SIZE_Y]], align 4
; CHECK-NEXT:    [[SIZE_Y2:%.*]] = getelementptr inbounds nuw i8, ptr [[OUT_IMAGE]], i32 24
; CHECK-NEXT:    store i32 [[TMP1]], ptr [[SIZE_Y2]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[IN_IMAGE]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[OUT_IMAGE]], align 4
; CHECK-NEXT:    [[SIZE_X4:%.*]] = getelementptr inbounds nuw i8, ptr [[FILTER]], i32 20
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[SIZE_X4]], align 4
; CHECK-NEXT:    [[SUB:%.*]] = add nsw i32 [[TMP4]], -1
; CHECK-NEXT:    [[SHR:%.*]] = ashr i32 [[SUB]], 1
; CHECK-NEXT:    [[SIZE_Y5:%.*]] = getelementptr inbounds nuw i8, ptr [[FILTER]], i32 24
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[SIZE_Y5]], align 4
; CHECK-NEXT:    [[SUB6:%.*]] = add nsw i32 [[TMP5]], -1
; CHECK-NEXT:    [[SHR7:%.*]] = ashr i32 [[SUB6]], 1
; CHECK-NEXT:    [[STRIDE_X:%.*]] = getelementptr inbounds nuw i8, ptr [[IN_IMAGE]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[STRIDE_X]], align 4
; CHECK-NEXT:    [[STEP_Y:%.*]] = getelementptr inbounds nuw i8, ptr [[IN_IMAGE]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[STEP_Y]], align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP7]], [[TMP6]]
; CHECK-NEXT:    [[STRIDE_X8:%.*]] = getelementptr inbounds nuw i8, ptr [[FILTER]], i32 12
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[STRIDE_X8]], align 4
; CHECK-NEXT:    [[STEP_Y9:%.*]] = getelementptr inbounds nuw i8, ptr [[FILTER]], i32 8
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[STEP_Y9]], align 4
; CHECK-NEXT:    [[MUL10:%.*]] = mul nsw i32 [[TMP9]], [[TMP8]]
; CHECK-NEXT:    [[CMP938:%.*]] = icmp sgt i32 [[SHR7]], 0
; CHECK-NEXT:    [[STEP_X29:%.*]] = getelementptr inbounds nuw i8, ptr [[FILTER]], i32 4
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[STEP_X29]], align 4
; CHECK-NEXT:    [[STEP_Y43:%.*]] = getelementptr inbounds nuw i8, ptr [[OUT_IMAGE]], i32 8
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, ptr [[STEP_Y43]], align 4
; CHECK-NEXT:    [[STRIDE_X41:%.*]] = getelementptr inbounds nuw i8, ptr [[OUT_IMAGE]], i32 12
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[STRIDE_X41]], align 4
; CHECK-NEXT:    [[STEP_X39:%.*]] = getelementptr inbounds nuw i8, ptr [[OUT_IMAGE]], i32 4
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[STEP_X39]], align 4
; CHECK-NEXT:    [[STEP_X:%.*]] = getelementptr inbounds nuw i8, ptr [[IN_IMAGE]], i32 4
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[STEP_X]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = load ptr, ptr [[FILTER]], align 4
; CHECK-NEXT:    [[DIV526_NEG:%.*]] = sdiv i32 [[TMP4]], -2
; CHECK-NEXT:    [[SUB527:%.*]] = add i32 [[TMP0]], [[DIV526_NEG]]
; CHECK-NEXT:    [[DIV332:%.*]] = sdiv i32 [[TMP5]], 2
; CHECK-NEXT:    [[SUB330:%.*]] = sub i32 [[DIV332]], [[TMP1]]
; CHECK-NEXT:    [[DIV469:%.*]] = sdiv i32 [[TMP4]], 2
; CHECK-NEXT:    [[SUB467:%.*]] = sub i32 [[DIV469]], [[TMP0]]
; CHECK-NEXT:    [[SUB240:%.*]] = add nsw i32 [[DIV526_NEG]], -1
; CHECK-NEXT:    [[SUB241:%.*]] = add i32 [[SUB240]], [[TMP0]]
; CHECK-NEXT:    [[SUB109:%.*]] = add nsw i32 [[SUB527]], -1
; CHECK-NEXT:    br i1 [[CMP938]], label [[FOR_COND11_PREHEADER_LR_PH:%.*]], label [[FOR_COND176_PREHEADER:%.*]]
; CHECK:       for.cond11.preheader.lr.ph:
; CHECK-NEXT:    [[CMP12901:%.*]] = icmp sgt i32 [[SHR]], 0
; CHECK-NEXT:    [[CMP55915:%.*]] = icmp slt i32 [[SHR]], [[SUB527]]
; CHECK-NEXT:    [[CMP72905:%.*]] = icmp sgt i32 [[TMP4]], 0
; CHECK-NEXT:    [[CMP112933_NOT:%.*]] = icmp sgt i32 [[SUB527]], [[TMP0]]
; CHECK-NEXT:    br label [[FOR_COND11_PREHEADER:%.*]]
; CHECK:       for.cond11.preheader:
; CHECK-NEXT:    [[Y_0940:%.*]] = phi i32 [ 0, [[FOR_COND11_PREHEADER_LR_PH]] ], [ [[INC173:%.*]], [[FOR_COND_CLEANUP113:%.*]] ]
; CHECK-NEXT:    [[I_POS_0939:%.*]] = phi i32 [ 0, [[FOR_COND11_PREHEADER_LR_PH]] ], [ [[ADD171:%.*]], [[FOR_COND_CLEANUP113]] ]
; CHECK-NEXT:    [[SUB16:%.*]] = sub nsw i32 [[SHR7]], [[Y_0940]]
; CHECK-NEXT:    [[MUL42:%.*]] = mul nsw i32 [[TMP12]], [[Y_0940]]
; CHECK-NEXT:    [[CMP19895:%.*]] = icmp slt i32 [[SUB16]], [[TMP5]]
; CHECK-NEXT:    [[MUL44:%.*]] = mul nsw i32 [[MUL42]], [[TMP11]]
; CHECK-NEXT:    [[INVARIANT_GEP:%.*]] = getelementptr float, ptr [[TMP3]], i32 [[MUL44]]
; CHECK-NEXT:    br i1 [[CMP12901]], label [[FOR_BODY14_LR_PH:%.*]], label [[FOR_COND51_PREHEADER:%.*]]
; CHECK:       for.body14.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY14:%.*]]
; CHECK:       for.cond176.preheader:
; CHECK-NEXT:    [[DIV179_NEG:%.*]] = sdiv i32 [[TMP5]], -2
; CHECK-NEXT:    [[SUB180:%.*]] = add i32 [[TMP1]], [[DIV179_NEG]]
; CHECK-NEXT:    [[CMP181973:%.*]] = icmp slt i32 [[SHR7]], [[SUB180]]
; CHECK-NEXT:    br i1 [[CMP181973]], label [[FOR_COND186_PREHEADER_LR_PH:%.*]], label [[FOR_COND311_PREHEADER:%.*]]
; CHECK:       for.cond186.preheader.lr.ph:
; CHECK-NEXT:    [[CMP187951:%.*]] = icmp sgt i32 [[SHR]], 0
; CHECK-NEXT:    [[CMP197945:%.*]] = icmp sgt i32 [[TMP5]], 0
; CHECK-NEXT:    [[CMP244967:%.*]] = icmp slt i32 [[SUB241]], [[TMP0]]
; CHECK-NEXT:    br label [[FOR_COND186_PREHEADER:%.*]]
; CHECK:       for.cond51.preheader:
; CHECK-NEXT:    [[I_POS_Y_0_LCSSA:%.*]] = phi i32 [ [[I_POS_0939]], [[FOR_COND11_PREHEADER]] ], [ [[ADD38:%.*]], [[FOR_COND_CLEANUP20:%.*]] ]
; CHECK-NEXT:    br i1 [[CMP55915]], label [[FOR_BODY57_LR_PH:%.*]], label [[FOR_COND_CLEANUP56:%.*]]
; CHECK:       for.body57.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY57:%.*]]
; CHECK:       for.body14:
; CHECK-NEXT:    [[X_0903:%.*]] = phi i32 [ 0, [[FOR_BODY14_LR_PH]] ], [ [[INC48:%.*]], [[FOR_COND_CLEANUP20]] ]
; CHECK-NEXT:    [[I_POS_Y_0902:%.*]] = phi i32 [ [[I_POS_0939]], [[FOR_BODY14_LR_PH]] ], [ [[ADD38]], [[FOR_COND_CLEANUP20]] ]
; CHECK-NEXT:    [[SUB22:%.*]] = sub nsw i32 [[SHR]], [[X_0903]]
; CHECK-NEXT:    [[CMP25892:%.*]] = icmp slt i32 [[SUB22]], [[TMP4]]
; CHECK-NEXT:    br i1 [[CMP19895]], label [[FOR_BODY21_LR_PH:%.*]], label [[FOR_COND_CLEANUP20]]
; CHECK:       for.body21.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY21:%.*]]
; CHECK:       for.cond.cleanup20:
; CHECK-NEXT:    [[ACC_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY14]] ], [ [[ACC_1_LCSSA:%.*]], [[FOR_COND_CLEANUP26:%.*]] ]
; CHECK-NEXT:    [[ADD38]] = add nsw i32 [[TMP14]], [[I_POS_Y_0902]]
; CHECK-NEXT:    [[MUL40:%.*]] = mul nsw i32 [[TMP13]], [[X_0903]]
; CHECK-NEXT:    [[GEP:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[MUL40]]
; CHECK-NEXT:    store float [[ACC_0_LCSSA]], ptr [[GEP]], align 4
; CHECK-NEXT:    [[INC48]] = add nuw nsw i32 [[X_0903]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC48]], [[SHR]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_COND51_PREHEADER]], label [[FOR_BODY14]]
; CHECK:       for.body21:
; CHECK-NEXT:    [[M_0899:%.*]] = phi i32 [ [[SUB16]], [[FOR_BODY21_LR_PH]] ], [ [[INC35:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[F_DATA_0898:%.*]] = phi ptr [ [[TMP15]], [[FOR_BODY21_LR_PH]] ], [ [[ADD_PTR:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[ACC_0897:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY21_LR_PH]] ], [ [[ACC_1_LCSSA]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[I_POS_X_0896:%.*]] = phi i32 [ [[I_POS_Y_0902]], [[FOR_BODY21_LR_PH]] ], [ [[ADD33:%.*]], [[FOR_COND_CLEANUP26]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[I_POS_X_0896]]
; CHECK-NEXT:    br i1 [[CMP25892]], label [[FOR_BODY27_LR_PH:%.*]], label [[FOR_COND_CLEANUP26]]
; CHECK:       for.body27.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY27:%.*]]
; CHECK:       for.cond.cleanup26:
; CHECK-NEXT:    [[ACC_1_LCSSA]] = phi float [ [[ACC_0897]], [[FOR_BODY21]] ], [ [[TMP19:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[ADD_PTR]] = getelementptr inbounds float, ptr [[F_DATA_0898]], i32 [[MUL10]]
; CHECK-NEXT:    [[ADD33]] = add nsw i32 [[I_POS_X_0896]], [[MUL]]
; CHECK-NEXT:    [[INC35]] = add nsw i32 [[M_0899]], 1
; CHECK-NEXT:    [[CMP19:%.*]] = icmp slt i32 [[INC35]], [[TMP5]]
; CHECK-NEXT:    br i1 [[CMP19]], label [[FOR_BODY21]], label [[FOR_COND_CLEANUP20]]
; CHECK:       for.body27:
; CHECK-NEXT:    [[N_0894:%.*]] = phi i32 [ [[SUB22]], [[FOR_BODY27_LR_PH]] ], [ [[INC:%.*]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[ACC_1893:%.*]] = phi float [ [[ACC_0897]], [[FOR_BODY27_LR_PH]] ], [ [[TMP19]], [[FOR_BODY27]] ]
; CHECK-NEXT:    [[MUL28:%.*]] = mul nsw i32 [[TMP14]], [[N_0894]]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr float, ptr [[TMP16]], i32 [[MUL28]]
; CHECK-NEXT:    [[TMP17:%.*]] = load float, ptr [[ARRAYIDX]], align 4
; CHECK-NEXT:    [[MUL30:%.*]] = mul nsw i32 [[TMP10]], [[N_0894]]
; CHECK-NEXT:    [[ARRAYIDX31:%.*]] = getelementptr inbounds float, ptr [[F_DATA_0898]], i32 [[MUL30]]
; CHECK-NEXT:    [[TMP18:%.*]] = load float, ptr [[ARRAYIDX31]], align 4
; CHECK-NEXT:    [[TMP19]] = tail call float @llvm.fmuladd.f32(float [[TMP17]], float [[TMP18]], float [[ACC_1893]])
; CHECK-NEXT:    [[INC]] = add nsw i32 [[N_0894]], 1
; CHECK-NEXT:    [[CMP25:%.*]] = icmp slt i32 [[INC]], [[TMP4]]
; CHECK-NEXT:    br i1 [[CMP25]], label [[FOR_BODY27]], label [[FOR_COND_CLEANUP26]]
; CHECK:       for.cond.cleanup56:
; CHECK-NEXT:    [[I_POS_Y_1_LCSSA:%.*]] = phi i32 [ [[I_POS_Y_0_LCSSA]], [[FOR_COND51_PREHEADER]] ], [ [[ADD92:%.*]], [[FOR_COND_CLEANUP67:%.*]] ]
; CHECK-NEXT:    br i1 [[CMP112933_NOT]], label [[FOR_COND_CLEANUP113]], label [[FOR_BODY114_LR_PH:%.*]]
; CHECK:       for.body114.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY114:%.*]]
; CHECK:       for.body57:
; CHECK-NEXT:    [[X50_0917:%.*]] = phi i32 [ [[SHR]], [[FOR_BODY57_LR_PH]] ], [ [[INC102:%.*]], [[FOR_COND_CLEANUP67]] ]
; CHECK-NEXT:    [[I_POS_Y_1916:%.*]] = phi i32 [ [[I_POS_Y_0_LCSSA]], [[FOR_BODY57_LR_PH]] ], [ [[ADD92]], [[FOR_COND_CLEANUP67]] ]
; CHECK-NEXT:    br i1 [[CMP19895]], label [[FOR_COND70_PREHEADER:%.*]], label [[FOR_COND_CLEANUP67]]
; CHECK:       for.cond70.preheader:
; CHECK-NEXT:    [[M62_0913:%.*]] = phi i32 [ [[INC89:%.*]], [[FOR_COND_CLEANUP73:%.*]] ], [ [[SUB16]], [[FOR_BODY57]] ]
; CHECK-NEXT:    [[F_DATA60_0912:%.*]] = phi ptr [ [[ADD_PTR86:%.*]], [[FOR_COND_CLEANUP73]] ], [ [[TMP15]], [[FOR_BODY57]] ]
; CHECK-NEXT:    [[ACC59_0911:%.*]] = phi float [ [[ACC59_1_LCSSA:%.*]], [[FOR_COND_CLEANUP73]] ], [ 0.000000e+00, [[FOR_BODY57]] ]
; CHECK-NEXT:    [[I_POS_X58_0910:%.*]] = phi i32 [ [[ADD87:%.*]], [[FOR_COND_CLEANUP73]] ], [ [[I_POS_Y_1916]], [[FOR_BODY57]] ]
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[I_POS_X58_0910]]
; CHECK-NEXT:    br i1 [[CMP72905]], label [[FOR_BODY74_LR_PH:%.*]], label [[FOR_COND_CLEANUP73]]
; CHECK:       for.body74.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY74:%.*]]
; CHECK:       for.cond.cleanup67:
; CHECK-NEXT:    [[ACC59_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY57]] ], [ [[ACC59_1_LCSSA]], [[FOR_COND_CLEANUP73]] ]
; CHECK-NEXT:    [[ADD92]] = add nsw i32 [[TMP14]], [[I_POS_Y_1916]]
; CHECK-NEXT:    [[MUL94:%.*]] = mul nsw i32 [[TMP13]], [[X50_0917]]
; CHECK-NEXT:    [[GEP922:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[MUL94]]
; CHECK-NEXT:    store float [[ACC59_0_LCSSA]], ptr [[GEP922]], align 4
; CHECK-NEXT:    [[INC102]] = add nsw i32 [[X50_0917]], 1
; CHECK-NEXT:    [[EXITCOND1058_NOT:%.*]] = icmp eq i32 [[INC102]], [[SUB527]]
; CHECK-NEXT:    br i1 [[EXITCOND1058_NOT]], label [[FOR_COND_CLEANUP56]], label [[FOR_BODY57]]
; CHECK:       for.cond.cleanup73:
; CHECK-NEXT:    [[ACC59_1_LCSSA]] = phi float [ [[ACC59_0911]], [[FOR_COND70_PREHEADER]] ], [ [[TMP23:%.*]], [[FOR_BODY74]] ]
; CHECK-NEXT:    [[ADD_PTR86]] = getelementptr inbounds float, ptr [[F_DATA60_0912]], i32 [[MUL10]]
; CHECK-NEXT:    [[ADD87]] = add nsw i32 [[I_POS_X58_0910]], [[MUL]]
; CHECK-NEXT:    [[INC89]] = add nsw i32 [[M62_0913]], 1
; CHECK-NEXT:    [[CMP66:%.*]] = icmp slt i32 [[INC89]], [[TMP5]]
; CHECK-NEXT:    br i1 [[CMP66]], label [[FOR_COND70_PREHEADER]], label [[FOR_COND_CLEANUP67]]
; CHECK:       for.body74:
; CHECK-NEXT:    [[N69_0907:%.*]] = phi i32 [ 0, [[FOR_BODY74_LR_PH]] ], [ [[INC84:%.*]], [[FOR_BODY74]] ]
; CHECK-NEXT:    [[ACC59_1906:%.*]] = phi float [ [[ACC59_0911]], [[FOR_BODY74_LR_PH]] ], [ [[TMP23]], [[FOR_BODY74]] ]
; CHECK-NEXT:    [[MUL76:%.*]] = mul nsw i32 [[TMP14]], [[N69_0907]]
; CHECK-NEXT:    [[ARRAYIDX78:%.*]] = getelementptr float, ptr [[TMP20]], i32 [[MUL76]]
; CHECK-NEXT:    [[TMP21:%.*]] = load float, ptr [[ARRAYIDX78]], align 4
; CHECK-NEXT:    [[MUL80:%.*]] = mul nsw i32 [[TMP10]], [[N69_0907]]
; CHECK-NEXT:    [[ARRAYIDX81:%.*]] = getelementptr inbounds float, ptr [[F_DATA60_0912]], i32 [[MUL80]]
; CHECK-NEXT:    [[TMP22:%.*]] = load float, ptr [[ARRAYIDX81]], align 4
; CHECK-NEXT:    [[TMP23]] = tail call float @llvm.fmuladd.f32(float [[TMP21]], float [[TMP22]], float [[ACC59_1906]])
; CHECK-NEXT:    [[INC84]] = add nuw nsw i32 [[N69_0907]], 1
; CHECK-NEXT:    [[EXITCOND1057_NOT:%.*]] = icmp eq i32 [[INC84]], [[TMP4]]
; CHECK-NEXT:    br i1 [[EXITCOND1057_NOT]], label [[FOR_COND_CLEANUP73]], label [[FOR_BODY74]]
; CHECK:       for.cond.cleanup113:
; CHECK-NEXT:    [[ADD171]] = add nsw i32 [[I_POS_0939]], [[MUL]]
; CHECK-NEXT:    [[INC173]] = add nuw nsw i32 [[Y_0940]], 1
; CHECK-NEXT:    [[EXITCOND1060_NOT:%.*]] = icmp eq i32 [[INC173]], [[SHR7]]
; CHECK-NEXT:    br i1 [[EXITCOND1060_NOT]], label [[FOR_COND176_PREHEADER]], label [[FOR_COND11_PREHEADER]]
; CHECK:       for.body114:
; CHECK-NEXT:    [[X104_0935:%.*]] = phi i32 [ [[SUB109]], [[FOR_BODY114_LR_PH]] ], [ [[INC166:%.*]], [[FOR_COND_CLEANUP124:%.*]] ]
; CHECK-NEXT:    [[I_POS_Y_2934:%.*]] = phi i32 [ [[I_POS_Y_1_LCSSA]], [[FOR_BODY114_LR_PH]] ], [ [[ADD156:%.*]], [[FOR_COND_CLEANUP124]] ]
; CHECK-NEXT:    [[ADD133:%.*]] = add i32 [[SUB467]], [[X104_0935]]
; CHECK-NEXT:    [[ADD134_NEG:%.*]] = xor i32 [[ADD133]], -1
; CHECK-NEXT:    [[SUB135:%.*]] = add i32 [[TMP4]], [[ADD134_NEG]]
; CHECK-NEXT:    [[CMP136923:%.*]] = icmp sgt i32 [[SUB135]], 0
; CHECK-NEXT:    br i1 [[CMP19895]], label [[FOR_COND127_PREHEADER_LR_PH:%.*]], label [[FOR_COND_CLEANUP124]]
; CHECK:       for.cond127.preheader.lr.ph:
; CHECK-NEXT:    br label [[FOR_COND127_PREHEADER:%.*]]
; CHECK:       for.cond127.preheader:
; CHECK-NEXT:    [[M119_0931:%.*]] = phi i32 [ [[SUB16]], [[FOR_COND127_PREHEADER_LR_PH]] ], [ [[INC153:%.*]], [[FOR_COND_CLEANUP137:%.*]] ]
; CHECK-NEXT:    [[F_DATA117_0930:%.*]] = phi ptr [ [[TMP15]], [[FOR_COND127_PREHEADER_LR_PH]] ], [ [[ADD_PTR150:%.*]], [[FOR_COND_CLEANUP137]] ]
; CHECK-NEXT:    [[ACC116_0929:%.*]] = phi float [ 0.000000e+00, [[FOR_COND127_PREHEADER_LR_PH]] ], [ [[ACC116_1_LCSSA:%.*]], [[FOR_COND_CLEANUP137]] ]
; CHECK-NEXT:    [[I_POS_X115_0928:%.*]] = phi i32 [ [[I_POS_Y_2934]], [[FOR_COND127_PREHEADER_LR_PH]] ], [ [[ADD151:%.*]], [[FOR_COND_CLEANUP137]] ]
; CHECK-NEXT:    [[TMP24:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[I_POS_X115_0928]]
; CHECK-NEXT:    br i1 [[CMP136923]], label [[FOR_BODY138_LR_PH:%.*]], label [[FOR_COND_CLEANUP137]]
; CHECK:       for.body138.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY138:%.*]]
; CHECK:       for.cond.cleanup124:
; CHECK-NEXT:    [[ACC116_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY114]] ], [ [[ACC116_1_LCSSA]], [[FOR_COND_CLEANUP137]] ]
; CHECK-NEXT:    [[ADD156]] = add nsw i32 [[TMP14]], [[I_POS_Y_2934]]
; CHECK-NEXT:    [[MUL158:%.*]] = mul nsw i32 [[TMP13]], [[X104_0935]]
; CHECK-NEXT:    [[GEP937:%.*]] = getelementptr float, ptr [[INVARIANT_GEP]], i32 [[MUL158]]
; CHECK-NEXT:    store float [[ACC116_0_LCSSA]], ptr [[GEP937]], align 4
; CHECK-NEXT:    [[INC166]] = add nsw i32 [[X104_0935]], 1
; CHECK-NEXT:    [[EXITCOND1059_NOT:%.*]] = icmp eq i32 [[INC166]], [[TMP0]]
; CHECK-NEXT:    br i1 [[EXITCOND1059_NOT]], label [[FOR_COND_CLEANUP113]], label [[FOR_BODY114]]
; CHECK:       for.cond.cleanup137:
; CHECK-NEXT:    [[ACC116_1_LCSSA]] = phi float [ [[ACC116_0929]], [[FOR_COND127_PREHEADER]] ], [ [[TMP27:%.*]], [[FOR_BODY138]] ]
; CHECK-NEXT:    [[ADD_PTR150]] = getelementptr inbounds float, ptr [[F_DATA117_0930]], i32 [[MUL10]]
; CHECK-NEXT:    [[ADD151]] = add nsw i32 [[I_POS_X115_0928]], [[MUL]]
; CHECK-NEXT:    [[INC153]] = add nsw i32 [[M119_0931]], 1
; CHECK-NEXT:    [[CMP123:%.*]] = icmp slt i32 [[INC153]], [[TMP5]]
; CHECK-NEXT:    br i1 [[CMP123]], label [[FOR_COND127_PREHEADER]], label [[FOR_COND_CLEANUP124]]
; CHECK:       for.body138:
; CHECK-NEXT:    [[N126_0925:%.*]] = phi i32 [ 0, [[FOR_BODY138_LR_PH]] ], [ [[INC148:%.*]], [[FOR_BODY138]] ]
; CHECK-NEXT:    [[ACC116_1924:%.*]] = phi float [ [[ACC116_0929]], [[FOR_BODY138_LR_PH]] ], [ [[TMP27]], [[FOR_BODY138]] ]
; CHECK-NEXT:    [[MUL140:%.*]] = mul nsw i32 [[TMP14]], [[N126_0925]]
; CHECK-NEXT:    [[ARRAYIDX142:%.*]] = getelementptr float, ptr [[TMP24]], i32 [[MUL140]]
; CHECK-NEXT:    [[TMP25:%.*]] = load float, ptr [[ARRAYIDX142]], align 4
; CHECK-NEXT:    [[MUL144:%.*]] = mul nsw i32 [[TMP10]], [[N126_0925]]
; CHECK-NEXT:    [[ARRAYIDX145:%.*]] = getelementptr inbounds float, ptr [[F_DATA117_0930]], i32 [[MUL144]]
; CHECK-NEXT:    [[TMP26:%.*]] = load float, ptr [[ARRAYIDX145]], align 4
; CHECK-NEXT:    [[TMP27]] = tail call float @llvm.fmuladd.f32(float [[TMP25]], float [[TMP26]], float [[ACC116_1924]])
; CHECK-NEXT:    [[INC148]] = add nuw nsw i32 [[N126_0925]], 1
; CHECK-NEXT:    [[CMP136:%.*]] = icmp slt i32 [[INC148]], [[SUB135]]
; CHECK-NEXT:    br i1 [[CMP136]], label [[FOR_BODY138]], label [[FOR_COND_CLEANUP137]]
; CHECK:       for.cond186.preheader:
; CHECK-NEXT:    [[Y175_0975:%.*]] = phi i32 [ [[SHR7]], [[FOR_COND186_PREHEADER_LR_PH]] ], [ [[INC304:%.*]], [[FOR_COND_CLEANUP245:%.*]] ]
; CHECK-NEXT:    [[I_POS_1974:%.*]] = phi i32 [ 0, [[FOR_COND186_PREHEADER_LR_PH]] ], [ [[ADD302:%.*]], [[FOR_COND_CLEANUP245]] ]
; CHECK-NEXT:    [[MUL228:%.*]] = mul nsw i32 [[TMP12]], [[Y175_0975]]
; CHECK-NEXT:    [[MUL230:%.*]] = mul nsw i32 [[MUL228]], [[TMP11]]
; CHECK-NEXT:    [[INVARIANT_GEP955:%.*]] = getelementptr float, ptr [[TMP3]], i32 [[MUL230]]
; CHECK-NEXT:    br i1 [[CMP187951]], label [[FOR_BODY189_LR_PH:%.*]], label [[FOR_COND_CLEANUP188:%.*]]
; CHECK:       for.body189.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY189:%.*]]
; CHECK:       for.cond311.preheader:
; CHECK-NEXT:    [[CMP3131028:%.*]] = icmp slt i32 [[SUB180]], [[TMP1]]
; CHECK-NEXT:    br i1 [[CMP3131028]], label [[FOR_COND318_PREHEADER_LR_PH:%.*]], label [[FOR_COND513_PREHEADER:%.*]]
; CHECK:       for.cond318.preheader.lr.ph:
; CHECK-NEXT:    [[CMP319989:%.*]] = icmp sgt i32 [[SHR]], 0
; CHECK-NEXT:    [[CMP3811005:%.*]] = icmp slt i32 [[SHR]], [[SUB527]]
; CHECK-NEXT:    [[CMP404995:%.*]] = icmp sgt i32 [[TMP4]], 0
; CHECK-NEXT:    [[CMP4431023:%.*]] = icmp slt i32 [[SUB527]], [[TMP0]]
; CHECK-NEXT:    br label [[FOR_COND318_PREHEADER:%.*]]
; CHECK:       for.cond.cleanup188:
; CHECK-NEXT:    [[I_POS_Y184_0_LCSSA:%.*]] = phi i32 [ [[I_POS_1974]], [[FOR_COND186_PREHEADER]] ], [ [[ADD224:%.*]], [[FOR_COND_CLEANUP198:%.*]] ]
; CHECK-NEXT:    br i1 [[CMP244967]], label [[FOR_BODY246_LR_PH:%.*]], label [[FOR_COND_CLEANUP245]]
; CHECK:       for.body246.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY246:%.*]]
; CHECK:       for.body189:
; CHECK-NEXT:    [[X185_0953:%.*]] = phi i32 [ 0, [[FOR_BODY189_LR_PH]] ], [ [[INC234:%.*]], [[FOR_COND_CLEANUP198]] ]
; CHECK-NEXT:    [[I_POS_Y184_0952:%.*]] = phi i32 [ [[I_POS_1974]], [[FOR_BODY189_LR_PH]] ], [ [[ADD224]], [[FOR_COND_CLEANUP198]] ]
; CHECK-NEXT:    [[SUB201:%.*]] = sub nsw i32 [[SHR]], [[X185_0953]]
; CHECK-NEXT:    [[CMP204941:%.*]] = icmp slt i32 [[SUB201]], [[TMP4]]
; CHECK-NEXT:    br i1 [[CMP197945]], label [[FOR_BODY199_LR_PH:%.*]], label [[FOR_COND_CLEANUP198]]
; CHECK:       for.body199.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY199:%.*]]
; CHECK:       for.cond.cleanup198:
; CHECK-NEXT:    [[ACC191_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY189]] ], [ [[ACC191_1_LCSSA:%.*]], [[FOR_COND_CLEANUP205:%.*]] ]
; CHECK-NEXT:    [[ADD224]] = add nsw i32 [[TMP14]], [[I_POS_Y184_0952]]
; CHECK-NEXT:    [[MUL226:%.*]] = mul nsw i32 [[TMP13]], [[X185_0953]]
; CHECK-NEXT:    [[GEP956:%.*]] = getelementptr float, ptr [[INVARIANT_GEP955]], i32 [[MUL226]]
; CHECK-NEXT:    store float [[ACC191_0_LCSSA]], ptr [[GEP956]], align 4
; CHECK-NEXT:    [[INC234]] = add nuw nsw i32 [[X185_0953]], 1
; CHECK-NEXT:    [[EXITCOND1062_NOT:%.*]] = icmp eq i32 [[INC234]], [[SHR]]
; CHECK-NEXT:    br i1 [[EXITCOND1062_NOT]], label [[FOR_COND_CLEANUP188]], label [[FOR_BODY189]]
; CHECK:       for.body199:
; CHECK-NEXT:    [[M194_0949:%.*]] = phi i32 [ 0, [[FOR_BODY199_LR_PH]] ], [ [[INC221:%.*]], [[FOR_COND_CLEANUP205]] ]
; CHECK-NEXT:    [[F_DATA192_0948:%.*]] = phi ptr [ [[TMP15]], [[FOR_BODY199_LR_PH]] ], [ [[ADD_PTR218:%.*]], [[FOR_COND_CLEANUP205]] ]
; CHECK-NEXT:    [[ACC191_0947:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY199_LR_PH]] ], [ [[ACC191_1_LCSSA]], [[FOR_COND_CLEANUP205]] ]
; CHECK-NEXT:    [[I_POS_X190_0946:%.*]] = phi i32 [ [[I_POS_Y184_0952]], [[FOR_BODY199_LR_PH]] ], [ [[ADD219:%.*]], [[FOR_COND_CLEANUP205]] ]
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[I_POS_X190_0946]]
; CHECK-NEXT:    br i1 [[CMP204941]], label [[FOR_BODY206_LR_PH:%.*]], label [[FOR_COND_CLEANUP205]]
; CHECK:       for.body206.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY206:%.*]]
; CHECK:       for.cond.cleanup205:
; CHECK-NEXT:    [[ACC191_1_LCSSA]] = phi float [ [[ACC191_0947]], [[FOR_BODY199]] ], [ [[TMP31:%.*]], [[FOR_BODY206]] ]
; CHECK-NEXT:    [[ADD_PTR218]] = getelementptr inbounds float, ptr [[F_DATA192_0948]], i32 [[MUL10]]
; CHECK-NEXT:    [[ADD219]] = add nsw i32 [[I_POS_X190_0946]], [[MUL]]
; CHECK-NEXT:    [[INC221]] = add nuw nsw i32 [[M194_0949]], 1
; CHECK-NEXT:    [[EXITCOND1061_NOT:%.*]] = icmp eq i32 [[INC221]], [[TMP5]]
; CHECK-NEXT:    br i1 [[EXITCOND1061_NOT]], label [[FOR_COND_CLEANUP198]], label [[FOR_BODY199]]
; CHECK:       for.body206:
; CHECK-NEXT:    [[N200_0943:%.*]] = phi i32 [ [[SUB201]], [[FOR_BODY206_LR_PH]] ], [ [[INC216:%.*]], [[FOR_BODY206]] ]
; CHECK-NEXT:    [[ACC191_1942:%.*]] = phi float [ [[ACC191_0947]], [[FOR_BODY206_LR_PH]] ], [ [[TMP31]], [[FOR_BODY206]] ]
; CHECK-NEXT:    [[MUL208:%.*]] = mul nsw i32 [[TMP14]], [[N200_0943]]
; CHECK-NEXT:    [[ARRAYIDX210:%.*]] = getelementptr float, ptr [[TMP28]], i32 [[MUL208]]
; CHECK-NEXT:    [[TMP29:%.*]] = load float, ptr [[ARRAYIDX210]], align 4
; CHECK-NEXT:    [[MUL212:%.*]] = mul nsw i32 [[TMP10]], [[N200_0943]]
; CHECK-NEXT:    [[ARRAYIDX213:%.*]] = getelementptr inbounds float, ptr [[F_DATA192_0948]], i32 [[MUL212]]
; CHECK-NEXT:    [[TMP30:%.*]] = load float, ptr [[ARRAYIDX213]], align 4
; CHECK-NEXT:    [[TMP31]] = tail call float @llvm.fmuladd.f32(float [[TMP29]], float [[TMP30]], float [[ACC191_1942]])
; CHECK-NEXT:    [[INC216]] = add nsw i32 [[N200_0943]], 1
; CHECK-NEXT:    [[CMP204:%.*]] = icmp slt i32 [[INC216]], [[TMP4]]
; CHECK-NEXT:    br i1 [[CMP204]], label [[FOR_BODY206]], label [[FOR_COND_CLEANUP205]]
; CHECK:       for.cond.cleanup245:
; CHECK-NEXT:    [[ADD302]] = add nsw i32 [[I_POS_1974]], [[MUL]]
; CHECK-NEXT:    [[INC304]] = add nsw i32 [[Y175_0975]], 1
; CHECK-NEXT:    [[EXITCOND1065_NOT:%.*]] = icmp eq i32 [[INC304]], [[SUB180]]
; CHECK-NEXT:    br i1 [[EXITCOND1065_NOT]], label [[FOR_COND311_PREHEADER]], label [[FOR_COND186_PREHEADER]]
; CHECK:       for.body246:
; CHECK-NEXT:    [[X236_0969:%.*]] = phi i32 [ [[SUB241]], [[FOR_BODY246_LR_PH]] ], [ [[INC297:%.*]], [[FOR_COND_CLEANUP255:%.*]] ]
; CHECK-NEXT:    [[I_POS_Y184_1968:%.*]] = phi i32 [ [[I_POS_Y184_0_LCSSA]], [[FOR_BODY246_LR_PH]] ], [ [[ADD287:%.*]], [[FOR_COND_CLEANUP255]] ]
; CHECK-NEXT:    [[ADD264:%.*]] = add i32 [[SUB467]], [[X236_0969]]
; CHECK-NEXT:    [[ADD265_NEG:%.*]] = xor i32 [[ADD264]], -1
; CHECK-NEXT:    [[SUB266:%.*]] = add i32 [[TMP4]], [[ADD265_NEG]]
; CHECK-NEXT:    [[CMP267957:%.*]] = icmp sgt i32 [[SUB266]], 0
; CHECK-NEXT:    br i1 [[CMP197945]], label [[FOR_COND258_PREHEADER_LR_PH:%.*]], label [[FOR_COND_CLEANUP255]]
; CHECK:       for.cond258.preheader.lr.ph:
; CHECK-NEXT:    br label [[FOR_COND258_PREHEADER:%.*]]
; CHECK:       for.cond258.preheader:
; CHECK-NEXT:    [[M251_0965:%.*]] = phi i32 [ 0, [[FOR_COND258_PREHEADER_LR_PH]] ], [ [[INC284:%.*]], [[FOR_COND_CLEANUP268:%.*]] ]
; CHECK-NEXT:    [[F_DATA249_0964:%.*]] = phi ptr [ [[TMP15]], [[FOR_COND258_PREHEADER_LR_PH]] ], [ [[ADD_PTR281:%.*]], [[FOR_COND_CLEANUP268]] ]
; CHECK-NEXT:    [[ACC248_0963:%.*]] = phi float [ 0.000000e+00, [[FOR_COND258_PREHEADER_LR_PH]] ], [ [[ACC248_1_LCSSA:%.*]], [[FOR_COND_CLEANUP268]] ]
; CHECK-NEXT:    [[I_POS_X247_0962:%.*]] = phi i32 [ [[I_POS_Y184_1968]], [[FOR_COND258_PREHEADER_LR_PH]] ], [ [[ADD282:%.*]], [[FOR_COND_CLEANUP268]] ]
; CHECK-NEXT:    [[TMP32:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[I_POS_X247_0962]]
; CHECK-NEXT:    br i1 [[CMP267957]], label [[FOR_BODY269_LR_PH:%.*]], label [[FOR_COND_CLEANUP268]]
; CHECK:       for.body269.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY269:%.*]]
; CHECK:       for.cond.cleanup255:
; CHECK-NEXT:    [[ACC248_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY246]] ], [ [[ACC248_1_LCSSA]], [[FOR_COND_CLEANUP268]] ]
; CHECK-NEXT:    [[ADD287]] = add nsw i32 [[TMP14]], [[I_POS_Y184_1968]]
; CHECK-NEXT:    [[MUL289:%.*]] = mul nsw i32 [[TMP13]], [[X236_0969]]
; CHECK-NEXT:    [[GEP971:%.*]] = getelementptr float, ptr [[INVARIANT_GEP955]], i32 [[MUL289]]
; CHECK-NEXT:    store float [[ACC248_0_LCSSA]], ptr [[GEP971]], align 4
; CHECK-NEXT:    [[INC297]] = add nsw i32 [[X236_0969]], 1
; CHECK-NEXT:    [[EXITCOND1064_NOT:%.*]] = icmp eq i32 [[INC297]], [[TMP0]]
; CHECK-NEXT:    br i1 [[EXITCOND1064_NOT]], label [[FOR_COND_CLEANUP245]], label [[FOR_BODY246]]
; CHECK:       for.cond.cleanup268:
; CHECK-NEXT:    [[ACC248_1_LCSSA]] = phi float [ [[ACC248_0963]], [[FOR_COND258_PREHEADER]] ], [ [[TMP35:%.*]], [[FOR_BODY269]] ]
; CHECK-NEXT:    [[ADD_PTR281]] = getelementptr inbounds float, ptr [[F_DATA249_0964]], i32 [[MUL10]]
; CHECK-NEXT:    [[ADD282]] = add nsw i32 [[I_POS_X247_0962]], [[MUL]]
; CHECK-NEXT:    [[INC284]] = add nuw nsw i32 [[M251_0965]], 1
; CHECK-NEXT:    [[EXITCOND1063_NOT:%.*]] = icmp eq i32 [[INC284]], [[TMP5]]
; CHECK-NEXT:    br i1 [[EXITCOND1063_NOT]], label [[FOR_COND_CLEANUP255]], label [[FOR_COND258_PREHEADER]]
; CHECK:       for.body269:
; CHECK-NEXT:    [[N257_0959:%.*]] = phi i32 [ 0, [[FOR_BODY269_LR_PH]] ], [ [[INC279:%.*]], [[FOR_BODY269]] ]
; CHECK-NEXT:    [[ACC248_1958:%.*]] = phi float [ [[ACC248_0963]], [[FOR_BODY269_LR_PH]] ], [ [[TMP35]], [[FOR_BODY269]] ]
; CHECK-NEXT:    [[MUL271:%.*]] = mul nsw i32 [[TMP14]], [[N257_0959]]
; CHECK-NEXT:    [[ARRAYIDX273:%.*]] = getelementptr float, ptr [[TMP32]], i32 [[MUL271]]
; CHECK-NEXT:    [[TMP33:%.*]] = load float, ptr [[ARRAYIDX273]], align 4
; CHECK-NEXT:    [[MUL275:%.*]] = mul nsw i32 [[TMP10]], [[N257_0959]]
; CHECK-NEXT:    [[ARRAYIDX276:%.*]] = getelementptr inbounds float, ptr [[F_DATA249_0964]], i32 [[MUL275]]
; CHECK-NEXT:    [[TMP34:%.*]] = load float, ptr [[ARRAYIDX276]], align 4
; CHECK-NEXT:    [[TMP35]] = tail call float @llvm.fmuladd.f32(float [[TMP33]], float [[TMP34]], float [[ACC248_1958]])
; CHECK-NEXT:    [[INC279]] = add nuw nsw i32 [[N257_0959]], 1
; CHECK-NEXT:    [[CMP267:%.*]] = icmp slt i32 [[INC279]], [[SUB266]]
; CHECK-NEXT:    br i1 [[CMP267]], label [[FOR_BODY269]], label [[FOR_COND_CLEANUP268]]
; CHECK:       for.cond318.preheader:
; CHECK-NEXT:    [[Y306_01030:%.*]] = phi i32 [ [[SUB180]], [[FOR_COND318_PREHEADER_LR_PH]] ], [ [[INC510:%.*]], [[FOR_COND_CLEANUP444:%.*]] ]
; CHECK-NEXT:    [[I_POS_21029:%.*]] = phi i32 [ 0, [[FOR_COND318_PREHEADER_LR_PH]] ], [ [[ADD508:%.*]], [[FOR_COND_CLEANUP444]] ]
; CHECK-NEXT:    [[ADD333:%.*]] = add i32 [[SUB330]], [[Y306_01030]]
; CHECK-NEXT:    [[MUL367:%.*]] = mul nsw i32 [[TMP12]], [[Y306_01030]]
; CHECK-NEXT:    [[ADD334_NEG:%.*]] = xor i32 [[ADD333]], -1
; CHECK-NEXT:    [[MUL369:%.*]] = mul nsw i32 [[MUL367]], [[TMP11]]
; CHECK-NEXT:    [[SUB335:%.*]] = add i32 [[TMP5]], [[ADD334_NEG]]
; CHECK-NEXT:    [[INVARIANT_GEP993:%.*]] = getelementptr float, ptr [[TMP3]], i32 [[MUL369]]
; CHECK-NEXT:    [[CMP336983:%.*]] = icmp sgt i32 [[SUB335]], 0
; CHECK-NEXT:    br i1 [[CMP319989]], label [[FOR_BODY321_LR_PH:%.*]], label [[FOR_COND376_PREHEADER:%.*]]
; CHECK:       for.body321.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY321:%.*]]
; CHECK:       for.cond513.preheader:
; CHECK-NEXT:    br i1 [[CMP181973]], label [[FOR_COND523_PREHEADER_LR_PH:%.*]], label [[FOR_COND_CLEANUP519:%.*]]
; CHECK:       for.cond523.preheader.lr.ph:
; CHECK-NEXT:    [[CMP5281041:%.*]] = icmp slt i32 [[SHR]], [[SUB527]]
; CHECK-NEXT:    [[CMP5381035:%.*]] = icmp sgt i32 [[TMP5]], 0
; CHECK-NEXT:    [[CMP5441031:%.*]] = icmp sgt i32 [[TMP4]], 0
; CHECK-NEXT:    br label [[FOR_COND523_PREHEADER:%.*]]
; CHECK:       for.cond376.preheader:
; CHECK-NEXT:    [[I_POS_Y316_0_LCSSA:%.*]] = phi i32 [ [[I_POS_21029]], [[FOR_COND318_PREHEADER]] ], [ [[ADD363:%.*]], [[FOR_COND_CLEANUP337:%.*]] ]
; CHECK-NEXT:    br i1 [[CMP3811005]], label [[FOR_BODY383_LR_PH:%.*]], label [[FOR_COND441_PREHEADER:%.*]]
; CHECK:       for.body383.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY383:%.*]]
; CHECK:       for.body321:
; CHECK-NEXT:    [[X317_0991:%.*]] = phi i32 [ 0, [[FOR_BODY321_LR_PH]] ], [ [[INC373:%.*]], [[FOR_COND_CLEANUP337]] ]
; CHECK-NEXT:    [[I_POS_Y316_0990:%.*]] = phi i32 [ [[I_POS_21029]], [[FOR_BODY321_LR_PH]] ], [ [[ADD363]], [[FOR_COND_CLEANUP337]] ]
; CHECK-NEXT:    [[SUB340:%.*]] = sub nsw i32 [[SHR]], [[X317_0991]]
; CHECK-NEXT:    [[CMP343979:%.*]] = icmp slt i32 [[SUB340]], [[TMP4]]
; CHECK-NEXT:    br i1 [[CMP336983]], label [[FOR_BODY338_LR_PH:%.*]], label [[FOR_COND_CLEANUP337]]
; CHECK:       for.body338.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY338:%.*]]
; CHECK:       for.cond.cleanup337:
; CHECK-NEXT:    [[ACC323_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY321]] ], [ [[ACC323_1_LCSSA:%.*]], [[FOR_COND_CLEANUP344:%.*]] ]
; CHECK-NEXT:    [[ADD363]] = add nsw i32 [[TMP14]], [[I_POS_Y316_0990]]
; CHECK-NEXT:    [[MUL365:%.*]] = mul nsw i32 [[TMP13]], [[X317_0991]]
; CHECK-NEXT:    [[GEP994:%.*]] = getelementptr float, ptr [[INVARIANT_GEP993]], i32 [[MUL365]]
; CHECK-NEXT:    store float [[ACC323_0_LCSSA]], ptr [[GEP994]], align 4
; CHECK-NEXT:    [[INC373]] = add nuw nsw i32 [[X317_0991]], 1
; CHECK-NEXT:    [[EXITCOND1066_NOT:%.*]] = icmp eq i32 [[INC373]], [[SHR]]
; CHECK-NEXT:    br i1 [[EXITCOND1066_NOT]], label [[FOR_COND376_PREHEADER]], label [[FOR_BODY321]]
; CHECK:       for.body338:
; CHECK-NEXT:    [[M326_0987:%.*]] = phi i32 [ 0, [[FOR_BODY338_LR_PH]] ], [ [[INC360:%.*]], [[FOR_COND_CLEANUP344]] ]
; CHECK-NEXT:    [[F_DATA324_0986:%.*]] = phi ptr [ [[TMP15]], [[FOR_BODY338_LR_PH]] ], [ [[ADD_PTR357:%.*]], [[FOR_COND_CLEANUP344]] ]
; CHECK-NEXT:    [[ACC323_0985:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY338_LR_PH]] ], [ [[ACC323_1_LCSSA]], [[FOR_COND_CLEANUP344]] ]
; CHECK-NEXT:    [[I_POS_X322_0984:%.*]] = phi i32 [ [[I_POS_Y316_0990]], [[FOR_BODY338_LR_PH]] ], [ [[ADD358:%.*]], [[FOR_COND_CLEANUP344]] ]
; CHECK-NEXT:    [[TMP36:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[I_POS_X322_0984]]
; CHECK-NEXT:    br i1 [[CMP343979]], label [[FOR_BODY345_LR_PH:%.*]], label [[FOR_COND_CLEANUP344]]
; CHECK:       for.body345.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY345:%.*]]
; CHECK:       for.cond.cleanup344:
; CHECK-NEXT:    [[ACC323_1_LCSSA]] = phi float [ [[ACC323_0985]], [[FOR_BODY338]] ], [ [[TMP39:%.*]], [[FOR_BODY345]] ]
; CHECK-NEXT:    [[ADD_PTR357]] = getelementptr inbounds float, ptr [[F_DATA324_0986]], i32 [[MUL10]]
; CHECK-NEXT:    [[ADD358]] = add nsw i32 [[I_POS_X322_0984]], [[MUL]]
; CHECK-NEXT:    [[INC360]] = add nuw nsw i32 [[M326_0987]], 1
; CHECK-NEXT:    [[CMP336:%.*]] = icmp slt i32 [[INC360]], [[SUB335]]
; CHECK-NEXT:    br i1 [[CMP336]], label [[FOR_BODY338]], label [[FOR_COND_CLEANUP337]]
; CHECK:       for.body345:
; CHECK-NEXT:    [[N339_0981:%.*]] = phi i32 [ [[SUB340]], [[FOR_BODY345_LR_PH]] ], [ [[INC355:%.*]], [[FOR_BODY345]] ]
; CHECK-NEXT:    [[ACC323_1980:%.*]] = phi float [ [[ACC323_0985]], [[FOR_BODY345_LR_PH]] ], [ [[TMP39]], [[FOR_BODY345]] ]
; CHECK-NEXT:    [[MUL347:%.*]] = mul nsw i32 [[TMP14]], [[N339_0981]]
; CHECK-NEXT:    [[ARRAYIDX349:%.*]] = getelementptr float, ptr [[TMP36]], i32 [[MUL347]]
; CHECK-NEXT:    [[TMP37:%.*]] = load float, ptr [[ARRAYIDX349]], align 4
; CHECK-NEXT:    [[MUL351:%.*]] = mul nsw i32 [[TMP10]], [[N339_0981]]
; CHECK-NEXT:    [[ARRAYIDX352:%.*]] = getelementptr inbounds float, ptr [[F_DATA324_0986]], i32 [[MUL351]]
; CHECK-NEXT:    [[TMP38:%.*]] = load float, ptr [[ARRAYIDX352]], align 4
; CHECK-NEXT:    [[TMP39]] = tail call float @llvm.fmuladd.f32(float [[TMP37]], float [[TMP38]], float [[ACC323_1980]])
; CHECK-NEXT:    [[INC355]] = add nsw i32 [[N339_0981]], 1
; CHECK-NEXT:    [[CMP343:%.*]] = icmp slt i32 [[INC355]], [[TMP4]]
; CHECK-NEXT:    br i1 [[CMP343]], label [[FOR_BODY345]], label [[FOR_COND_CLEANUP344]]
; CHECK:       for.cond441.preheader:
; CHECK-NEXT:    [[I_POS_Y316_1_LCSSA:%.*]] = phi i32 [ [[I_POS_Y316_0_LCSSA]], [[FOR_COND376_PREHEADER]] ], [ [[ADD424:%.*]], [[FOR_COND_CLEANUP399:%.*]] ]
; CHECK-NEXT:    br i1 [[CMP4431023]], label [[FOR_BODY445_LR_PH:%.*]], label [[FOR_COND_CLEANUP444]]
; CHECK:       for.body445.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY445:%.*]]
; CHECK:       for.body383:
; CHECK-NEXT:    [[X375_01007:%.*]] = phi i32 [ [[SHR]], [[FOR_BODY383_LR_PH]] ], [ [[INC434:%.*]], [[FOR_COND_CLEANUP399]] ]
; CHECK-NEXT:    [[I_POS_Y316_11006:%.*]] = phi i32 [ [[I_POS_Y316_0_LCSSA]], [[FOR_BODY383_LR_PH]] ], [ [[ADD424]], [[FOR_COND_CLEANUP399]] ]
; CHECK-NEXT:    br i1 [[CMP336983]], label [[FOR_COND402_PREHEADER:%.*]], label [[FOR_COND_CLEANUP399]]
; CHECK:       for.cond402.preheader:
; CHECK-NEXT:    [[M388_01003:%.*]] = phi i32 [ [[INC421:%.*]], [[FOR_COND_CLEANUP405:%.*]] ], [ 0, [[FOR_BODY383]] ]
; CHECK-NEXT:    [[F_DATA386_01002:%.*]] = phi ptr [ [[ADD_PTR418:%.*]], [[FOR_COND_CLEANUP405]] ], [ [[TMP15]], [[FOR_BODY383]] ]
; CHECK-NEXT:    [[ACC385_01001:%.*]] = phi float [ [[ACC385_1_LCSSA:%.*]], [[FOR_COND_CLEANUP405]] ], [ 0.000000e+00, [[FOR_BODY383]] ]
; CHECK-NEXT:    [[I_POS_X384_01000:%.*]] = phi i32 [ [[ADD419:%.*]], [[FOR_COND_CLEANUP405]] ], [ [[I_POS_Y316_11006]], [[FOR_BODY383]] ]
; CHECK-NEXT:    [[TMP40:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[I_POS_X384_01000]]
; CHECK-NEXT:    br i1 [[CMP404995]], label [[FOR_BODY406_LR_PH:%.*]], label [[FOR_COND_CLEANUP405]]
; CHECK:       for.body406.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY406:%.*]]
; CHECK:       for.cond.cleanup399:
; CHECK-NEXT:    [[ACC385_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY383]] ], [ [[ACC385_1_LCSSA]], [[FOR_COND_CLEANUP405]] ]
; CHECK-NEXT:    [[ADD424]] = add nsw i32 [[TMP14]], [[I_POS_Y316_11006]]
; CHECK-NEXT:    [[MUL426:%.*]] = mul nsw i32 [[TMP13]], [[X375_01007]]
; CHECK-NEXT:    [[GEP1012:%.*]] = getelementptr float, ptr [[INVARIANT_GEP993]], i32 [[MUL426]]
; CHECK-NEXT:    store float [[ACC385_0_LCSSA]], ptr [[GEP1012]], align 4
; CHECK-NEXT:    [[INC434]] = add nsw i32 [[X375_01007]], 1
; CHECK-NEXT:    [[EXITCOND1068_NOT:%.*]] = icmp eq i32 [[INC434]], [[SUB527]]
; CHECK-NEXT:    br i1 [[EXITCOND1068_NOT]], label [[FOR_COND441_PREHEADER]], label [[FOR_BODY383]]
; CHECK:       for.cond.cleanup405:
; CHECK-NEXT:    [[ACC385_1_LCSSA]] = phi float [ [[ACC385_01001]], [[FOR_COND402_PREHEADER]] ], [ [[TMP43:%.*]], [[FOR_BODY406]] ]
; CHECK-NEXT:    [[ADD_PTR418]] = getelementptr inbounds float, ptr [[F_DATA386_01002]], i32 [[MUL10]]
; CHECK-NEXT:    [[ADD419]] = add nsw i32 [[I_POS_X384_01000]], [[MUL]]
; CHECK-NEXT:    [[INC421]] = add nuw nsw i32 [[M388_01003]], 1
; CHECK-NEXT:    [[CMP398:%.*]] = icmp slt i32 [[INC421]], [[SUB335]]
; CHECK-NEXT:    br i1 [[CMP398]], label [[FOR_COND402_PREHEADER]], label [[FOR_COND_CLEANUP399]]
; CHECK:       for.body406:
; CHECK-NEXT:    [[N401_0997:%.*]] = phi i32 [ 0, [[FOR_BODY406_LR_PH]] ], [ [[INC416:%.*]], [[FOR_BODY406]] ]
; CHECK-NEXT:    [[ACC385_1996:%.*]] = phi float [ [[ACC385_01001]], [[FOR_BODY406_LR_PH]] ], [ [[TMP43]], [[FOR_BODY406]] ]
; CHECK-NEXT:    [[MUL408:%.*]] = mul nsw i32 [[TMP14]], [[N401_0997]]
; CHECK-NEXT:    [[ARRAYIDX410:%.*]] = getelementptr float, ptr [[TMP40]], i32 [[MUL408]]
; CHECK-NEXT:    [[TMP41:%.*]] = load float, ptr [[ARRAYIDX410]], align 4
; CHECK-NEXT:    [[MUL412:%.*]] = mul nsw i32 [[TMP10]], [[N401_0997]]
; CHECK-NEXT:    [[ARRAYIDX413:%.*]] = getelementptr inbounds float, ptr [[F_DATA386_01002]], i32 [[MUL412]]
; CHECK-NEXT:    [[TMP42:%.*]] = load float, ptr [[ARRAYIDX413]], align 4
; CHECK-NEXT:    [[TMP43]] = tail call float @llvm.fmuladd.f32(float [[TMP41]], float [[TMP42]], float [[ACC385_1996]])
; CHECK-NEXT:    [[INC416]] = add nuw nsw i32 [[N401_0997]], 1
; CHECK-NEXT:    [[EXITCOND1067_NOT:%.*]] = icmp eq i32 [[INC416]], [[TMP4]]
; CHECK-NEXT:    br i1 [[EXITCOND1067_NOT]], label [[FOR_COND_CLEANUP405]], label [[FOR_BODY406]]
; CHECK:       for.cond.cleanup444:
; CHECK-NEXT:    [[ADD508]] = add nsw i32 [[I_POS_21029]], [[MUL]]
; CHECK-NEXT:    [[INC510]] = add nsw i32 [[Y306_01030]], 1
; CHECK-NEXT:    [[EXITCOND1070_NOT:%.*]] = icmp eq i32 [[INC510]], [[TMP1]]
; CHECK-NEXT:    br i1 [[EXITCOND1070_NOT]], label [[FOR_COND513_PREHEADER]], label [[FOR_COND318_PREHEADER]]
; CHECK:       for.body445:
; CHECK-NEXT:    [[X436_01025:%.*]] = phi i32 [ [[SUB527]], [[FOR_BODY445_LR_PH]] ], [ [[INC503:%.*]], [[FOR_COND_CLEANUP461:%.*]] ]
; CHECK-NEXT:    [[I_POS_Y316_21024:%.*]] = phi i32 [ [[I_POS_Y316_1_LCSSA]], [[FOR_BODY445_LR_PH]] ], [ [[ADD493:%.*]], [[FOR_COND_CLEANUP461]] ]
; CHECK-NEXT:    [[ADD470:%.*]] = add i32 [[SUB467]], [[X436_01025]]
; CHECK-NEXT:    [[ADD471_NEG:%.*]] = xor i32 [[ADD470]], -1
; CHECK-NEXT:    [[SUB472:%.*]] = add i32 [[TMP4]], [[ADD471_NEG]]
; CHECK-NEXT:    [[CMP4731013:%.*]] = icmp sgt i32 [[SUB472]], 0
; CHECK-NEXT:    br i1 [[CMP336983]], label [[FOR_COND464_PREHEADER_LR_PH:%.*]], label [[FOR_COND_CLEANUP461]]
; CHECK:       for.cond464.preheader.lr.ph:
; CHECK-NEXT:    br label [[FOR_COND464_PREHEADER:%.*]]
; CHECK:       for.cond464.preheader:
; CHECK-NEXT:    [[M450_01021:%.*]] = phi i32 [ 0, [[FOR_COND464_PREHEADER_LR_PH]] ], [ [[INC490:%.*]], [[FOR_COND_CLEANUP474:%.*]] ]
; CHECK-NEXT:    [[F_DATA448_01020:%.*]] = phi ptr [ [[TMP15]], [[FOR_COND464_PREHEADER_LR_PH]] ], [ [[ADD_PTR487:%.*]], [[FOR_COND_CLEANUP474]] ]
; CHECK-NEXT:    [[ACC447_01019:%.*]] = phi float [ 0.000000e+00, [[FOR_COND464_PREHEADER_LR_PH]] ], [ [[ACC447_1_LCSSA:%.*]], [[FOR_COND_CLEANUP474]] ]
; CHECK-NEXT:    [[I_POS_X446_01018:%.*]] = phi i32 [ [[I_POS_Y316_21024]], [[FOR_COND464_PREHEADER_LR_PH]] ], [ [[ADD488:%.*]], [[FOR_COND_CLEANUP474]] ]
; CHECK-NEXT:    [[TMP44:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[I_POS_X446_01018]]
; CHECK-NEXT:    br i1 [[CMP4731013]], label [[FOR_BODY475_LR_PH:%.*]], label [[FOR_COND_CLEANUP474]]
; CHECK:       for.body475.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY475:%.*]]
; CHECK:       for.cond.cleanup461:
; CHECK-NEXT:    [[ACC447_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY445]] ], [ [[ACC447_1_LCSSA]], [[FOR_COND_CLEANUP474]] ]
; CHECK-NEXT:    [[ADD493]] = add nsw i32 [[TMP14]], [[I_POS_Y316_21024]]
; CHECK-NEXT:    [[MUL495:%.*]] = mul nsw i32 [[TMP13]], [[X436_01025]]
; CHECK-NEXT:    [[GEP1027:%.*]] = getelementptr float, ptr [[INVARIANT_GEP993]], i32 [[MUL495]]
; CHECK-NEXT:    store float [[ACC447_0_LCSSA]], ptr [[GEP1027]], align 4
; CHECK-NEXT:    [[INC503]] = add nsw i32 [[X436_01025]], 1
; CHECK-NEXT:    [[EXITCOND1069_NOT:%.*]] = icmp eq i32 [[INC503]], [[TMP0]]
; CHECK-NEXT:    br i1 [[EXITCOND1069_NOT]], label [[FOR_COND_CLEANUP444]], label [[FOR_BODY445]]
; CHECK:       for.cond.cleanup474:
; CHECK-NEXT:    [[ACC447_1_LCSSA]] = phi float [ [[ACC447_01019]], [[FOR_COND464_PREHEADER]] ], [ [[TMP47:%.*]], [[FOR_BODY475]] ]
; CHECK-NEXT:    [[ADD_PTR487]] = getelementptr inbounds float, ptr [[F_DATA448_01020]], i32 [[MUL10]]
; CHECK-NEXT:    [[ADD488]] = add nsw i32 [[I_POS_X446_01018]], [[MUL]]
; CHECK-NEXT:    [[INC490]] = add nuw nsw i32 [[M450_01021]], 1
; CHECK-NEXT:    [[CMP460:%.*]] = icmp slt i32 [[INC490]], [[SUB335]]
; CHECK-NEXT:    br i1 [[CMP460]], label [[FOR_COND464_PREHEADER]], label [[FOR_COND_CLEANUP461]]
; CHECK:       for.body475:
; CHECK-NEXT:    [[N463_01015:%.*]] = phi i32 [ 0, [[FOR_BODY475_LR_PH]] ], [ [[INC485:%.*]], [[FOR_BODY475]] ]
; CHECK-NEXT:    [[ACC447_11014:%.*]] = phi float [ [[ACC447_01019]], [[FOR_BODY475_LR_PH]] ], [ [[TMP47]], [[FOR_BODY475]] ]
; CHECK-NEXT:    [[MUL477:%.*]] = mul nsw i32 [[TMP14]], [[N463_01015]]
; CHECK-NEXT:    [[ARRAYIDX479:%.*]] = getelementptr float, ptr [[TMP44]], i32 [[MUL477]]
; CHECK-NEXT:    [[TMP45:%.*]] = load float, ptr [[ARRAYIDX479]], align 4
; CHECK-NEXT:    [[MUL481:%.*]] = mul nsw i32 [[TMP10]], [[N463_01015]]
; CHECK-NEXT:    [[ARRAYIDX482:%.*]] = getelementptr inbounds float, ptr [[F_DATA448_01020]], i32 [[MUL481]]
; CHECK-NEXT:    [[TMP46:%.*]] = load float, ptr [[ARRAYIDX482]], align 4
; CHECK-NEXT:    [[TMP47]] = tail call float @llvm.fmuladd.f32(float [[TMP45]], float [[TMP46]], float [[ACC447_11014]])
; CHECK-NEXT:    [[INC485]] = add nuw nsw i32 [[N463_01015]], 1
; CHECK-NEXT:    [[CMP473:%.*]] = icmp slt i32 [[INC485]], [[SUB472]]
; CHECK-NEXT:    br i1 [[CMP473]], label [[FOR_BODY475]], label [[FOR_COND_CLEANUP474]]
; CHECK:       for.cond523.preheader:
; CHECK-NEXT:    [[Y512_01048:%.*]] = phi i32 [ [[SHR7]], [[FOR_COND523_PREHEADER_LR_PH]] ], [ [[INC581:%.*]], [[FOR_COND_CLEANUP529:%.*]] ]
; CHECK-NEXT:    [[I_POS_31047:%.*]] = phi i32 [ 0, [[FOR_COND523_PREHEADER_LR_PH]] ], [ [[ADD579:%.*]], [[FOR_COND_CLEANUP529]] ]
; CHECK-NEXT:    [[MUL568:%.*]] = mul nsw i32 [[TMP12]], [[Y512_01048]]
; CHECK-NEXT:    [[MUL570:%.*]] = mul nsw i32 [[MUL568]], [[TMP11]]
; CHECK-NEXT:    [[INVARIANT_GEP1044:%.*]] = getelementptr float, ptr [[TMP3]], i32 [[MUL570]]
; CHECK-NEXT:    br i1 [[CMP5281041]], label [[FOR_BODY530_LR_PH:%.*]], label [[FOR_COND_CLEANUP529]]
; CHECK:       for.body530.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY530:%.*]]
; CHECK:       for.cond.cleanup519:
; CHECK-NEXT:    ret i32 0
; CHECK:       for.cond.cleanup529:
; CHECK-NEXT:    [[ADD579]] = add nsw i32 [[I_POS_31047]], [[MUL]]
; CHECK-NEXT:    [[INC581]] = add nsw i32 [[Y512_01048]], 1
; CHECK-NEXT:    [[EXITCOND1074_NOT:%.*]] = icmp eq i32 [[INC581]], [[SUB180]]
; CHECK-NEXT:    br i1 [[EXITCOND1074_NOT]], label [[FOR_COND_CLEANUP519]], label [[FOR_COND523_PREHEADER]]
; CHECK:       for.body530:
; CHECK-NEXT:    [[X522_01043:%.*]] = phi i32 [ [[SHR]], [[FOR_BODY530_LR_PH]] ], [ [[INC574:%.*]], [[FOR_COND_CLEANUP539:%.*]] ]
; CHECK-NEXT:    [[I_POS_Y521_01042:%.*]] = phi i32 [ [[I_POS_31047]], [[FOR_BODY530_LR_PH]] ], [ [[ADD564:%.*]], [[FOR_COND_CLEANUP539]] ]
; CHECK-NEXT:    br i1 [[CMP5381035]], label [[FOR_COND542_PREHEADER:%.*]], label [[FOR_COND_CLEANUP539]]
; CHECK:       for.cond542.preheader:
; CHECK-NEXT:    [[M535_01039:%.*]] = phi i32 [ [[INC561:%.*]], [[FOR_COND_CLEANUP545:%.*]] ], [ 0, [[FOR_BODY530]] ]
; CHECK-NEXT:    [[F_DATA533_01038:%.*]] = phi ptr [ [[ADD_PTR558:%.*]], [[FOR_COND_CLEANUP545]] ], [ [[TMP15]], [[FOR_BODY530]] ]
; CHECK-NEXT:    [[ACC532_01037:%.*]] = phi float [ [[ACC532_1_LCSSA:%.*]], [[FOR_COND_CLEANUP545]] ], [ 0.000000e+00, [[FOR_BODY530]] ]
; CHECK-NEXT:    [[I_POS_X531_01036:%.*]] = phi i32 [ [[ADD559:%.*]], [[FOR_COND_CLEANUP545]] ], [ [[I_POS_Y521_01042]], [[FOR_BODY530]] ]
; CHECK-NEXT:    [[TMP48:%.*]] = getelementptr float, ptr [[TMP2]], i32 [[I_POS_X531_01036]]
; CHECK-NEXT:    br i1 [[CMP5441031]], label [[FOR_BODY546_LR_PH:%.*]], label [[FOR_COND_CLEANUP545]]
; CHECK:       for.body546.lr.ph:
; CHECK-NEXT:    br label [[FOR_BODY546:%.*]]
; CHECK:       for.cond.cleanup539:
; CHECK-NEXT:    [[ACC532_0_LCSSA:%.*]] = phi float [ 0.000000e+00, [[FOR_BODY530]] ], [ [[ACC532_1_LCSSA]], [[FOR_COND_CLEANUP545]] ]
; CHECK-NEXT:    [[ADD564]] = add nsw i32 [[TMP14]], [[I_POS_Y521_01042]]
; CHECK-NEXT:    [[MUL566:%.*]] = mul nsw i32 [[TMP13]], [[X522_01043]]
; CHECK-NEXT:    [[GEP1045:%.*]] = getelementptr float, ptr [[INVARIANT_GEP1044]], i32 [[MUL566]]
; CHECK-NEXT:    store float [[ACC532_0_LCSSA]], ptr [[GEP1045]], align 4
; CHECK-NEXT:    [[INC574]] = add nsw i32 [[X522_01043]], 1
; CHECK-NEXT:    [[EXITCOND1073_NOT:%.*]] = icmp eq i32 [[INC574]], [[SUB527]]
; CHECK-NEXT:    br i1 [[EXITCOND1073_NOT]], label [[FOR_COND_CLEANUP529]], label [[FOR_BODY530]]
; CHECK:       for.cond.cleanup545:
; CHECK-NEXT:    [[ACC532_1_LCSSA]] = phi float [ [[ACC532_01037]], [[FOR_COND542_PREHEADER]] ], [ [[TMP51:%.*]], [[FOR_BODY546]] ]
; CHECK-NEXT:    [[ADD_PTR558]] = getelementptr inbounds float, ptr [[F_DATA533_01038]], i32 [[MUL10]]
; CHECK-NEXT:    [[ADD559]] = add nsw i32 [[I_POS_X531_01036]], [[MUL]]
; CHECK-NEXT:    [[INC561]] = add nuw nsw i32 [[M535_01039]], 1
; CHECK-NEXT:    [[EXITCOND1072_NOT:%.*]] = icmp eq i32 [[INC561]], [[TMP5]]
; CHECK-NEXT:    br i1 [[EXITCOND1072_NOT]], label [[FOR_COND_CLEANUP539]], label [[FOR_COND542_PREHEADER]]
; CHECK:       for.body546:
; CHECK-NEXT:    [[N541_01033:%.*]] = phi i32 [ 0, [[FOR_BODY546_LR_PH]] ], [ [[INC556:%.*]], [[FOR_BODY546]] ]
; CHECK-NEXT:    [[ACC532_11032:%.*]] = phi float [ [[ACC532_01037]], [[FOR_BODY546_LR_PH]] ], [ [[TMP51]], [[FOR_BODY546]] ]
; CHECK-NEXT:    [[MUL548:%.*]] = mul nsw i32 [[TMP14]], [[N541_01033]]
; CHECK-NEXT:    [[ARRAYIDX550:%.*]] = getelementptr float, ptr [[TMP48]], i32 [[MUL548]]
; CHECK-NEXT:    [[TMP49:%.*]] = load float, ptr [[ARRAYIDX550]], align 4
; CHECK-NEXT:    [[MUL552:%.*]] = mul nsw i32 [[TMP10]], [[N541_01033]]
; CHECK-NEXT:    [[ARRAYIDX553:%.*]] = getelementptr inbounds float, ptr [[F_DATA533_01038]], i32 [[MUL552]]
; CHECK-NEXT:    [[TMP50:%.*]] = load float, ptr [[ARRAYIDX553]], align 4
; CHECK-NEXT:    [[TMP51]] = tail call float @llvm.fmuladd.f32(float [[TMP49]], float [[TMP50]], float [[ACC532_11032]])
; CHECK-NEXT:    [[INC556]] = add nuw nsw i32 [[N541_01033]], 1
; CHECK-NEXT:    [[EXITCOND1071_NOT:%.*]] = icmp eq i32 [[INC556]], [[TMP4]]
; CHECK-NEXT:    br i1 [[EXITCOND1071_NOT]], label [[FOR_COND_CLEANUP545]], label [[FOR_BODY546]]
;
entry:
  %size_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 5
  %0 = load i32, ptr %size_x, align 4
  %size_x1 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 5
  store i32 %0, ptr %size_x1, align 4
  %size_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 6
  %1 = load i32, ptr %size_y, align 4
  %size_y2 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 6
  store i32 %1, ptr %size_y2, align 4
  %2 = load ptr, ptr %in_image, align 4
  %3 = load ptr, ptr %out_image, align 4
  %size_x4 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 5
  %4 = load i32, ptr %size_x4, align 4
  %sub = add nsw i32 %4, -1
  %shr = ashr i32 %sub, 1
  %size_y5 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 6
  %5 = load i32, ptr %size_y5, align 4
  %sub6 = add nsw i32 %5, -1
  %shr7 = ashr i32 %sub6, 1
  %stride_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 3
  %6 = load i32, ptr %stride_x, align 4
  %step_y = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 2
  %7 = load i32, ptr %step_y, align 4
  %mul = mul nsw i32 %7, %6
  %stride_x8 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 3
  %8 = load i32, ptr %stride_x8, align 4
  %step_y9 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 2
  %9 = load i32, ptr %step_y9, align 4
  %mul10 = mul nsw i32 %9, %8
  %cmp938 = icmp sgt i32 %shr7, 0
  br i1 %cmp938, label %for.cond11.preheader.lr.ph, label %for.cond176.preheader

for.cond11.preheader.lr.ph:                       ; preds = %entry
  %cmp12901 = icmp sgt i32 %shr, 0
  %step_x = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %step_x29 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %step_x39 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 1
  %stride_x41 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 3
  %step_y43 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 2
  %div.neg = sdiv i32 %4, -2
  %sub54 = add i32 %0, %div.neg
  %cmp55915 = icmp slt i32 %shr, %sub54
  %cmp72905 = icmp sgt i32 %4, 0
  %sub109 = add nsw i32 %sub54, -1
  %cmp112933.not = icmp sgt i32 %sub54, %0
  %div132 = sdiv i32 %4, 2
  %sub130 = sub i32 %div132, %0
  br label %for.cond11.preheader

for.cond11.preheader:                             ; preds = %for.cond.cleanup113, %for.cond11.preheader.lr.ph
  %y.0940 = phi i32 [ 0, %for.cond11.preheader.lr.ph ], [ %inc173, %for.cond.cleanup113 ]
  %i_pos.0939 = phi i32 [ 0, %for.cond11.preheader.lr.ph ], [ %add171, %for.cond.cleanup113 ]
  br i1 %cmp12901, label %for.body14.lr.ph, label %for.cond51.preheader

for.body14.lr.ph:                                 ; preds = %for.cond11.preheader
  %10 = load ptr, ptr %filter, align 4
  %sub16 = sub nsw i32 %shr7, %y.0940
  %cmp19895 = icmp slt i32 %sub16, %5
  %11 = load i32, ptr %step_x, align 4
  %12 = load i32, ptr %step_x39, align 4
  %13 = load i32, ptr %stride_x41, align 4
  %mul42 = mul nsw i32 %13, %y.0940
  %14 = load i32, ptr %step_y43, align 4
  %mul44 = mul nsw i32 %mul42, %14
  %invariant.gep = getelementptr float, ptr %3, i32 %mul44
  br label %for.body14

for.cond176.preheader:                            ; preds = %for.cond.cleanup113, %entry
  %div179.neg = sdiv i32 %5, -2
  %sub180 = add i32 %1, %div179.neg
  %cmp181973 = icmp slt i32 %shr7, %sub180
  br i1 %cmp181973, label %for.cond186.preheader.lr.ph, label %for.cond311.preheader

for.cond186.preheader.lr.ph:                      ; preds = %for.cond176.preheader
  %cmp187951 = icmp sgt i32 %shr, 0
  %cmp197945 = icmp sgt i32 %5, 0
  %step_x207 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %step_x211 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %step_x225 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 1
  %stride_x227 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 3
  %step_y229 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 2
  %div239.neg = sdiv i32 %4, -2
  %sub240 = add nsw i32 %div239.neg, -1
  %sub241 = add i32 %sub240, %0
  %cmp244967 = icmp slt i32 %sub241, %0
  %div263 = sdiv i32 %4, 2
  %sub261 = sub i32 %div263, %0
  br label %for.cond186.preheader

for.cond51.preheader:                             ; preds = %for.cond.cleanup20, %for.cond11.preheader
  %i_pos_y.0.lcssa = phi i32 [ %i_pos.0939, %for.cond11.preheader ], [ %add38, %for.cond.cleanup20 ]
  br i1 %cmp55915, label %for.body57.lr.ph, label %for.cond.cleanup56

for.body57.lr.ph:                                 ; preds = %for.cond51.preheader
  %15 = load ptr, ptr %filter, align 4
  %sub63 = sub nsw i32 %shr7, %y.0940
  %cmp66909 = icmp slt i32 %sub63, %5
  %16 = load i32, ptr %step_x, align 4
  %17 = load i32, ptr %step_x39, align 4
  %18 = load i32, ptr %stride_x41, align 4
  %mul96 = mul nsw i32 %18, %y.0940
  %19 = load i32, ptr %step_y43, align 4
  %mul98 = mul nsw i32 %mul96, %19
  %invariant.gep921 = getelementptr float, ptr %3, i32 %mul98
  br label %for.body57

for.body14:                                       ; preds = %for.cond.cleanup20, %for.body14.lr.ph
  %x.0903 = phi i32 [ 0, %for.body14.lr.ph ], [ %inc48, %for.cond.cleanup20 ]
  %i_pos_y.0902 = phi i32 [ %i_pos.0939, %for.body14.lr.ph ], [ %add38, %for.cond.cleanup20 ]
  br i1 %cmp19895, label %for.body21.lr.ph, label %for.cond.cleanup20

for.body21.lr.ph:                                 ; preds = %for.body14
  %sub22 = sub nsw i32 %shr, %x.0903
  %cmp25892 = icmp slt i32 %sub22, %4
  br label %for.body21

for.cond.cleanup20:                               ; preds = %for.cond.cleanup26, %for.body14
  %acc.0.lcssa = phi float [ 0.000000e+00, %for.body14 ], [ %acc.1.lcssa, %for.cond.cleanup26 ]
  %add38 = add nsw i32 %11, %i_pos_y.0902
  %mul40 = mul nsw i32 %12, %x.0903
  %gep = getelementptr float, ptr %invariant.gep, i32 %mul40
  store float %acc.0.lcssa, ptr %gep, align 4
  %inc48 = add nuw nsw i32 %x.0903, 1
  %exitcond.not = icmp eq i32 %inc48, %shr
  br i1 %exitcond.not, label %for.cond51.preheader, label %for.body14

for.body21:                                       ; preds = %for.cond.cleanup26, %for.body21.lr.ph
  %m.0899 = phi i32 [ %sub16, %for.body21.lr.ph ], [ %inc35, %for.cond.cleanup26 ]
  %f_data.0898 = phi ptr [ %10, %for.body21.lr.ph ], [ %add.ptr, %for.cond.cleanup26 ]
  %acc.0897 = phi float [ 0.000000e+00, %for.body21.lr.ph ], [ %acc.1.lcssa, %for.cond.cleanup26 ]
  %i_pos_x.0896 = phi i32 [ %i_pos_y.0902, %for.body21.lr.ph ], [ %add33, %for.cond.cleanup26 ]
  br i1 %cmp25892, label %for.body27.lr.ph, label %for.cond.cleanup26

for.body27.lr.ph:                                 ; preds = %for.body21
  %20 = getelementptr float, ptr %2, i32 %i_pos_x.0896
  %21 = load i32, ptr %step_x29, align 4
  br label %for.body27

for.cond.cleanup26:                               ; preds = %for.body27, %for.body21
  %acc.1.lcssa = phi float [ %acc.0897, %for.body21 ], [ %24, %for.body27 ]
  %add.ptr = getelementptr inbounds float, ptr %f_data.0898, i32 %mul10
  %add33 = add nsw i32 %i_pos_x.0896, %mul
  %inc35 = add nsw i32 %m.0899, 1
  %cmp19 = icmp slt i32 %inc35, %5
  br i1 %cmp19, label %for.body21, label %for.cond.cleanup20

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %n.0894 = phi i32 [ %sub22, %for.body27.lr.ph ], [ %inc, %for.body27 ]
  %acc.1893 = phi float [ %acc.0897, %for.body27.lr.ph ], [ %24, %for.body27 ]
  %mul28 = mul nsw i32 %11, %n.0894
  %arrayidx = getelementptr float, ptr %20, i32 %mul28
  %22 = load float, ptr %arrayidx, align 4
  %mul30 = mul nsw i32 %21, %n.0894
  %arrayidx31 = getelementptr inbounds float, ptr %f_data.0898, i32 %mul30
  %23 = load float, ptr %arrayidx31, align 4
  %24 = tail call float @llvm.fmuladd.f32(float %22, float %23, float %acc.1893)
  %inc = add nsw i32 %n.0894, 1
  %cmp25 = icmp slt i32 %inc, %4
  br i1 %cmp25, label %for.body27, label %for.cond.cleanup26

for.cond.cleanup56:                               ; preds = %for.cond.cleanup67, %for.cond51.preheader
  %i_pos_y.1.lcssa = phi i32 [ %i_pos_y.0.lcssa, %for.cond51.preheader ], [ %add92, %for.cond.cleanup67 ]
  br i1 %cmp112933.not, label %for.cond.cleanup113, label %for.body114.lr.ph

for.body114.lr.ph:                                ; preds = %for.cond.cleanup56
  %25 = load ptr, ptr %filter, align 4
  %sub120 = sub nsw i32 %shr7, %y.0940
  %cmp123927 = icmp slt i32 %sub120, %5
  %26 = load i32, ptr %step_x, align 4
  %27 = load i32, ptr %step_x39, align 4
  %28 = load i32, ptr %stride_x41, align 4
  %mul160 = mul nsw i32 %28, %y.0940
  %29 = load i32, ptr %step_y43, align 4
  %mul162 = mul nsw i32 %mul160, %29
  %invariant.gep936 = getelementptr float, ptr %3, i32 %mul162
  br label %for.body114

for.body57:                                       ; preds = %for.cond.cleanup67, %for.body57.lr.ph
  %x50.0917 = phi i32 [ %shr, %for.body57.lr.ph ], [ %inc102, %for.cond.cleanup67 ]
  %i_pos_y.1916 = phi i32 [ %i_pos_y.0.lcssa, %for.body57.lr.ph ], [ %add92, %for.cond.cleanup67 ]
  br i1 %cmp66909, label %for.cond70.preheader, label %for.cond.cleanup67

for.cond70.preheader:                             ; preds = %for.cond.cleanup73, %for.body57
  %m62.0913 = phi i32 [ %inc89, %for.cond.cleanup73 ], [ %sub63, %for.body57 ]
  %f_data60.0912 = phi ptr [ %add.ptr86, %for.cond.cleanup73 ], [ %15, %for.body57 ]
  %acc59.0911 = phi float [ %acc59.1.lcssa, %for.cond.cleanup73 ], [ 0.000000e+00, %for.body57 ]
  %i_pos_x58.0910 = phi i32 [ %add87, %for.cond.cleanup73 ], [ %i_pos_y.1916, %for.body57 ]
  br i1 %cmp72905, label %for.body74.lr.ph, label %for.cond.cleanup73

for.body74.lr.ph:                                 ; preds = %for.cond70.preheader
  %30 = getelementptr float, ptr %2, i32 %i_pos_x58.0910
  %31 = load i32, ptr %step_x29, align 4
  br label %for.body74

for.cond.cleanup67:                               ; preds = %for.cond.cleanup73, %for.body57
  %acc59.0.lcssa = phi float [ 0.000000e+00, %for.body57 ], [ %acc59.1.lcssa, %for.cond.cleanup73 ]
  %add92 = add nsw i32 %16, %i_pos_y.1916
  %mul94 = mul nsw i32 %17, %x50.0917
  %gep922 = getelementptr float, ptr %invariant.gep921, i32 %mul94
  store float %acc59.0.lcssa, ptr %gep922, align 4
  %inc102 = add nsw i32 %x50.0917, 1
  %exitcond1058.not = icmp eq i32 %inc102, %sub54
  br i1 %exitcond1058.not, label %for.cond.cleanup56, label %for.body57

for.cond.cleanup73:                               ; preds = %for.body74, %for.cond70.preheader
  %acc59.1.lcssa = phi float [ %acc59.0911, %for.cond70.preheader ], [ %34, %for.body74 ]
  %add.ptr86 = getelementptr inbounds float, ptr %f_data60.0912, i32 %mul10
  %add87 = add nsw i32 %i_pos_x58.0910, %mul
  %inc89 = add nsw i32 %m62.0913, 1
  %cmp66 = icmp slt i32 %inc89, %5
  br i1 %cmp66, label %for.cond70.preheader, label %for.cond.cleanup67

for.body74:                                       ; preds = %for.body74, %for.body74.lr.ph
  %n69.0907 = phi i32 [ 0, %for.body74.lr.ph ], [ %inc84, %for.body74 ]
  %acc59.1906 = phi float [ %acc59.0911, %for.body74.lr.ph ], [ %34, %for.body74 ]
  %mul76 = mul nsw i32 %16, %n69.0907
  %arrayidx78 = getelementptr float, ptr %30, i32 %mul76
  %32 = load float, ptr %arrayidx78, align 4
  %mul80 = mul nsw i32 %31, %n69.0907
  %arrayidx81 = getelementptr inbounds float, ptr %f_data60.0912, i32 %mul80
  %33 = load float, ptr %arrayidx81, align 4
  %34 = tail call float @llvm.fmuladd.f32(float %32, float %33, float %acc59.1906)
  %inc84 = add nuw nsw i32 %n69.0907, 1
  %exitcond1057.not = icmp eq i32 %inc84, %4
  br i1 %exitcond1057.not, label %for.cond.cleanup73, label %for.body74

for.cond.cleanup113:                              ; preds = %for.cond.cleanup124, %for.cond.cleanup56
  %add171 = add nsw i32 %i_pos.0939, %mul
  %inc173 = add nuw nsw i32 %y.0940, 1
  %exitcond1060.not = icmp eq i32 %inc173, %shr7
  br i1 %exitcond1060.not, label %for.cond176.preheader, label %for.cond11.preheader

for.body114:                                      ; preds = %for.cond.cleanup124, %for.body114.lr.ph
  %x104.0935 = phi i32 [ %sub109, %for.body114.lr.ph ], [ %inc166, %for.cond.cleanup124 ]
  %i_pos_y.2934 = phi i32 [ %i_pos_y.1.lcssa, %for.body114.lr.ph ], [ %add156, %for.cond.cleanup124 ]
  br i1 %cmp123927, label %for.cond127.preheader.lr.ph, label %for.cond.cleanup124

for.cond127.preheader.lr.ph:                      ; preds = %for.body114
  %add133 = add i32 %sub130, %x104.0935
  %add134.neg = xor i32 %add133, -1
  %sub135 = add i32 %4, %add134.neg
  %cmp136923 = icmp sgt i32 %sub135, 0
  br label %for.cond127.preheader

for.cond127.preheader:                            ; preds = %for.cond.cleanup137, %for.cond127.preheader.lr.ph
  %m119.0931 = phi i32 [ %sub120, %for.cond127.preheader.lr.ph ], [ %inc153, %for.cond.cleanup137 ]
  %f_data117.0930 = phi ptr [ %25, %for.cond127.preheader.lr.ph ], [ %add.ptr150, %for.cond.cleanup137 ]
  %acc116.0929 = phi float [ 0.000000e+00, %for.cond127.preheader.lr.ph ], [ %acc116.1.lcssa, %for.cond.cleanup137 ]
  %i_pos_x115.0928 = phi i32 [ %i_pos_y.2934, %for.cond127.preheader.lr.ph ], [ %add151, %for.cond.cleanup137 ]
  br i1 %cmp136923, label %for.body138.lr.ph, label %for.cond.cleanup137

for.body138.lr.ph:                                ; preds = %for.cond127.preheader
  %35 = getelementptr float, ptr %2, i32 %i_pos_x115.0928
  %36 = load i32, ptr %step_x29, align 4
  br label %for.body138

for.cond.cleanup124:                              ; preds = %for.cond.cleanup137, %for.body114
  %acc116.0.lcssa = phi float [ 0.000000e+00, %for.body114 ], [ %acc116.1.lcssa, %for.cond.cleanup137 ]
  %add156 = add nsw i32 %26, %i_pos_y.2934
  %mul158 = mul nsw i32 %27, %x104.0935
  %gep937 = getelementptr float, ptr %invariant.gep936, i32 %mul158
  store float %acc116.0.lcssa, ptr %gep937, align 4
  %inc166 = add nsw i32 %x104.0935, 1
  %exitcond1059.not = icmp eq i32 %inc166, %0
  br i1 %exitcond1059.not, label %for.cond.cleanup113, label %for.body114

for.cond.cleanup137:                              ; preds = %for.body138, %for.cond127.preheader
  %acc116.1.lcssa = phi float [ %acc116.0929, %for.cond127.preheader ], [ %39, %for.body138 ]
  %add.ptr150 = getelementptr inbounds float, ptr %f_data117.0930, i32 %mul10
  %add151 = add nsw i32 %i_pos_x115.0928, %mul
  %inc153 = add nsw i32 %m119.0931, 1
  %cmp123 = icmp slt i32 %inc153, %5
  br i1 %cmp123, label %for.cond127.preheader, label %for.cond.cleanup124

for.body138:                                      ; preds = %for.body138, %for.body138.lr.ph
  %n126.0925 = phi i32 [ 0, %for.body138.lr.ph ], [ %inc148, %for.body138 ]
  %acc116.1924 = phi float [ %acc116.0929, %for.body138.lr.ph ], [ %39, %for.body138 ]
  %mul140 = mul nsw i32 %26, %n126.0925
  %arrayidx142 = getelementptr float, ptr %35, i32 %mul140
  %37 = load float, ptr %arrayidx142, align 4
  %mul144 = mul nsw i32 %36, %n126.0925
  %arrayidx145 = getelementptr inbounds float, ptr %f_data117.0930, i32 %mul144
  %38 = load float, ptr %arrayidx145, align 4
  %39 = tail call float @llvm.fmuladd.f32(float %37, float %38, float %acc116.1924)
  %inc148 = add nuw nsw i32 %n126.0925, 1
  %cmp136 = icmp slt i32 %inc148, %sub135
  br i1 %cmp136, label %for.body138, label %for.cond.cleanup137

for.cond186.preheader:                            ; preds = %for.cond.cleanup245, %for.cond186.preheader.lr.ph
  %y175.0975 = phi i32 [ %shr7, %for.cond186.preheader.lr.ph ], [ %inc304, %for.cond.cleanup245 ]
  %i_pos.1974 = phi i32 [ 0, %for.cond186.preheader.lr.ph ], [ %add302, %for.cond.cleanup245 ]
  br i1 %cmp187951, label %for.body189.lr.ph, label %for.cond.cleanup188

for.body189.lr.ph:                                ; preds = %for.cond186.preheader
  %40 = load ptr, ptr %filter, align 4
  %41 = load i32, ptr %step_x207, align 4
  %42 = load i32, ptr %step_x225, align 4
  %43 = load i32, ptr %stride_x227, align 4
  %mul228 = mul nsw i32 %43, %y175.0975
  %44 = load i32, ptr %step_y229, align 4
  %mul230 = mul nsw i32 %mul228, %44
  %invariant.gep955 = getelementptr float, ptr %3, i32 %mul230
  br label %for.body189

for.cond311.preheader:                            ; preds = %for.cond.cleanup245, %for.cond176.preheader
  %cmp3131028 = icmp slt i32 %sub180, %1
  br i1 %cmp3131028, label %for.cond318.preheader.lr.ph, label %for.cond513.preheader

for.cond318.preheader.lr.ph:                      ; preds = %for.cond311.preheader
  %cmp319989 = icmp sgt i32 %shr, 0
  %div332 = sdiv i32 %5, 2
  %sub330 = sub i32 %div332, %1
  %step_x346 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %step_x350 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %step_x364 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 1
  %stride_x366 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 3
  %step_y368 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 2
  %div379.neg = sdiv i32 %4, -2
  %sub380 = add i32 %0, %div379.neg
  %cmp3811005 = icmp slt i32 %shr, %sub380
  %cmp404995 = icmp sgt i32 %4, 0
  %cmp4431023 = icmp slt i32 %sub380, %0
  %div469 = sdiv i32 %4, 2
  %sub467 = sub i32 %div469, %0
  br label %for.cond318.preheader

for.cond.cleanup188:                              ; preds = %for.cond.cleanup198, %for.cond186.preheader
  %i_pos_y184.0.lcssa = phi i32 [ %i_pos.1974, %for.cond186.preheader ], [ %add224, %for.cond.cleanup198 ]
  br i1 %cmp244967, label %for.body246.lr.ph, label %for.cond.cleanup245

for.body246.lr.ph:                                ; preds = %for.cond.cleanup188
  %45 = load ptr, ptr %filter, align 4
  %46 = load i32, ptr %step_x207, align 4
  %47 = load i32, ptr %step_x225, align 4
  %48 = load i32, ptr %stride_x227, align 4
  %mul291 = mul nsw i32 %48, %y175.0975
  %49 = load i32, ptr %step_y229, align 4
  %mul293 = mul nsw i32 %mul291, %49
  %invariant.gep970 = getelementptr float, ptr %3, i32 %mul293
  br label %for.body246

for.body189:                                      ; preds = %for.cond.cleanup198, %for.body189.lr.ph
  %x185.0953 = phi i32 [ 0, %for.body189.lr.ph ], [ %inc234, %for.cond.cleanup198 ]
  %i_pos_y184.0952 = phi i32 [ %i_pos.1974, %for.body189.lr.ph ], [ %add224, %for.cond.cleanup198 ]
  br i1 %cmp197945, label %for.body199.lr.ph, label %for.cond.cleanup198

for.body199.lr.ph:                                ; preds = %for.body189
  %sub201 = sub nsw i32 %shr, %x185.0953
  %cmp204941 = icmp slt i32 %sub201, %4
  br label %for.body199

for.cond.cleanup198:                              ; preds = %for.cond.cleanup205, %for.body189
  %acc191.0.lcssa = phi float [ 0.000000e+00, %for.body189 ], [ %acc191.1.lcssa, %for.cond.cleanup205 ]
  %add224 = add nsw i32 %41, %i_pos_y184.0952
  %mul226 = mul nsw i32 %42, %x185.0953
  %gep956 = getelementptr float, ptr %invariant.gep955, i32 %mul226
  store float %acc191.0.lcssa, ptr %gep956, align 4
  %inc234 = add nuw nsw i32 %x185.0953, 1
  %exitcond1062.not = icmp eq i32 %inc234, %shr
  br i1 %exitcond1062.not, label %for.cond.cleanup188, label %for.body189

for.body199:                                      ; preds = %for.cond.cleanup205, %for.body199.lr.ph
  %m194.0949 = phi i32 [ 0, %for.body199.lr.ph ], [ %inc221, %for.cond.cleanup205 ]
  %f_data192.0948 = phi ptr [ %40, %for.body199.lr.ph ], [ %add.ptr218, %for.cond.cleanup205 ]
  %acc191.0947 = phi float [ 0.000000e+00, %for.body199.lr.ph ], [ %acc191.1.lcssa, %for.cond.cleanup205 ]
  %i_pos_x190.0946 = phi i32 [ %i_pos_y184.0952, %for.body199.lr.ph ], [ %add219, %for.cond.cleanup205 ]
  br i1 %cmp204941, label %for.body206.lr.ph, label %for.cond.cleanup205

for.body206.lr.ph:                                ; preds = %for.body199
  %50 = getelementptr float, ptr %2, i32 %i_pos_x190.0946
  %51 = load i32, ptr %step_x211, align 4
  br label %for.body206

for.cond.cleanup205:                              ; preds = %for.body206, %for.body199
  %acc191.1.lcssa = phi float [ %acc191.0947, %for.body199 ], [ %54, %for.body206 ]
  %add.ptr218 = getelementptr inbounds float, ptr %f_data192.0948, i32 %mul10
  %add219 = add nsw i32 %i_pos_x190.0946, %mul
  %inc221 = add nuw nsw i32 %m194.0949, 1
  %exitcond1061.not = icmp eq i32 %inc221, %5
  br i1 %exitcond1061.not, label %for.cond.cleanup198, label %for.body199

for.body206:                                      ; preds = %for.body206, %for.body206.lr.ph
  %n200.0943 = phi i32 [ %sub201, %for.body206.lr.ph ], [ %inc216, %for.body206 ]
  %acc191.1942 = phi float [ %acc191.0947, %for.body206.lr.ph ], [ %54, %for.body206 ]
  %mul208 = mul nsw i32 %41, %n200.0943
  %arrayidx210 = getelementptr float, ptr %50, i32 %mul208
  %52 = load float, ptr %arrayidx210, align 4
  %mul212 = mul nsw i32 %51, %n200.0943
  %arrayidx213 = getelementptr inbounds float, ptr %f_data192.0948, i32 %mul212
  %53 = load float, ptr %arrayidx213, align 4
  %54 = tail call float @llvm.fmuladd.f32(float %52, float %53, float %acc191.1942)
  %inc216 = add nsw i32 %n200.0943, 1
  %cmp204 = icmp slt i32 %inc216, %4
  br i1 %cmp204, label %for.body206, label %for.cond.cleanup205

for.cond.cleanup245:                              ; preds = %for.cond.cleanup255, %for.cond.cleanup188
  %add302 = add nsw i32 %i_pos.1974, %mul
  %inc304 = add nsw i32 %y175.0975, 1
  %exitcond1065.not = icmp eq i32 %inc304, %sub180
  br i1 %exitcond1065.not, label %for.cond311.preheader, label %for.cond186.preheader

for.body246:                                      ; preds = %for.cond.cleanup255, %for.body246.lr.ph
  %x236.0969 = phi i32 [ %sub241, %for.body246.lr.ph ], [ %inc297, %for.cond.cleanup255 ]
  %i_pos_y184.1968 = phi i32 [ %i_pos_y184.0.lcssa, %for.body246.lr.ph ], [ %add287, %for.cond.cleanup255 ]
  br i1 %cmp197945, label %for.cond258.preheader.lr.ph, label %for.cond.cleanup255

for.cond258.preheader.lr.ph:                      ; preds = %for.body246
  %add264 = add i32 %sub261, %x236.0969
  %add265.neg = xor i32 %add264, -1
  %sub266 = add i32 %4, %add265.neg
  %cmp267957 = icmp sgt i32 %sub266, 0
  br label %for.cond258.preheader

for.cond258.preheader:                            ; preds = %for.cond.cleanup268, %for.cond258.preheader.lr.ph
  %m251.0965 = phi i32 [ 0, %for.cond258.preheader.lr.ph ], [ %inc284, %for.cond.cleanup268 ]
  %f_data249.0964 = phi ptr [ %45, %for.cond258.preheader.lr.ph ], [ %add.ptr281, %for.cond.cleanup268 ]
  %acc248.0963 = phi float [ 0.000000e+00, %for.cond258.preheader.lr.ph ], [ %acc248.1.lcssa, %for.cond.cleanup268 ]
  %i_pos_x247.0962 = phi i32 [ %i_pos_y184.1968, %for.cond258.preheader.lr.ph ], [ %add282, %for.cond.cleanup268 ]
  br i1 %cmp267957, label %for.body269.lr.ph, label %for.cond.cleanup268

for.body269.lr.ph:                                ; preds = %for.cond258.preheader
  %55 = getelementptr float, ptr %2, i32 %i_pos_x247.0962
  %56 = load i32, ptr %step_x211, align 4
  br label %for.body269

for.cond.cleanup255:                              ; preds = %for.cond.cleanup268, %for.body246
  %acc248.0.lcssa = phi float [ 0.000000e+00, %for.body246 ], [ %acc248.1.lcssa, %for.cond.cleanup268 ]
  %add287 = add nsw i32 %46, %i_pos_y184.1968
  %mul289 = mul nsw i32 %47, %x236.0969
  %gep971 = getelementptr float, ptr %invariant.gep970, i32 %mul289
  store float %acc248.0.lcssa, ptr %gep971, align 4
  %inc297 = add nsw i32 %x236.0969, 1
  %exitcond1064.not = icmp eq i32 %inc297, %0
  br i1 %exitcond1064.not, label %for.cond.cleanup245, label %for.body246

for.cond.cleanup268:                              ; preds = %for.body269, %for.cond258.preheader
  %acc248.1.lcssa = phi float [ %acc248.0963, %for.cond258.preheader ], [ %59, %for.body269 ]
  %add.ptr281 = getelementptr inbounds float, ptr %f_data249.0964, i32 %mul10
  %add282 = add nsw i32 %i_pos_x247.0962, %mul
  %inc284 = add nuw nsw i32 %m251.0965, 1
  %exitcond1063.not = icmp eq i32 %inc284, %5
  br i1 %exitcond1063.not, label %for.cond.cleanup255, label %for.cond258.preheader

for.body269:                                      ; preds = %for.body269, %for.body269.lr.ph
  %n257.0959 = phi i32 [ 0, %for.body269.lr.ph ], [ %inc279, %for.body269 ]
  %acc248.1958 = phi float [ %acc248.0963, %for.body269.lr.ph ], [ %59, %for.body269 ]
  %mul271 = mul nsw i32 %46, %n257.0959
  %arrayidx273 = getelementptr float, ptr %55, i32 %mul271
  %57 = load float, ptr %arrayidx273, align 4
  %mul275 = mul nsw i32 %56, %n257.0959
  %arrayidx276 = getelementptr inbounds float, ptr %f_data249.0964, i32 %mul275
  %58 = load float, ptr %arrayidx276, align 4
  %59 = tail call float @llvm.fmuladd.f32(float %57, float %58, float %acc248.1958)
  %inc279 = add nuw nsw i32 %n257.0959, 1
  %cmp267 = icmp slt i32 %inc279, %sub266
  br i1 %cmp267, label %for.body269, label %for.cond.cleanup268

for.cond318.preheader:                            ; preds = %for.cond.cleanup444, %for.cond318.preheader.lr.ph
  %y306.01030 = phi i32 [ %sub180, %for.cond318.preheader.lr.ph ], [ %inc510, %for.cond.cleanup444 ]
  %i_pos.21029 = phi i32 [ 0, %for.cond318.preheader.lr.ph ], [ %add508, %for.cond.cleanup444 ]
  br i1 %cmp319989, label %for.body321.lr.ph, label %for.cond376.preheader

for.body321.lr.ph:                                ; preds = %for.cond318.preheader
  %60 = load ptr, ptr %filter, align 4
  %add333 = add i32 %sub330, %y306.01030
  %add334.neg = xor i32 %add333, -1
  %sub335 = add i32 %5, %add334.neg
  %cmp336983 = icmp sgt i32 %sub335, 0
  %61 = load i32, ptr %step_x346, align 4
  %62 = load i32, ptr %step_x364, align 4
  %63 = load i32, ptr %stride_x366, align 4
  %mul367 = mul nsw i32 %63, %y306.01030
  %64 = load i32, ptr %step_y368, align 4
  %mul369 = mul nsw i32 %mul367, %64
  %invariant.gep993 = getelementptr float, ptr %3, i32 %mul369
  br label %for.body321

for.cond513.preheader:                            ; preds = %for.cond.cleanup444, %for.cond311.preheader
  br i1 %cmp181973, label %for.cond523.preheader.lr.ph, label %for.cond.cleanup519

for.cond523.preheader.lr.ph:                      ; preds = %for.cond513.preheader
  %div526.neg = sdiv i32 %4, -2
  %sub527 = add i32 %0, %div526.neg
  %cmp5281041 = icmp slt i32 %shr, %sub527
  %cmp5381035 = icmp sgt i32 %5, 0
  %cmp5441031 = icmp sgt i32 %4, 0
  %step_x547 = getelementptr inbounds %struct.image2d_s, ptr %in_image, i32 0, i32 1
  %step_x551 = getelementptr inbounds %struct.image2d_s, ptr %filter, i32 0, i32 1
  %step_x565 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 1
  %stride_x567 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 3
  %step_y569 = getelementptr inbounds %struct.image2d_s, ptr %out_image, i32 0, i32 2
  br label %for.cond523.preheader

for.cond376.preheader:                            ; preds = %for.cond.cleanup337, %for.cond318.preheader
  %i_pos_y316.0.lcssa = phi i32 [ %i_pos.21029, %for.cond318.preheader ], [ %add363, %for.cond.cleanup337 ]
  br i1 %cmp3811005, label %for.body383.lr.ph, label %for.cond441.preheader

for.body383.lr.ph:                                ; preds = %for.cond376.preheader
  %65 = load ptr, ptr %filter, align 4
  %add395 = add i32 %sub330, %y306.01030
  %add396.neg = xor i32 %add395, -1
  %sub397 = add i32 %5, %add396.neg
  %cmp398999 = icmp sgt i32 %sub397, 0
  %66 = load i32, ptr %step_x346, align 4
  %67 = load i32, ptr %step_x364, align 4
  %68 = load i32, ptr %stride_x366, align 4
  %mul428 = mul nsw i32 %68, %y306.01030
  %69 = load i32, ptr %step_y368, align 4
  %mul430 = mul nsw i32 %mul428, %69
  %invariant.gep1011 = getelementptr float, ptr %3, i32 %mul430
  br label %for.body383

for.body321:                                      ; preds = %for.cond.cleanup337, %for.body321.lr.ph
  %x317.0991 = phi i32 [ 0, %for.body321.lr.ph ], [ %inc373, %for.cond.cleanup337 ]
  %i_pos_y316.0990 = phi i32 [ %i_pos.21029, %for.body321.lr.ph ], [ %add363, %for.cond.cleanup337 ]
  br i1 %cmp336983, label %for.body338.lr.ph, label %for.cond.cleanup337

for.body338.lr.ph:                                ; preds = %for.body321
  %sub340 = sub nsw i32 %shr, %x317.0991
  %cmp343979 = icmp slt i32 %sub340, %4
  br label %for.body338

for.cond.cleanup337:                              ; preds = %for.cond.cleanup344, %for.body321
  %acc323.0.lcssa = phi float [ 0.000000e+00, %for.body321 ], [ %acc323.1.lcssa, %for.cond.cleanup344 ]
  %add363 = add nsw i32 %61, %i_pos_y316.0990
  %mul365 = mul nsw i32 %62, %x317.0991
  %gep994 = getelementptr float, ptr %invariant.gep993, i32 %mul365
  store float %acc323.0.lcssa, ptr %gep994, align 4
  %inc373 = add nuw nsw i32 %x317.0991, 1
  %exitcond1066.not = icmp eq i32 %inc373, %shr
  br i1 %exitcond1066.not, label %for.cond376.preheader, label %for.body321

for.body338:                                      ; preds = %for.cond.cleanup344, %for.body338.lr.ph
  %m326.0987 = phi i32 [ 0, %for.body338.lr.ph ], [ %inc360, %for.cond.cleanup344 ]
  %f_data324.0986 = phi ptr [ %60, %for.body338.lr.ph ], [ %add.ptr357, %for.cond.cleanup344 ]
  %acc323.0985 = phi float [ 0.000000e+00, %for.body338.lr.ph ], [ %acc323.1.lcssa, %for.cond.cleanup344 ]
  %i_pos_x322.0984 = phi i32 [ %i_pos_y316.0990, %for.body338.lr.ph ], [ %add358, %for.cond.cleanup344 ]
  br i1 %cmp343979, label %for.body345.lr.ph, label %for.cond.cleanup344

for.body345.lr.ph:                                ; preds = %for.body338
  %70 = getelementptr float, ptr %2, i32 %i_pos_x322.0984
  %71 = load i32, ptr %step_x350, align 4
  br label %for.body345

for.cond.cleanup344:                              ; preds = %for.body345, %for.body338
  %acc323.1.lcssa = phi float [ %acc323.0985, %for.body338 ], [ %74, %for.body345 ]
  %add.ptr357 = getelementptr inbounds float, ptr %f_data324.0986, i32 %mul10
  %add358 = add nsw i32 %i_pos_x322.0984, %mul
  %inc360 = add nuw nsw i32 %m326.0987, 1
  %cmp336 = icmp slt i32 %inc360, %sub335
  br i1 %cmp336, label %for.body338, label %for.cond.cleanup337

for.body345:                                      ; preds = %for.body345, %for.body345.lr.ph
  %n339.0981 = phi i32 [ %sub340, %for.body345.lr.ph ], [ %inc355, %for.body345 ]
  %acc323.1980 = phi float [ %acc323.0985, %for.body345.lr.ph ], [ %74, %for.body345 ]
  %mul347 = mul nsw i32 %61, %n339.0981
  %arrayidx349 = getelementptr float, ptr %70, i32 %mul347
  %72 = load float, ptr %arrayidx349, align 4
  %mul351 = mul nsw i32 %71, %n339.0981
  %arrayidx352 = getelementptr inbounds float, ptr %f_data324.0986, i32 %mul351
  %73 = load float, ptr %arrayidx352, align 4
  %74 = tail call float @llvm.fmuladd.f32(float %72, float %73, float %acc323.1980)
  %inc355 = add nsw i32 %n339.0981, 1
  %cmp343 = icmp slt i32 %inc355, %4
  br i1 %cmp343, label %for.body345, label %for.cond.cleanup344

for.cond441.preheader:                            ; preds = %for.cond.cleanup399, %for.cond376.preheader
  %i_pos_y316.1.lcssa = phi i32 [ %i_pos_y316.0.lcssa, %for.cond376.preheader ], [ %add424, %for.cond.cleanup399 ]
  br i1 %cmp4431023, label %for.body445.lr.ph, label %for.cond.cleanup444

for.body445.lr.ph:                                ; preds = %for.cond441.preheader
  %75 = load ptr, ptr %filter, align 4
  %add457 = add i32 %sub330, %y306.01030
  %add458.neg = xor i32 %add457, -1
  %sub459 = add i32 %5, %add458.neg
  %cmp4601017 = icmp sgt i32 %sub459, 0
  %76 = load i32, ptr %step_x346, align 4
  %77 = load i32, ptr %step_x364, align 4
  %78 = load i32, ptr %stride_x366, align 4
  %mul497 = mul nsw i32 %78, %y306.01030
  %79 = load i32, ptr %step_y368, align 4
  %mul499 = mul nsw i32 %mul497, %79
  %invariant.gep1026 = getelementptr float, ptr %3, i32 %mul499
  br label %for.body445

for.body383:                                      ; preds = %for.cond.cleanup399, %for.body383.lr.ph
  %x375.01007 = phi i32 [ %shr, %for.body383.lr.ph ], [ %inc434, %for.cond.cleanup399 ]
  %i_pos_y316.11006 = phi i32 [ %i_pos_y316.0.lcssa, %for.body383.lr.ph ], [ %add424, %for.cond.cleanup399 ]
  br i1 %cmp398999, label %for.cond402.preheader, label %for.cond.cleanup399

for.cond402.preheader:                            ; preds = %for.cond.cleanup405, %for.body383
  %m388.01003 = phi i32 [ %inc421, %for.cond.cleanup405 ], [ 0, %for.body383 ]
  %f_data386.01002 = phi ptr [ %add.ptr418, %for.cond.cleanup405 ], [ %65, %for.body383 ]
  %acc385.01001 = phi float [ %acc385.1.lcssa, %for.cond.cleanup405 ], [ 0.000000e+00, %for.body383 ]
  %i_pos_x384.01000 = phi i32 [ %add419, %for.cond.cleanup405 ], [ %i_pos_y316.11006, %for.body383 ]
  br i1 %cmp404995, label %for.body406.lr.ph, label %for.cond.cleanup405

for.body406.lr.ph:                                ; preds = %for.cond402.preheader
  %80 = getelementptr float, ptr %2, i32 %i_pos_x384.01000
  %81 = load i32, ptr %step_x350, align 4
  br label %for.body406

for.cond.cleanup399:                              ; preds = %for.cond.cleanup405, %for.body383
  %acc385.0.lcssa = phi float [ 0.000000e+00, %for.body383 ], [ %acc385.1.lcssa, %for.cond.cleanup405 ]
  %add424 = add nsw i32 %66, %i_pos_y316.11006
  %mul426 = mul nsw i32 %67, %x375.01007
  %gep1012 = getelementptr float, ptr %invariant.gep1011, i32 %mul426
  store float %acc385.0.lcssa, ptr %gep1012, align 4
  %inc434 = add nsw i32 %x375.01007, 1
  %exitcond1068.not = icmp eq i32 %inc434, %sub380
  br i1 %exitcond1068.not, label %for.cond441.preheader, label %for.body383

for.cond.cleanup405:                              ; preds = %for.body406, %for.cond402.preheader
  %acc385.1.lcssa = phi float [ %acc385.01001, %for.cond402.preheader ], [ %84, %for.body406 ]
  %add.ptr418 = getelementptr inbounds float, ptr %f_data386.01002, i32 %mul10
  %add419 = add nsw i32 %i_pos_x384.01000, %mul
  %inc421 = add nuw nsw i32 %m388.01003, 1
  %cmp398 = icmp slt i32 %inc421, %sub397
  br i1 %cmp398, label %for.cond402.preheader, label %for.cond.cleanup399

for.body406:                                      ; preds = %for.body406, %for.body406.lr.ph
  %n401.0997 = phi i32 [ 0, %for.body406.lr.ph ], [ %inc416, %for.body406 ]
  %acc385.1996 = phi float [ %acc385.01001, %for.body406.lr.ph ], [ %84, %for.body406 ]
  %mul408 = mul nsw i32 %66, %n401.0997
  %arrayidx410 = getelementptr float, ptr %80, i32 %mul408
  %82 = load float, ptr %arrayidx410, align 4
  %mul412 = mul nsw i32 %81, %n401.0997
  %arrayidx413 = getelementptr inbounds float, ptr %f_data386.01002, i32 %mul412
  %83 = load float, ptr %arrayidx413, align 4
  %84 = tail call float @llvm.fmuladd.f32(float %82, float %83, float %acc385.1996)
  %inc416 = add nuw nsw i32 %n401.0997, 1
  %exitcond1067.not = icmp eq i32 %inc416, %4
  br i1 %exitcond1067.not, label %for.cond.cleanup405, label %for.body406

for.cond.cleanup444:                              ; preds = %for.cond.cleanup461, %for.cond441.preheader
  %add508 = add nsw i32 %i_pos.21029, %mul
  %inc510 = add nsw i32 %y306.01030, 1
  %exitcond1070.not = icmp eq i32 %inc510, %1
  br i1 %exitcond1070.not, label %for.cond513.preheader, label %for.cond318.preheader

for.body445:                                      ; preds = %for.cond.cleanup461, %for.body445.lr.ph
  %x436.01025 = phi i32 [ %sub380, %for.body445.lr.ph ], [ %inc503, %for.cond.cleanup461 ]
  %i_pos_y316.21024 = phi i32 [ %i_pos_y316.1.lcssa, %for.body445.lr.ph ], [ %add493, %for.cond.cleanup461 ]
  br i1 %cmp4601017, label %for.cond464.preheader.lr.ph, label %for.cond.cleanup461

for.cond464.preheader.lr.ph:                      ; preds = %for.body445
  %add470 = add i32 %sub467, %x436.01025
  %add471.neg = xor i32 %add470, -1
  %sub472 = add i32 %4, %add471.neg
  %cmp4731013 = icmp sgt i32 %sub472, 0
  br label %for.cond464.preheader

for.cond464.preheader:                            ; preds = %for.cond.cleanup474, %for.cond464.preheader.lr.ph
  %m450.01021 = phi i32 [ 0, %for.cond464.preheader.lr.ph ], [ %inc490, %for.cond.cleanup474 ]
  %f_data448.01020 = phi ptr [ %75, %for.cond464.preheader.lr.ph ], [ %add.ptr487, %for.cond.cleanup474 ]
  %acc447.01019 = phi float [ 0.000000e+00, %for.cond464.preheader.lr.ph ], [ %acc447.1.lcssa, %for.cond.cleanup474 ]
  %i_pos_x446.01018 = phi i32 [ %i_pos_y316.21024, %for.cond464.preheader.lr.ph ], [ %add488, %for.cond.cleanup474 ]
  br i1 %cmp4731013, label %for.body475.lr.ph, label %for.cond.cleanup474

for.body475.lr.ph:                                ; preds = %for.cond464.preheader
  %85 = getelementptr float, ptr %2, i32 %i_pos_x446.01018
  %86 = load i32, ptr %step_x350, align 4
  br label %for.body475

for.cond.cleanup461:                              ; preds = %for.cond.cleanup474, %for.body445
  %acc447.0.lcssa = phi float [ 0.000000e+00, %for.body445 ], [ %acc447.1.lcssa, %for.cond.cleanup474 ]
  %add493 = add nsw i32 %76, %i_pos_y316.21024
  %mul495 = mul nsw i32 %77, %x436.01025
  %gep1027 = getelementptr float, ptr %invariant.gep1026, i32 %mul495
  store float %acc447.0.lcssa, ptr %gep1027, align 4
  %inc503 = add nsw i32 %x436.01025, 1
  %exitcond1069.not = icmp eq i32 %inc503, %0
  br i1 %exitcond1069.not, label %for.cond.cleanup444, label %for.body445

for.cond.cleanup474:                              ; preds = %for.body475, %for.cond464.preheader
  %acc447.1.lcssa = phi float [ %acc447.01019, %for.cond464.preheader ], [ %89, %for.body475 ]
  %add.ptr487 = getelementptr inbounds float, ptr %f_data448.01020, i32 %mul10
  %add488 = add nsw i32 %i_pos_x446.01018, %mul
  %inc490 = add nuw nsw i32 %m450.01021, 1
  %cmp460 = icmp slt i32 %inc490, %sub459
  br i1 %cmp460, label %for.cond464.preheader, label %for.cond.cleanup461

for.body475:                                      ; preds = %for.body475, %for.body475.lr.ph
  %n463.01015 = phi i32 [ 0, %for.body475.lr.ph ], [ %inc485, %for.body475 ]
  %acc447.11014 = phi float [ %acc447.01019, %for.body475.lr.ph ], [ %89, %for.body475 ]
  %mul477 = mul nsw i32 %76, %n463.01015
  %arrayidx479 = getelementptr float, ptr %85, i32 %mul477
  %87 = load float, ptr %arrayidx479, align 4
  %mul481 = mul nsw i32 %86, %n463.01015
  %arrayidx482 = getelementptr inbounds float, ptr %f_data448.01020, i32 %mul481
  %88 = load float, ptr %arrayidx482, align 4
  %89 = tail call float @llvm.fmuladd.f32(float %87, float %88, float %acc447.11014)
  %inc485 = add nuw nsw i32 %n463.01015, 1
  %cmp473 = icmp slt i32 %inc485, %sub472
  br i1 %cmp473, label %for.body475, label %for.cond.cleanup474

for.cond523.preheader:                            ; preds = %for.cond.cleanup529, %for.cond523.preheader.lr.ph
  %y512.01048 = phi i32 [ %shr7, %for.cond523.preheader.lr.ph ], [ %inc581, %for.cond.cleanup529 ]
  %i_pos.31047 = phi i32 [ 0, %for.cond523.preheader.lr.ph ], [ %add579, %for.cond.cleanup529 ]
  br i1 %cmp5281041, label %for.body530.lr.ph, label %for.cond.cleanup529

for.body530.lr.ph:                                ; preds = %for.cond523.preheader
  %90 = load ptr, ptr %filter, align 4
  %91 = load i32, ptr %step_x547, align 4
  %92 = load i32, ptr %step_x565, align 4
  %93 = load i32, ptr %stride_x567, align 4
  %mul568 = mul nsw i32 %93, %y512.01048
  %94 = load i32, ptr %step_y569, align 4
  %mul570 = mul nsw i32 %mul568, %94
  %invariant.gep1044 = getelementptr float, ptr %3, i32 %mul570
  br label %for.body530

for.cond.cleanup519:                              ; preds = %for.cond.cleanup529, %for.cond513.preheader
  ret i32 0

for.cond.cleanup529:                              ; preds = %for.cond.cleanup539, %for.cond523.preheader
  %add579 = add nsw i32 %i_pos.31047, %mul
  %inc581 = add nsw i32 %y512.01048, 1
  %exitcond1074.not = icmp eq i32 %inc581, %sub180
  br i1 %exitcond1074.not, label %for.cond.cleanup519, label %for.cond523.preheader

for.body530:                                      ; preds = %for.cond.cleanup539, %for.body530.lr.ph
  %x522.01043 = phi i32 [ %shr, %for.body530.lr.ph ], [ %inc574, %for.cond.cleanup539 ]
  %i_pos_y521.01042 = phi i32 [ %i_pos.31047, %for.body530.lr.ph ], [ %add564, %for.cond.cleanup539 ]
  br i1 %cmp5381035, label %for.cond542.preheader, label %for.cond.cleanup539

for.cond542.preheader:                            ; preds = %for.cond.cleanup545, %for.body530
  %m535.01039 = phi i32 [ %inc561, %for.cond.cleanup545 ], [ 0, %for.body530 ]
  %f_data533.01038 = phi ptr [ %add.ptr558, %for.cond.cleanup545 ], [ %90, %for.body530 ]
  %acc532.01037 = phi float [ %acc532.1.lcssa, %for.cond.cleanup545 ], [ 0.000000e+00, %for.body530 ]
  %i_pos_x531.01036 = phi i32 [ %add559, %for.cond.cleanup545 ], [ %i_pos_y521.01042, %for.body530 ]
  br i1 %cmp5441031, label %for.body546.lr.ph, label %for.cond.cleanup545

for.body546.lr.ph:                                ; preds = %for.cond542.preheader
  %95 = getelementptr float, ptr %2, i32 %i_pos_x531.01036
  %96 = load i32, ptr %step_x551, align 4
  br label %for.body546

for.cond.cleanup539:                              ; preds = %for.cond.cleanup545, %for.body530
  %acc532.0.lcssa = phi float [ 0.000000e+00, %for.body530 ], [ %acc532.1.lcssa, %for.cond.cleanup545 ]
  %add564 = add nsw i32 %91, %i_pos_y521.01042
  %mul566 = mul nsw i32 %92, %x522.01043
  %gep1045 = getelementptr float, ptr %invariant.gep1044, i32 %mul566
  store float %acc532.0.lcssa, ptr %gep1045, align 4
  %inc574 = add nsw i32 %x522.01043, 1
  %exitcond1073.not = icmp eq i32 %inc574, %sub527
  br i1 %exitcond1073.not, label %for.cond.cleanup529, label %for.body530

for.cond.cleanup545:                              ; preds = %for.body546, %for.cond542.preheader
  %acc532.1.lcssa = phi float [ %acc532.01037, %for.cond542.preheader ], [ %99, %for.body546 ]
  %add.ptr558 = getelementptr inbounds float, ptr %f_data533.01038, i32 %mul10
  %add559 = add nsw i32 %i_pos_x531.01036, %mul
  %inc561 = add nuw nsw i32 %m535.01039, 1
  %exitcond1072.not = icmp eq i32 %inc561, %5
  br i1 %exitcond1072.not, label %for.cond.cleanup539, label %for.cond542.preheader

for.body546:                                      ; preds = %for.body546, %for.body546.lr.ph
  %n541.01033 = phi i32 [ 0, %for.body546.lr.ph ], [ %inc556, %for.body546 ]
  %acc532.11032 = phi float [ %acc532.01037, %for.body546.lr.ph ], [ %99, %for.body546 ]
  %mul548 = mul nsw i32 %91, %n541.01033
  %arrayidx550 = getelementptr float, ptr %95, i32 %mul548
  %97 = load float, ptr %arrayidx550, align 4
  %mul552 = mul nsw i32 %96, %n541.01033
  %arrayidx553 = getelementptr inbounds float, ptr %f_data533.01038, i32 %mul552
  %98 = load float, ptr %arrayidx553, align 4
  %99 = tail call float @llvm.fmuladd.f32(float %97, float %98, float %acc532.11032)
  %inc556 = add nuw nsw i32 %n541.01033, 1
  %exitcond1071.not = icmp eq i32 %inc556, %4
  br i1 %exitcond1071.not, label %for.cond.cleanup545, label %for.body546
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float)


