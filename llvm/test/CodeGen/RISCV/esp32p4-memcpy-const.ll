; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-esp32-p4-mem-intrin -riscv-esp32-p4-mem-intrin=true < %s | FileCheck %s

target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

; src16 dst16
define void @test_src16_dst16_size_0(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_0(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    ret void
;

  entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1) %a, ptr noundef nonnull align 16 dereferenceable(1) %b, i32 0, i1 false)
  ret void
}

; src16 dst16
define void @test_src16_dst16_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1) %a, ptr noundef nonnull align 16 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src16_dst16_size_2(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(2) %a, ptr noundef nonnull align 16 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src16_dst16_size_3(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(3) %a, ptr noundef nonnull align 16 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src16_dst16_size_4(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(4) %a, ptr noundef nonnull align 16 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src16_dst16_size_5(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(5) %a, ptr noundef nonnull align 16 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src16_dst16_size_6(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(6) %a, ptr noundef nonnull align 16 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src16_dst16_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(7) %a, ptr noundef nonnull align 16 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src16_dst16_size_8(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(8) %a, ptr noundef nonnull align 16 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src16_dst16_size_9(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(9) %a, ptr noundef nonnull align 16 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src16_dst16_size_10(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(10) %a, ptr noundef nonnull align 16 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src16_dst16_size_11(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(11) %a, ptr noundef nonnull align 16 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src16_dst16_size_12(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(12) %a, ptr noundef nonnull align 16 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src16_dst16_size_13(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(13) %a, ptr noundef nonnull align 16 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src16_dst16_size_14(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(14) %a, ptr noundef nonnull align 16 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src16_dst16_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP9]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(15) %a, ptr noundef nonnull align 16 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src16_dst16_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(16) %a, ptr noundef nonnull align 16 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src16_dst16_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(17) %a, ptr noundef nonnull align 16 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src16_dst16_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(31) %a, ptr noundef nonnull align 16 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src16_dst16_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP2:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(32) %a, ptr noundef nonnull align 16 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src16_dst16_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP2:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(33) %a, ptr noundef nonnull align 16 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src16_dst16_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP2:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(47) %a, ptr noundef nonnull align 16 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src16_dst16_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(48) %a, ptr noundef nonnull align 16 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src16_dst16_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(49) %a, ptr noundef nonnull align 16 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src16_dst16_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(63) %a, ptr noundef nonnull align 16 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src16_dst16_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP4]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(64) %a, ptr noundef nonnull align 16 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src16_dst16_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP4]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(65) %a, ptr noundef nonnull align 16 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src16_dst16_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP6]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(80) %a, ptr noundef nonnull align 16 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src16_dst16_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP6]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(81) %a, ptr noundef nonnull align 16 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src16_dst16_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP6]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLD128IP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VST128IP8]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(88) %a, ptr noundef nonnull align 16 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src16_dst16_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP6]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(96) %a, ptr noundef nonnull align 16 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src16_dst16_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(112) %a, ptr noundef nonnull align 16 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src16_dst16_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(124) %a, ptr noundef nonnull align 16 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src16_dst16_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(127) %a, ptr noundef nonnull align 16 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src16_dst16_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(128) %a, ptr noundef nonnull align 16 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src16_dst16_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(129) %a, ptr noundef nonnull align 16 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src16_dst16_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP17:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP16]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP18:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP17]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP19:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP18]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP20:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP19]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP21:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP20]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP22:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP23:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP22]], i32 16)
; CHECK-NEXT:    [[VST128IP24:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP23]], i32 16)
; CHECK-NEXT:    [[VST128IP25:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP24]], i32 16)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP25]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    [[VST128IP28:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP27]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(255) %a, ptr noundef nonnull align 16 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src16_dst16_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP17:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP16]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP18:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP17]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP19:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP18]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP20:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP19]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP21:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP20]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP21]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP23:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP24:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP23]], i32 16)
; CHECK-NEXT:    [[VST128IP25:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP24]], i32 16)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP25]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    [[VST128IP28:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP27]], i32 16)
; CHECK-NEXT:    [[VST128IP29:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP28]], i32 16)
; CHECK-NEXT:    [[VST128IP30:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP29]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(256) %a, ptr noundef nonnull align 16 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src16_dst16_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP17:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP16]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP18:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP17]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP19:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP18]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP20:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP19]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP21:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP20]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP21]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP23:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP24:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP23]], i32 16)
; CHECK-NEXT:    [[VST128IP25:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP24]], i32 16)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP25]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    [[VST128IP28:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP27]], i32 16)
; CHECK-NEXT:    [[VST128IP29:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP28]], i32 16)
; CHECK-NEXT:    [[VST128IP30:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP29]], i32 16)
; CHECK-NEXT:    [[VLD128IP31:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP32:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP31]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP33:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP32]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP34:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP33]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP35:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP34]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP36:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP35]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP37:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP36]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP38:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP37]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP30]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    [[VST128IP46:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP45]], i32 16)
; CHECK-NEXT:    [[VLD128IP47:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP38]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP48:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP47]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP49:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP48]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP50:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP49]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP51:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP50]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP52:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP51]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP53:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP52]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP54:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP53]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP55:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP46]], i32 16)
; CHECK-NEXT:    [[VST128IP56:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP55]], i32 16)
; CHECK-NEXT:    [[VST128IP57:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP56]], i32 16)
; CHECK-NEXT:    [[VST128IP58:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP57]], i32 16)
; CHECK-NEXT:    [[VST128IP59:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP58]], i32 16)
; CHECK-NEXT:    [[VST128IP60:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP59]], i32 16)
; CHECK-NEXT:    [[VST128IP61:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP60]], i32 16)
; CHECK-NEXT:    [[VST128IP62:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP61]], i32 16)
; CHECK-NEXT:    [[VLD128IP63:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP54]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP64:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP63]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP65:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP64]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP66:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP65]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP67:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP66]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP68:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP67]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP69:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP68]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP70:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP69]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP71:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP62]], i32 16)
; CHECK-NEXT:    [[VST128IP72:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP71]], i32 16)
; CHECK-NEXT:    [[VST128IP73:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP72]], i32 16)
; CHECK-NEXT:    [[VST128IP74:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP73]], i32 16)
; CHECK-NEXT:    [[VST128IP75:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP74]], i32 16)
; CHECK-NEXT:    [[VST128IP76:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP75]], i32 16)
; CHECK-NEXT:    [[VST128IP77:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP76]], i32 16)
; CHECK-NEXT:    [[VST128IP78:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP77]], i32 16)
; CHECK-NEXT:    [[VLD128IP79:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP70]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP80:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP79]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP81:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP80]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP82:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP81]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP83:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP82]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP84:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP83]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP85:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP84]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP86:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP85]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP87:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP78]], i32 16)
; CHECK-NEXT:    [[VST128IP88:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP87]], i32 16)
; CHECK-NEXT:    [[VST128IP89:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP88]], i32 16)
; CHECK-NEXT:    [[VST128IP90:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP89]], i32 16)
; CHECK-NEXT:    [[VST128IP91:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP90]], i32 16)
; CHECK-NEXT:    [[VST128IP92:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP91]], i32 16)
; CHECK-NEXT:    [[VST128IP93:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP92]], i32 16)
; CHECK-NEXT:    [[VST128IP94:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP93]], i32 16)
; CHECK-NEXT:    [[VLD128IP95:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP86]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP96:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP95]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP97:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP96]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP98:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP97]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP99:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP98]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP100:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP99]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP101:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP100]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP102:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP101]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP103:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP94]], i32 16)
; CHECK-NEXT:    [[VST128IP104:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP103]], i32 16)
; CHECK-NEXT:    [[VST128IP105:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP104]], i32 16)
; CHECK-NEXT:    [[VST128IP106:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP105]], i32 16)
; CHECK-NEXT:    [[VST128IP107:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP106]], i32 16)
; CHECK-NEXT:    [[VST128IP108:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP107]], i32 16)
; CHECK-NEXT:    [[VST128IP109:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP108]], i32 16)
; CHECK-NEXT:    [[VST128IP110:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP109]], i32 16)
; CHECK-NEXT:    [[VLD128IP111:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP102]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP112:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP111]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP113:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP112]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP114:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP113]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP115:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP114]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP116:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP115]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP117:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP116]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP118:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP110]], i32 16)
; CHECK-NEXT:    [[VST128IP119:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP118]], i32 16)
; CHECK-NEXT:    [[VST128IP120:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP119]], i32 16)
; CHECK-NEXT:    [[VST128IP121:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP120]], i32 16)
; CHECK-NEXT:    [[VST128IP122:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP121]], i32 16)
; CHECK-NEXT:    [[VST128IP123:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP122]], i32 16)
; CHECK-NEXT:    [[VST128IP124:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP123]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1023) %a, ptr noundef nonnull align 16 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src16_dst16_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP17:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP16]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP18:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP17]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP19:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP18]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP20:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP19]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP21:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP20]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP21]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP23:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP24:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP23]], i32 16)
; CHECK-NEXT:    [[VST128IP25:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP24]], i32 16)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP25]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    [[VST128IP28:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP27]], i32 16)
; CHECK-NEXT:    [[VST128IP29:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP28]], i32 16)
; CHECK-NEXT:    [[VST128IP30:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP29]], i32 16)
; CHECK-NEXT:    [[VLD128IP31:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP32:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP31]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP33:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP32]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP34:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP33]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP35:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP34]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP36:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP35]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP37:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP36]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP38:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP37]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP30]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    [[VST128IP46:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP45]], i32 16)
; CHECK-NEXT:    [[VLD128IP47:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP38]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP48:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP47]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP49:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP48]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP50:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP49]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP51:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP50]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP52:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP51]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP53:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP52]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP54:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP53]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP55:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP46]], i32 16)
; CHECK-NEXT:    [[VST128IP56:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP55]], i32 16)
; CHECK-NEXT:    [[VST128IP57:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP56]], i32 16)
; CHECK-NEXT:    [[VST128IP58:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP57]], i32 16)
; CHECK-NEXT:    [[VST128IP59:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP58]], i32 16)
; CHECK-NEXT:    [[VST128IP60:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP59]], i32 16)
; CHECK-NEXT:    [[VST128IP61:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP60]], i32 16)
; CHECK-NEXT:    [[VST128IP62:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP61]], i32 16)
; CHECK-NEXT:    [[VLD128IP63:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP54]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP64:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP63]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP65:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP64]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP66:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP65]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP67:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP66]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP68:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP67]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP69:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP68]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP70:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP69]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP71:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP62]], i32 16)
; CHECK-NEXT:    [[VST128IP72:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP71]], i32 16)
; CHECK-NEXT:    [[VST128IP73:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP72]], i32 16)
; CHECK-NEXT:    [[VST128IP74:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP73]], i32 16)
; CHECK-NEXT:    [[VST128IP75:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP74]], i32 16)
; CHECK-NEXT:    [[VST128IP76:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP75]], i32 16)
; CHECK-NEXT:    [[VST128IP77:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP76]], i32 16)
; CHECK-NEXT:    [[VST128IP78:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP77]], i32 16)
; CHECK-NEXT:    [[VLD128IP79:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP70]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP80:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP79]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP81:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP80]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP82:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP81]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP83:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP82]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP84:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP83]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP85:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP84]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP86:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP85]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP87:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP78]], i32 16)
; CHECK-NEXT:    [[VST128IP88:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP87]], i32 16)
; CHECK-NEXT:    [[VST128IP89:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP88]], i32 16)
; CHECK-NEXT:    [[VST128IP90:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP89]], i32 16)
; CHECK-NEXT:    [[VST128IP91:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP90]], i32 16)
; CHECK-NEXT:    [[VST128IP92:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP91]], i32 16)
; CHECK-NEXT:    [[VST128IP93:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP92]], i32 16)
; CHECK-NEXT:    [[VST128IP94:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP93]], i32 16)
; CHECK-NEXT:    [[VLD128IP95:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP86]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP96:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP95]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP97:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP96]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP98:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP97]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP99:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP98]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP100:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP99]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP101:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP100]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP102:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP101]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP103:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP94]], i32 16)
; CHECK-NEXT:    [[VST128IP104:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP103]], i32 16)
; CHECK-NEXT:    [[VST128IP105:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP104]], i32 16)
; CHECK-NEXT:    [[VST128IP106:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP105]], i32 16)
; CHECK-NEXT:    [[VST128IP107:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP106]], i32 16)
; CHECK-NEXT:    [[VST128IP108:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP107]], i32 16)
; CHECK-NEXT:    [[VST128IP109:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP108]], i32 16)
; CHECK-NEXT:    [[VST128IP110:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP109]], i32 16)
; CHECK-NEXT:    [[VLD128IP111:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP102]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP112:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP111]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP113:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP112]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP114:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP113]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP115:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP114]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP116:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP115]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP117:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP116]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP118:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP117]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP119:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP110]], i32 16)
; CHECK-NEXT:    [[VST128IP120:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP119]], i32 16)
; CHECK-NEXT:    [[VST128IP121:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP120]], i32 16)
; CHECK-NEXT:    [[VST128IP122:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP121]], i32 16)
; CHECK-NEXT:    [[VST128IP123:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP122]], i32 16)
; CHECK-NEXT:    [[VST128IP124:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP123]], i32 16)
; CHECK-NEXT:    [[VST128IP125:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP124]], i32 16)
; CHECK-NEXT:    [[VST128IP126:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP125]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1024) %a, ptr noundef nonnull align 16 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

define void @test_src16_dst16_size_20000(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_20000(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    call void @esp32p4MemCpySrc16Dst16Const16(i32 [[TMP1]], i32 [[TMP0]], i32 20000)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(20000) %a, ptr noundef nonnull align 16 dereferenceable(20000) %b, i32 20000, i1 false)
  ret void
}


; src16 dst8
define void @test_src16_dst8_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1) %a, ptr noundef nonnull align 16 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src16_dst8_size_2(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(2) %a, ptr noundef nonnull align 16 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src16_dst8_size_3(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(3) %a, ptr noundef nonnull align 16 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src16_dst8_size_4(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(4) %a, ptr noundef nonnull align 16 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src16_dst8_size_5(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(5) %a, ptr noundef nonnull align 16 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src16_dst8_size_6(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(6) %a, ptr noundef nonnull align 16 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src16_dst8_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(7) %a, ptr noundef nonnull align 16 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src16_dst8_size_8(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(8) %a, ptr noundef nonnull align 16 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src16_dst8_size_9(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(9) %a, ptr noundef nonnull align 16 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src16_dst8_size_10(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(10) %a, ptr noundef nonnull align 16 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src16_dst8_size_11(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(11) %a, ptr noundef nonnull align 16 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src16_dst8_size_12(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(12) %a, ptr noundef nonnull align 16 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src16_dst8_size_13(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(13) %a, ptr noundef nonnull align 16 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src16_dst8_size_14(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(14) %a, ptr noundef nonnull align 16 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src16_dst8_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP9]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(15) %a, ptr noundef nonnull align 16 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src16_dst8_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(16) %a, ptr noundef nonnull align 16 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src16_dst8_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(17) %a, ptr noundef nonnull align 16 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src16_dst8_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP1:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(31) %a, ptr noundef nonnull align 16 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src16_dst8_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP2:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP2]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(32) %a, ptr noundef nonnull align 16 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src16_dst8_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP2:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP2]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(33) %a, ptr noundef nonnull align 16 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src16_dst8_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP2:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP2]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(47) %a, ptr noundef nonnull align 16 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src16_dst8_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP4]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(48) %a, ptr noundef nonnull align 16 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src16_dst8_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP4]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(49) %a, ptr noundef nonnull align 16 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src16_dst8_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP4]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(63) %a, ptr noundef nonnull align 16 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src16_dst8_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP4]], i32 8)
; CHECK-NEXT:    [[VSTL64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP5]], i32 8)
; CHECK-NEXT:    [[VSTH64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP6]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP7]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(64) %a, ptr noundef nonnull align 16 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src16_dst8_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP4]], i32 8)
; CHECK-NEXT:    [[VSTL64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP5]], i32 8)
; CHECK-NEXT:    [[VSTH64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP6]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP7]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(65) %a, ptr noundef nonnull align 16 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src16_dst8_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(80) %a, ptr noundef nonnull align 16 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src16_dst8_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(81) %a, ptr noundef nonnull align 16 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src16_dst8_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLD128IP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(88) %a, ptr noundef nonnull align 16 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src16_dst8_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP6]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP7]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(96) %a, ptr noundef nonnull align 16 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src16_dst8_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(112) %a, ptr noundef nonnull align 16 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src16_dst8_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(124) %a, ptr noundef nonnull align 16 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src16_dst8_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(127) %a, ptr noundef nonnull align 16 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src16_dst8_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(128) %a, ptr noundef nonnull align 16 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src16_dst8_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(129) %a, ptr noundef nonnull align 16 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src16_dst8_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP24:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP23]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP25:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP24]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP26:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP25]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP27:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP26]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP28:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP27]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP29:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP21]], i32 8)
; CHECK-NEXT:    [[VSTH64IP30:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP29]], i32 8)
; CHECK-NEXT:    [[VSTL64IP31:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP30]], i32 8)
; CHECK-NEXT:    [[VSTH64IP32:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP31]], i32 8)
; CHECK-NEXT:    [[VSTL64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP32]], i32 8)
; CHECK-NEXT:    [[VSTH64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP33]], i32 8)
; CHECK-NEXT:    [[VSTL64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP34]], i32 8)
; CHECK-NEXT:    [[VSTH64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP35]], i32 8)
; CHECK-NEXT:    [[VSTL64IP37:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP36]], i32 8)
; CHECK-NEXT:    [[VSTH64IP38:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP37]], i32 8)
; CHECK-NEXT:    [[VSTL64IP39:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP38]], i32 8)
; CHECK-NEXT:    [[VSTH64IP40:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP39]], i32 8)
; CHECK-NEXT:    [[VSTL64IP41:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP40]], i32 8)
; CHECK-NEXT:    [[VSTH64IP42:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP41]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(255) %a, ptr noundef nonnull align 16 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src16_dst8_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP24:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP23]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP25:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP24]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP26:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP25]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP27:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP26]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP28:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP27]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP29:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP28]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP30:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP21]], i32 8)
; CHECK-NEXT:    [[VSTH64IP31:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP30]], i32 8)
; CHECK-NEXT:    [[VSTL64IP32:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP31]], i32 8)
; CHECK-NEXT:    [[VSTH64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP32]], i32 8)
; CHECK-NEXT:    [[VSTL64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP33]], i32 8)
; CHECK-NEXT:    [[VSTH64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP34]], i32 8)
; CHECK-NEXT:    [[VSTL64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP35]], i32 8)
; CHECK-NEXT:    [[VSTH64IP37:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP36]], i32 8)
; CHECK-NEXT:    [[VSTL64IP38:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP37]], i32 8)
; CHECK-NEXT:    [[VSTH64IP39:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP38]], i32 8)
; CHECK-NEXT:    [[VSTL64IP40:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP39]], i32 8)
; CHECK-NEXT:    [[VSTH64IP41:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP40]], i32 8)
; CHECK-NEXT:    [[VSTL64IP42:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP41]], i32 8)
; CHECK-NEXT:    [[VSTH64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP42]], i32 8)
; CHECK-NEXT:    [[VSTL64IP44:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP43]], i32 8)
; CHECK-NEXT:    [[VSTH64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP44]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(256) %a, ptr noundef nonnull align 16 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src16_dst8_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP24:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP23]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP25:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP24]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP26:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP25]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP27:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP26]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP28:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP27]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP29:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP28]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP30:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP21]], i32 8)
; CHECK-NEXT:    [[VSTH64IP31:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP30]], i32 8)
; CHECK-NEXT:    [[VSTL64IP32:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP31]], i32 8)
; CHECK-NEXT:    [[VSTH64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP32]], i32 8)
; CHECK-NEXT:    [[VSTL64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP33]], i32 8)
; CHECK-NEXT:    [[VSTH64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP34]], i32 8)
; CHECK-NEXT:    [[VSTL64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP35]], i32 8)
; CHECK-NEXT:    [[VSTH64IP37:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP36]], i32 8)
; CHECK-NEXT:    [[VSTL64IP38:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP37]], i32 8)
; CHECK-NEXT:    [[VSTH64IP39:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP38]], i32 8)
; CHECK-NEXT:    [[VSTL64IP40:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP39]], i32 8)
; CHECK-NEXT:    [[VSTH64IP41:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP40]], i32 8)
; CHECK-NEXT:    [[VSTL64IP42:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP41]], i32 8)
; CHECK-NEXT:    [[VSTH64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP42]], i32 8)
; CHECK-NEXT:    [[VSTL64IP44:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP43]], i32 8)
; CHECK-NEXT:    [[VSTH64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP44]], i32 8)
; CHECK-NEXT:    [[VLD128IP46:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP29]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP47:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP46]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP48:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP47]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP49:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP48]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP50:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP49]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP51:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP50]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP52:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP51]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP53:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP52]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP45]], i32 8)
; CHECK-NEXT:    [[VSTH64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP54]], i32 8)
; CHECK-NEXT:    [[VSTL64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP55]], i32 8)
; CHECK-NEXT:    [[VSTH64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP56]], i32 8)
; CHECK-NEXT:    [[VSTL64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP57]], i32 8)
; CHECK-NEXT:    [[VSTH64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP58]], i32 8)
; CHECK-NEXT:    [[VSTL64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP59]], i32 8)
; CHECK-NEXT:    [[VSTH64IP61:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP60]], i32 8)
; CHECK-NEXT:    [[VSTL64IP62:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP61]], i32 8)
; CHECK-NEXT:    [[VSTH64IP63:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP62]], i32 8)
; CHECK-NEXT:    [[VSTL64IP64:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP63]], i32 8)
; CHECK-NEXT:    [[VSTH64IP65:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP64]], i32 8)
; CHECK-NEXT:    [[VSTL64IP66:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP65]], i32 8)
; CHECK-NEXT:    [[VSTH64IP67:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP66]], i32 8)
; CHECK-NEXT:    [[VSTL64IP68:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP67]], i32 8)
; CHECK-NEXT:    [[VSTH64IP69:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP68]], i32 8)
; CHECK-NEXT:    [[VLD128IP70:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP53]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP71:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP70]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP72:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP71]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP73:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP72]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP74:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP73]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP75:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP74]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP76:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP75]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP77:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP76]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP78:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP69]], i32 8)
; CHECK-NEXT:    [[VSTH64IP79:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP78]], i32 8)
; CHECK-NEXT:    [[VSTL64IP80:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP79]], i32 8)
; CHECK-NEXT:    [[VSTH64IP81:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP80]], i32 8)
; CHECK-NEXT:    [[VSTL64IP82:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP81]], i32 8)
; CHECK-NEXT:    [[VSTH64IP83:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP82]], i32 8)
; CHECK-NEXT:    [[VSTL64IP84:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP83]], i32 8)
; CHECK-NEXT:    [[VSTH64IP85:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP84]], i32 8)
; CHECK-NEXT:    [[VSTL64IP86:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP85]], i32 8)
; CHECK-NEXT:    [[VSTH64IP87:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP86]], i32 8)
; CHECK-NEXT:    [[VSTL64IP88:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP87]], i32 8)
; CHECK-NEXT:    [[VSTH64IP89:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP88]], i32 8)
; CHECK-NEXT:    [[VSTL64IP90:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP89]], i32 8)
; CHECK-NEXT:    [[VSTH64IP91:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP90]], i32 8)
; CHECK-NEXT:    [[VSTL64IP92:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP91]], i32 8)
; CHECK-NEXT:    [[VSTH64IP93:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP92]], i32 8)
; CHECK-NEXT:    [[VLD128IP94:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP77]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP95:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP94]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP96:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP95]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP97:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP96]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP98:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP97]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP99:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP98]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP100:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP99]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP101:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP100]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP102:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP93]], i32 8)
; CHECK-NEXT:    [[VSTH64IP103:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP102]], i32 8)
; CHECK-NEXT:    [[VSTL64IP104:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP103]], i32 8)
; CHECK-NEXT:    [[VSTH64IP105:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP104]], i32 8)
; CHECK-NEXT:    [[VSTL64IP106:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP105]], i32 8)
; CHECK-NEXT:    [[VSTH64IP107:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP106]], i32 8)
; CHECK-NEXT:    [[VSTL64IP108:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP107]], i32 8)
; CHECK-NEXT:    [[VSTH64IP109:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP108]], i32 8)
; CHECK-NEXT:    [[VSTL64IP110:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP109]], i32 8)
; CHECK-NEXT:    [[VSTH64IP111:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP110]], i32 8)
; CHECK-NEXT:    [[VSTL64IP112:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP111]], i32 8)
; CHECK-NEXT:    [[VSTH64IP113:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP112]], i32 8)
; CHECK-NEXT:    [[VSTL64IP114:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP113]], i32 8)
; CHECK-NEXT:    [[VSTH64IP115:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP114]], i32 8)
; CHECK-NEXT:    [[VSTL64IP116:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP115]], i32 8)
; CHECK-NEXT:    [[VSTH64IP117:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP116]], i32 8)
; CHECK-NEXT:    [[VLD128IP118:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP101]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP119:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP118]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP120:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP119]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP121:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP120]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP122:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP121]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP123:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP122]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP124:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP123]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP125:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP124]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP126:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP117]], i32 8)
; CHECK-NEXT:    [[VSTH64IP127:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP126]], i32 8)
; CHECK-NEXT:    [[VSTL64IP128:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP127]], i32 8)
; CHECK-NEXT:    [[VSTH64IP129:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP128]], i32 8)
; CHECK-NEXT:    [[VSTL64IP130:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP129]], i32 8)
; CHECK-NEXT:    [[VSTH64IP131:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP130]], i32 8)
; CHECK-NEXT:    [[VSTL64IP132:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP131]], i32 8)
; CHECK-NEXT:    [[VSTH64IP133:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP132]], i32 8)
; CHECK-NEXT:    [[VSTL64IP134:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP133]], i32 8)
; CHECK-NEXT:    [[VSTH64IP135:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP134]], i32 8)
; CHECK-NEXT:    [[VSTL64IP136:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP135]], i32 8)
; CHECK-NEXT:    [[VSTH64IP137:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP136]], i32 8)
; CHECK-NEXT:    [[VSTL64IP138:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP137]], i32 8)
; CHECK-NEXT:    [[VSTH64IP139:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP138]], i32 8)
; CHECK-NEXT:    [[VSTL64IP140:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP139]], i32 8)
; CHECK-NEXT:    [[VSTH64IP141:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP140]], i32 8)
; CHECK-NEXT:    [[VLD128IP142:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP125]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP143:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP142]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP144:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP143]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP145:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP144]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP146:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP145]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP147:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP146]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP148:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP147]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP149:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP148]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP150:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP141]], i32 8)
; CHECK-NEXT:    [[VSTH64IP151:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP150]], i32 8)
; CHECK-NEXT:    [[VSTL64IP152:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP151]], i32 8)
; CHECK-NEXT:    [[VSTH64IP153:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP152]], i32 8)
; CHECK-NEXT:    [[VSTL64IP154:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP153]], i32 8)
; CHECK-NEXT:    [[VSTH64IP155:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP154]], i32 8)
; CHECK-NEXT:    [[VSTL64IP156:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP155]], i32 8)
; CHECK-NEXT:    [[VSTH64IP157:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP156]], i32 8)
; CHECK-NEXT:    [[VSTL64IP158:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP157]], i32 8)
; CHECK-NEXT:    [[VSTH64IP159:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP158]], i32 8)
; CHECK-NEXT:    [[VSTL64IP160:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP159]], i32 8)
; CHECK-NEXT:    [[VSTH64IP161:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP160]], i32 8)
; CHECK-NEXT:    [[VSTL64IP162:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP161]], i32 8)
; CHECK-NEXT:    [[VSTH64IP163:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP162]], i32 8)
; CHECK-NEXT:    [[VSTL64IP164:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP163]], i32 8)
; CHECK-NEXT:    [[VSTH64IP165:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP164]], i32 8)
; CHECK-NEXT:    [[VLD128IP166:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP149]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP167:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP166]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP168:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP167]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP169:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP168]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP170:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP169]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP171:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP170]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP172:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP171]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP173:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP165]], i32 8)
; CHECK-NEXT:    [[VSTH64IP174:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP173]], i32 8)
; CHECK-NEXT:    [[VSTL64IP175:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP174]], i32 8)
; CHECK-NEXT:    [[VSTH64IP176:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP175]], i32 8)
; CHECK-NEXT:    [[VSTL64IP177:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP176]], i32 8)
; CHECK-NEXT:    [[VSTH64IP178:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP177]], i32 8)
; CHECK-NEXT:    [[VSTL64IP179:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP178]], i32 8)
; CHECK-NEXT:    [[VSTH64IP180:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP179]], i32 8)
; CHECK-NEXT:    [[VSTL64IP181:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP180]], i32 8)
; CHECK-NEXT:    [[VSTH64IP182:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP181]], i32 8)
; CHECK-NEXT:    [[VSTL64IP183:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP182]], i32 8)
; CHECK-NEXT:    [[VSTH64IP184:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP183]], i32 8)
; CHECK-NEXT:    [[VSTL64IP185:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP184]], i32 8)
; CHECK-NEXT:    [[VSTH64IP186:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP185]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP187:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1023) %a, ptr noundef nonnull align 16 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src16_dst8_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP24:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP23]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP25:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP24]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP26:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP25]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP27:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP26]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP28:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP27]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP29:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP28]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP30:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP21]], i32 8)
; CHECK-NEXT:    [[VSTH64IP31:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP30]], i32 8)
; CHECK-NEXT:    [[VSTL64IP32:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP31]], i32 8)
; CHECK-NEXT:    [[VSTH64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP32]], i32 8)
; CHECK-NEXT:    [[VSTL64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP33]], i32 8)
; CHECK-NEXT:    [[VSTH64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP34]], i32 8)
; CHECK-NEXT:    [[VSTL64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP35]], i32 8)
; CHECK-NEXT:    [[VSTH64IP37:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP36]], i32 8)
; CHECK-NEXT:    [[VSTL64IP38:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP37]], i32 8)
; CHECK-NEXT:    [[VSTH64IP39:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP38]], i32 8)
; CHECK-NEXT:    [[VSTL64IP40:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP39]], i32 8)
; CHECK-NEXT:    [[VSTH64IP41:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP40]], i32 8)
; CHECK-NEXT:    [[VSTL64IP42:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP41]], i32 8)
; CHECK-NEXT:    [[VSTH64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP42]], i32 8)
; CHECK-NEXT:    [[VSTL64IP44:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP43]], i32 8)
; CHECK-NEXT:    [[VSTH64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP44]], i32 8)
; CHECK-NEXT:    [[VLD128IP46:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP29]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP47:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP46]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP48:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP47]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP49:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP48]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP50:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP49]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP51:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP50]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP52:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP51]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP53:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP52]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP45]], i32 8)
; CHECK-NEXT:    [[VSTH64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP54]], i32 8)
; CHECK-NEXT:    [[VSTL64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP55]], i32 8)
; CHECK-NEXT:    [[VSTH64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP56]], i32 8)
; CHECK-NEXT:    [[VSTL64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP57]], i32 8)
; CHECK-NEXT:    [[VSTH64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP58]], i32 8)
; CHECK-NEXT:    [[VSTL64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP59]], i32 8)
; CHECK-NEXT:    [[VSTH64IP61:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP60]], i32 8)
; CHECK-NEXT:    [[VSTL64IP62:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP61]], i32 8)
; CHECK-NEXT:    [[VSTH64IP63:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP62]], i32 8)
; CHECK-NEXT:    [[VSTL64IP64:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP63]], i32 8)
; CHECK-NEXT:    [[VSTH64IP65:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP64]], i32 8)
; CHECK-NEXT:    [[VSTL64IP66:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP65]], i32 8)
; CHECK-NEXT:    [[VSTH64IP67:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP66]], i32 8)
; CHECK-NEXT:    [[VSTL64IP68:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP67]], i32 8)
; CHECK-NEXT:    [[VSTH64IP69:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP68]], i32 8)
; CHECK-NEXT:    [[VLD128IP70:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP53]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP71:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP70]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP72:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP71]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP73:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP72]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP74:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP73]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP75:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP74]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP76:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP75]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP77:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP76]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP78:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP69]], i32 8)
; CHECK-NEXT:    [[VSTH64IP79:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP78]], i32 8)
; CHECK-NEXT:    [[VSTL64IP80:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP79]], i32 8)
; CHECK-NEXT:    [[VSTH64IP81:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP80]], i32 8)
; CHECK-NEXT:    [[VSTL64IP82:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP81]], i32 8)
; CHECK-NEXT:    [[VSTH64IP83:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP82]], i32 8)
; CHECK-NEXT:    [[VSTL64IP84:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP83]], i32 8)
; CHECK-NEXT:    [[VSTH64IP85:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP84]], i32 8)
; CHECK-NEXT:    [[VSTL64IP86:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP85]], i32 8)
; CHECK-NEXT:    [[VSTH64IP87:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP86]], i32 8)
; CHECK-NEXT:    [[VSTL64IP88:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP87]], i32 8)
; CHECK-NEXT:    [[VSTH64IP89:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP88]], i32 8)
; CHECK-NEXT:    [[VSTL64IP90:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP89]], i32 8)
; CHECK-NEXT:    [[VSTH64IP91:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP90]], i32 8)
; CHECK-NEXT:    [[VSTL64IP92:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP91]], i32 8)
; CHECK-NEXT:    [[VSTH64IP93:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP92]], i32 8)
; CHECK-NEXT:    [[VLD128IP94:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP77]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP95:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP94]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP96:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP95]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP97:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP96]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP98:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP97]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP99:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP98]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP100:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP99]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP101:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP100]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP102:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP93]], i32 8)
; CHECK-NEXT:    [[VSTH64IP103:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP102]], i32 8)
; CHECK-NEXT:    [[VSTL64IP104:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP103]], i32 8)
; CHECK-NEXT:    [[VSTH64IP105:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP104]], i32 8)
; CHECK-NEXT:    [[VSTL64IP106:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP105]], i32 8)
; CHECK-NEXT:    [[VSTH64IP107:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP106]], i32 8)
; CHECK-NEXT:    [[VSTL64IP108:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP107]], i32 8)
; CHECK-NEXT:    [[VSTH64IP109:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP108]], i32 8)
; CHECK-NEXT:    [[VSTL64IP110:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP109]], i32 8)
; CHECK-NEXT:    [[VSTH64IP111:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP110]], i32 8)
; CHECK-NEXT:    [[VSTL64IP112:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP111]], i32 8)
; CHECK-NEXT:    [[VSTH64IP113:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP112]], i32 8)
; CHECK-NEXT:    [[VSTL64IP114:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP113]], i32 8)
; CHECK-NEXT:    [[VSTH64IP115:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP114]], i32 8)
; CHECK-NEXT:    [[VSTL64IP116:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP115]], i32 8)
; CHECK-NEXT:    [[VSTH64IP117:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP116]], i32 8)
; CHECK-NEXT:    [[VLD128IP118:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP101]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP119:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP118]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP120:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP119]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP121:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP120]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP122:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP121]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP123:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP122]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP124:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP123]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP125:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP124]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP126:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP117]], i32 8)
; CHECK-NEXT:    [[VSTH64IP127:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP126]], i32 8)
; CHECK-NEXT:    [[VSTL64IP128:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP127]], i32 8)
; CHECK-NEXT:    [[VSTH64IP129:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP128]], i32 8)
; CHECK-NEXT:    [[VSTL64IP130:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP129]], i32 8)
; CHECK-NEXT:    [[VSTH64IP131:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP130]], i32 8)
; CHECK-NEXT:    [[VSTL64IP132:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP131]], i32 8)
; CHECK-NEXT:    [[VSTH64IP133:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP132]], i32 8)
; CHECK-NEXT:    [[VSTL64IP134:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP133]], i32 8)
; CHECK-NEXT:    [[VSTH64IP135:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP134]], i32 8)
; CHECK-NEXT:    [[VSTL64IP136:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP135]], i32 8)
; CHECK-NEXT:    [[VSTH64IP137:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP136]], i32 8)
; CHECK-NEXT:    [[VSTL64IP138:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP137]], i32 8)
; CHECK-NEXT:    [[VSTH64IP139:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP138]], i32 8)
; CHECK-NEXT:    [[VSTL64IP140:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP139]], i32 8)
; CHECK-NEXT:    [[VSTH64IP141:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP140]], i32 8)
; CHECK-NEXT:    [[VLD128IP142:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP125]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP143:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP142]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP144:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP143]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP145:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP144]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP146:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP145]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP147:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP146]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP148:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP147]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP149:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP148]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP150:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP141]], i32 8)
; CHECK-NEXT:    [[VSTH64IP151:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP150]], i32 8)
; CHECK-NEXT:    [[VSTL64IP152:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP151]], i32 8)
; CHECK-NEXT:    [[VSTH64IP153:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP152]], i32 8)
; CHECK-NEXT:    [[VSTL64IP154:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP153]], i32 8)
; CHECK-NEXT:    [[VSTH64IP155:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP154]], i32 8)
; CHECK-NEXT:    [[VSTL64IP156:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP155]], i32 8)
; CHECK-NEXT:    [[VSTH64IP157:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP156]], i32 8)
; CHECK-NEXT:    [[VSTL64IP158:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP157]], i32 8)
; CHECK-NEXT:    [[VSTH64IP159:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP158]], i32 8)
; CHECK-NEXT:    [[VSTL64IP160:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP159]], i32 8)
; CHECK-NEXT:    [[VSTH64IP161:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP160]], i32 8)
; CHECK-NEXT:    [[VSTL64IP162:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP161]], i32 8)
; CHECK-NEXT:    [[VSTH64IP163:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP162]], i32 8)
; CHECK-NEXT:    [[VSTL64IP164:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP163]], i32 8)
; CHECK-NEXT:    [[VSTH64IP165:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP164]], i32 8)
; CHECK-NEXT:    [[VLD128IP166:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP149]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP167:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP166]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP168:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP167]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP169:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP168]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP170:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP169]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP171:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP170]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP172:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP171]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP173:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP172]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP174:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP165]], i32 8)
; CHECK-NEXT:    [[VSTH64IP175:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP174]], i32 8)
; CHECK-NEXT:    [[VSTL64IP176:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP175]], i32 8)
; CHECK-NEXT:    [[VSTH64IP177:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP176]], i32 8)
; CHECK-NEXT:    [[VSTL64IP178:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP177]], i32 8)
; CHECK-NEXT:    [[VSTH64IP179:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP178]], i32 8)
; CHECK-NEXT:    [[VSTL64IP180:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP179]], i32 8)
; CHECK-NEXT:    [[VSTH64IP181:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP180]], i32 8)
; CHECK-NEXT:    [[VSTL64IP182:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP181]], i32 8)
; CHECK-NEXT:    [[VSTH64IP183:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP182]], i32 8)
; CHECK-NEXT:    [[VSTL64IP184:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP183]], i32 8)
; CHECK-NEXT:    [[VSTH64IP185:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP184]], i32 8)
; CHECK-NEXT:    [[VSTL64IP186:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP185]], i32 8)
; CHECK-NEXT:    [[VSTH64IP187:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP186]], i32 8)
; CHECK-NEXT:    [[VSTL64IP188:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP187]], i32 8)
; CHECK-NEXT:    [[VSTH64IP189:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP188]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1024) %a, ptr noundef nonnull align 16 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

define void @test_src16_dst8_size_20000(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_20000(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    call void @esp32p4MemCpySrc16Dst8Const16(i32 [[TMP1]], i32 [[TMP0]], i32 20000)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(20000) %a, ptr noundef nonnull align 16 dereferenceable(20000) %b, i32 20000, i1 false)
  ret void
}

; src8 dst16
define void @test_src8_dst16_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1) %a, ptr noundef nonnull align 8 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src8_dst16_size_2(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(2) %a, ptr noundef nonnull align 8 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src8_dst16_size_3(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(3) %a, ptr noundef nonnull align 8 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src8_dst16_size_4(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(4) %a, ptr noundef nonnull align 8 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src8_dst16_size_5(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(5) %a, ptr noundef nonnull align 8 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src8_dst16_size_6(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(6) %a, ptr noundef nonnull align 8 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src8_dst16_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(7) %a, ptr noundef nonnull align 8 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src8_dst16_size_8(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(8) %a, ptr noundef nonnull align 8 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src8_dst16_size_9(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(9) %a, ptr noundef nonnull align 8 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src8_dst16_size_10(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(10) %a, ptr noundef nonnull align 8 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src8_dst16_size_11(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(11) %a, ptr noundef nonnull align 8 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src8_dst16_size_12(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(12) %a, ptr noundef nonnull align 8 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src8_dst16_size_13(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(13) %a, ptr noundef nonnull align 8 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src8_dst16_size_14(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(14) %a, ptr noundef nonnull align 8 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src8_dst16_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP9]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(15) %a, ptr noundef nonnull align 8 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src8_dst16_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(16) %a, ptr noundef nonnull align 8 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src8_dst16_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(17) %a, ptr noundef nonnull align 8 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src8_dst16_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(31) %a, ptr noundef nonnull align 8 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src8_dst16_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(32) %a, ptr noundef nonnull align 8 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src8_dst16_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(33) %a, ptr noundef nonnull align 8 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src8_dst16_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(47) %a, ptr noundef nonnull align 8 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src8_dst16_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(48) %a, ptr noundef nonnull align 8 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src8_dst16_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(49) %a, ptr noundef nonnull align 8 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src8_dst16_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(63) %a, ptr noundef nonnull align 8 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src8_dst16_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(64) %a, ptr noundef nonnull align 8 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src8_dst16_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(65) %a, ptr noundef nonnull align 8 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src8_dst16_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(80) %a, ptr noundef nonnull align 8 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src8_dst16_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(81) %a, ptr noundef nonnull align 8 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src8_dst16_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VST128IP12]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(88) %a, ptr noundef nonnull align 8 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src8_dst16_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(96) %a, ptr noundef nonnull align 8 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src8_dst16_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(112) %a, ptr noundef nonnull align 8 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src8_dst16_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP19:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(124) %a, ptr noundef nonnull align 8 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src8_dst16_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP19:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(127) %a, ptr noundef nonnull align 8 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src8_dst16_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(128) %a, ptr noundef nonnull align 8 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src8_dst16_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(129) %a, ptr noundef nonnull align 8 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src8_dst16_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP26:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP25]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP27:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP26]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP28:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP27]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP28]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP29]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP30]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP31]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP32]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP33]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP34]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP36:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP21]], i32 16)
; CHECK-NEXT:    [[VST128IP37:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP36]], i32 16)
; CHECK-NEXT:    [[VST128IP38:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP37]], i32 16)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP38]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP43:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(255) %a, ptr noundef nonnull align 8 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src8_dst16_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP26:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP25]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP27:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP26]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP28:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP27]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP28]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP29]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP30]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP31]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP32]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP33]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP34]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP35]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP36]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP38:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP21]], i32 16)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP38]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(256) %a, ptr noundef nonnull align 8 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src8_dst16_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP26:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP25]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP27:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP26]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP28:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP27]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP28]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP29]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP30]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP31]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP32]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP33]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP34]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP35]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP36]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP38:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP21]], i32 16)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP38]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    [[VLDL64IP46:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP37]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP47:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP46]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP48:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP47]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP49:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP48]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP50:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP49]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP51:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP50]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP52:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP51]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP53:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP52]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP54:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP53]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP55:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP54]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP56:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP55]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP57:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP56]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP58:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP57]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP59:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP58]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP60:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP59]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP61:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP60]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP62:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP45]], i32 16)
; CHECK-NEXT:    [[VST128IP63:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP62]], i32 16)
; CHECK-NEXT:    [[VST128IP64:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP63]], i32 16)
; CHECK-NEXT:    [[VST128IP65:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP64]], i32 16)
; CHECK-NEXT:    [[VST128IP66:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP65]], i32 16)
; CHECK-NEXT:    [[VST128IP67:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP66]], i32 16)
; CHECK-NEXT:    [[VST128IP68:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP67]], i32 16)
; CHECK-NEXT:    [[VST128IP69:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP68]], i32 16)
; CHECK-NEXT:    [[VLDL64IP70:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP61]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP71:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP70]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP72:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP71]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP73:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP72]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP74:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP73]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP75:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP74]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP76:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP75]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP77:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP76]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP78:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP77]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP79:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP78]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP80:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP79]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP81:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP80]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP82:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP81]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP83:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP82]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP84:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP83]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP85:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP84]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP86:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP69]], i32 16)
; CHECK-NEXT:    [[VST128IP87:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP86]], i32 16)
; CHECK-NEXT:    [[VST128IP88:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP87]], i32 16)
; CHECK-NEXT:    [[VST128IP89:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP88]], i32 16)
; CHECK-NEXT:    [[VST128IP90:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP89]], i32 16)
; CHECK-NEXT:    [[VST128IP91:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP90]], i32 16)
; CHECK-NEXT:    [[VST128IP92:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP91]], i32 16)
; CHECK-NEXT:    [[VST128IP93:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP92]], i32 16)
; CHECK-NEXT:    [[VLDL64IP94:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP85]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP95:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP94]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP96:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP95]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP97:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP96]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP98:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP97]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP99:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP98]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP100:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP99]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP101:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP100]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP102:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP101]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP103:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP102]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP104:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP103]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP105:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP104]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP106:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP105]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP107:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP106]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP108:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP107]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP109:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP108]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP110:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP93]], i32 16)
; CHECK-NEXT:    [[VST128IP111:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP110]], i32 16)
; CHECK-NEXT:    [[VST128IP112:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP111]], i32 16)
; CHECK-NEXT:    [[VST128IP113:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP112]], i32 16)
; CHECK-NEXT:    [[VST128IP114:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP113]], i32 16)
; CHECK-NEXT:    [[VST128IP115:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP114]], i32 16)
; CHECK-NEXT:    [[VST128IP116:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP115]], i32 16)
; CHECK-NEXT:    [[VST128IP117:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP116]], i32 16)
; CHECK-NEXT:    [[VLDL64IP118:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP109]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP119:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP118]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP120:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP119]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP121:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP120]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP122:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP121]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP123:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP122]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP124:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP123]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP125:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP124]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP126:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP125]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP127:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP126]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP128:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP127]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP129:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP128]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP130:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP129]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP131:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP130]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP132:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP131]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP133:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP132]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP134:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP117]], i32 16)
; CHECK-NEXT:    [[VST128IP135:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP134]], i32 16)
; CHECK-NEXT:    [[VST128IP136:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP135]], i32 16)
; CHECK-NEXT:    [[VST128IP137:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP136]], i32 16)
; CHECK-NEXT:    [[VST128IP138:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP137]], i32 16)
; CHECK-NEXT:    [[VST128IP139:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP138]], i32 16)
; CHECK-NEXT:    [[VST128IP140:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP139]], i32 16)
; CHECK-NEXT:    [[VST128IP141:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP140]], i32 16)
; CHECK-NEXT:    [[VLDL64IP142:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP133]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP143:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP142]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP144:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP143]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP145:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP144]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP146:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP145]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP147:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP146]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP148:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP147]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP149:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP148]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP150:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP149]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP151:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP150]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP152:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP151]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP153:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP152]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP154:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP153]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP155:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP154]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP156:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP155]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP157:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP156]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP158:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP141]], i32 16)
; CHECK-NEXT:    [[VST128IP159:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP158]], i32 16)
; CHECK-NEXT:    [[VST128IP160:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP159]], i32 16)
; CHECK-NEXT:    [[VST128IP161:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP160]], i32 16)
; CHECK-NEXT:    [[VST128IP162:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP161]], i32 16)
; CHECK-NEXT:    [[VST128IP163:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP162]], i32 16)
; CHECK-NEXT:    [[VST128IP164:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP163]], i32 16)
; CHECK-NEXT:    [[VST128IP165:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP164]], i32 16)
; CHECK-NEXT:    [[VLDL64IP166:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP157]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP167:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP166]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP168:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP167]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP169:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP168]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP170:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP169]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP171:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP170]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP172:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP171]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP173:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP172]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP174:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP173]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP175:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP174]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP176:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP175]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP177:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP176]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP178:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP177]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP179:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP178]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP180:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP165]], i32 16)
; CHECK-NEXT:    [[VST128IP181:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP180]], i32 16)
; CHECK-NEXT:    [[VST128IP182:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP181]], i32 16)
; CHECK-NEXT:    [[VST128IP183:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP182]], i32 16)
; CHECK-NEXT:    [[VST128IP184:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP183]], i32 16)
; CHECK-NEXT:    [[VST128IP185:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP184]], i32 16)
; CHECK-NEXT:    [[VST128IP186:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP185]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP187:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1023) %a, ptr noundef nonnull align 8 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src8_dst16_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP26:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP25]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP27:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP26]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP28:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP27]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP28]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP29]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP30]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP31]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP32]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP33]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP34]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP35]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP36]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP38:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP21]], i32 16)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP38]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    [[VLDL64IP46:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP37]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP47:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP46]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP48:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP47]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP49:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP48]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP50:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP49]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP51:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP50]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP52:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP51]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP53:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP52]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP54:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP53]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP55:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP54]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP56:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP55]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP57:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP56]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP58:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP57]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP59:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP58]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP60:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP59]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP61:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP60]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP62:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP45]], i32 16)
; CHECK-NEXT:    [[VST128IP63:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP62]], i32 16)
; CHECK-NEXT:    [[VST128IP64:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP63]], i32 16)
; CHECK-NEXT:    [[VST128IP65:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP64]], i32 16)
; CHECK-NEXT:    [[VST128IP66:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP65]], i32 16)
; CHECK-NEXT:    [[VST128IP67:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP66]], i32 16)
; CHECK-NEXT:    [[VST128IP68:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP67]], i32 16)
; CHECK-NEXT:    [[VST128IP69:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP68]], i32 16)
; CHECK-NEXT:    [[VLDL64IP70:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP61]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP71:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP70]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP72:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP71]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP73:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP72]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP74:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP73]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP75:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP74]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP76:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP75]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP77:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP76]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP78:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP77]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP79:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP78]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP80:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP79]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP81:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP80]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP82:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP81]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP83:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP82]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP84:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP83]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP85:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP84]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP86:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP69]], i32 16)
; CHECK-NEXT:    [[VST128IP87:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP86]], i32 16)
; CHECK-NEXT:    [[VST128IP88:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP87]], i32 16)
; CHECK-NEXT:    [[VST128IP89:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP88]], i32 16)
; CHECK-NEXT:    [[VST128IP90:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP89]], i32 16)
; CHECK-NEXT:    [[VST128IP91:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP90]], i32 16)
; CHECK-NEXT:    [[VST128IP92:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP91]], i32 16)
; CHECK-NEXT:    [[VST128IP93:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP92]], i32 16)
; CHECK-NEXT:    [[VLDL64IP94:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP85]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP95:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP94]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP96:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP95]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP97:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP96]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP98:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP97]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP99:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP98]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP100:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP99]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP101:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP100]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP102:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP101]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP103:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP102]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP104:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP103]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP105:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP104]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP106:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP105]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP107:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP106]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP108:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP107]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP109:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP108]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP110:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP93]], i32 16)
; CHECK-NEXT:    [[VST128IP111:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP110]], i32 16)
; CHECK-NEXT:    [[VST128IP112:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP111]], i32 16)
; CHECK-NEXT:    [[VST128IP113:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP112]], i32 16)
; CHECK-NEXT:    [[VST128IP114:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP113]], i32 16)
; CHECK-NEXT:    [[VST128IP115:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP114]], i32 16)
; CHECK-NEXT:    [[VST128IP116:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP115]], i32 16)
; CHECK-NEXT:    [[VST128IP117:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP116]], i32 16)
; CHECK-NEXT:    [[VLDL64IP118:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP109]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP119:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP118]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP120:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP119]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP121:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP120]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP122:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP121]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP123:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP122]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP124:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP123]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP125:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP124]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP126:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP125]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP127:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP126]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP128:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP127]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP129:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP128]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP130:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP129]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP131:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP130]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP132:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP131]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP133:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP132]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP134:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP117]], i32 16)
; CHECK-NEXT:    [[VST128IP135:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP134]], i32 16)
; CHECK-NEXT:    [[VST128IP136:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP135]], i32 16)
; CHECK-NEXT:    [[VST128IP137:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP136]], i32 16)
; CHECK-NEXT:    [[VST128IP138:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP137]], i32 16)
; CHECK-NEXT:    [[VST128IP139:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP138]], i32 16)
; CHECK-NEXT:    [[VST128IP140:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP139]], i32 16)
; CHECK-NEXT:    [[VST128IP141:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP140]], i32 16)
; CHECK-NEXT:    [[VLDL64IP142:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP133]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP143:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP142]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP144:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP143]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP145:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP144]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP146:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP145]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP147:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP146]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP148:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP147]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP149:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP148]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP150:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP149]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP151:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP150]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP152:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP151]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP153:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP152]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP154:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP153]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP155:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP154]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP156:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP155]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP157:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP156]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP158:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP141]], i32 16)
; CHECK-NEXT:    [[VST128IP159:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP158]], i32 16)
; CHECK-NEXT:    [[VST128IP160:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP159]], i32 16)
; CHECK-NEXT:    [[VST128IP161:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP160]], i32 16)
; CHECK-NEXT:    [[VST128IP162:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP161]], i32 16)
; CHECK-NEXT:    [[VST128IP163:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP162]], i32 16)
; CHECK-NEXT:    [[VST128IP164:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP163]], i32 16)
; CHECK-NEXT:    [[VST128IP165:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP164]], i32 16)
; CHECK-NEXT:    [[VLDL64IP166:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP157]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP167:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP166]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP168:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP167]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP169:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP168]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP170:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP169]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP171:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP170]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP172:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP171]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP173:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP172]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP174:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP173]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP175:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP174]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP176:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP175]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP177:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP176]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP178:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP177]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP179:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP178]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP180:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP179]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP181:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP180]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP182:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP165]], i32 16)
; CHECK-NEXT:    [[VST128IP183:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP182]], i32 16)
; CHECK-NEXT:    [[VST128IP184:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP183]], i32 16)
; CHECK-NEXT:    [[VST128IP185:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP184]], i32 16)
; CHECK-NEXT:    [[VST128IP186:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP185]], i32 16)
; CHECK-NEXT:    [[VST128IP187:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP186]], i32 16)
; CHECK-NEXT:    [[VST128IP188:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP187]], i32 16)
; CHECK-NEXT:    [[VST128IP189:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP188]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1024) %a, ptr noundef nonnull align 8 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

define void @test_src8_dst16_size_20000(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_20000(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    call void @esp32p4MemCpySrc8Dst16Const16(i32 [[TMP1]], i32 [[TMP0]], i32 20000)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(20000) %a, ptr noundef nonnull align 8 dereferenceable(20000) %b, i32 20000, i1 false)
  ret void
}


; src8 dst8
define void @test_src8_dst8_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1) %a, ptr noundef nonnull align 8 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src8_dst8_size_2(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(2) %a, ptr noundef nonnull align 8 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src8_dst8_size_3(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(3) %a, ptr noundef nonnull align 8 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src8_dst8_size_4(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(4) %a, ptr noundef nonnull align 8 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src8_dst8_size_5(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(5) %a, ptr noundef nonnull align 8 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src8_dst8_size_6(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(6) %a, ptr noundef nonnull align 8 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src8_dst8_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(7) %a, ptr noundef nonnull align 8 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src8_dst8_size_8(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(8) %a, ptr noundef nonnull align 8 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src8_dst8_size_9(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(9) %a, ptr noundef nonnull align 8 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src8_dst8_size_10(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(10) %a, ptr noundef nonnull align 8 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src8_dst8_size_11(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(11) %a, ptr noundef nonnull align 8 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src8_dst8_size_12(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(12) %a, ptr noundef nonnull align 8 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src8_dst8_size_13(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(13) %a, ptr noundef nonnull align 8 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src8_dst8_size_14(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(14) %a, ptr noundef nonnull align 8 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src8_dst8_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP9]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(15) %a, ptr noundef nonnull align 8 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src8_dst8_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(16) %a, ptr noundef nonnull align 8 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src8_dst8_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(17) %a, ptr noundef nonnull align 8 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src8_dst8_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP2:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(31) %a, ptr noundef nonnull align 8 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src8_dst8_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(32) %a, ptr noundef nonnull align 8 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src8_dst8_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(33) %a, ptr noundef nonnull align 8 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src8_dst8_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(47) %a, ptr noundef nonnull align 8 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src8_dst8_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(48) %a, ptr noundef nonnull align 8 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src8_dst8_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(49) %a, ptr noundef nonnull align 8 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src8_dst8_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(63) %a, ptr noundef nonnull align 8 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src8_dst8_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(64) %a, ptr noundef nonnull align 8 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src8_dst8_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(65) %a, ptr noundef nonnull align 8 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src8_dst8_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(80) %a, ptr noundef nonnull align 8 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src8_dst8_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(81) %a, ptr noundef nonnull align 8 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src8_dst8_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP1]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP2]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP3]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP4]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP5]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP6]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VLDH64IP15:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP7]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP16:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP15]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP17:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP16]], i32 8, i32 2)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(88) %a, ptr noundef nonnull align 8 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src8_dst8_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(96) %a, ptr noundef nonnull align 8 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src8_dst8_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(112) %a, ptr noundef nonnull align 8 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src8_dst8_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(124) %a, ptr noundef nonnull align 8 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src8_dst8_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(127) %a, ptr noundef nonnull align 8 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src8_dst8_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(128) %a, ptr noundef nonnull align 8 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src8_dst8_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(129) %a, ptr noundef nonnull align 8 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src8_dst8_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP32]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP33]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP34]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP35]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP36]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP38:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP37]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP39:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP38]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP40:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP39]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP41:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP40]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP42:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP41]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP28]], i32 8)
; CHECK-NEXT:    [[VSTH64IP44:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP43]], i32 8)
; CHECK-NEXT:    [[VSTL64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP44]], i32 8)
; CHECK-NEXT:    [[VSTH64IP46:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP45]], i32 8)
; CHECK-NEXT:    [[VSTL64IP47:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP46]], i32 8)
; CHECK-NEXT:    [[VSTH64IP48:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP47]], i32 8)
; CHECK-NEXT:    [[VSTL64IP49:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP48]], i32 8)
; CHECK-NEXT:    [[VSTH64IP50:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP49]], i32 8)
; CHECK-NEXT:    [[VSTL64IP51:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP50]], i32 8)
; CHECK-NEXT:    [[VSTH64IP52:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP51]], i32 8)
; CHECK-NEXT:    [[VSTL64IP53:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP52]], i32 8)
; CHECK-NEXT:    [[VSTH64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP53]], i32 8)
; CHECK-NEXT:    [[VSTL64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP54]], i32 8)
; CHECK-NEXT:    [[VSTH64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP55]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP57:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(255) %a, ptr noundef nonnull align 8 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src8_dst8_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP32]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP33]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP34]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP35]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP36]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP38:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP37]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP39:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP38]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP40:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP39]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP41:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP40]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP42:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP41]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP43:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP42]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP44:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP43]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP28]], i32 8)
; CHECK-NEXT:    [[VSTH64IP46:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP45]], i32 8)
; CHECK-NEXT:    [[VSTL64IP47:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP46]], i32 8)
; CHECK-NEXT:    [[VSTH64IP48:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP47]], i32 8)
; CHECK-NEXT:    [[VSTL64IP49:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP48]], i32 8)
; CHECK-NEXT:    [[VSTH64IP50:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP49]], i32 8)
; CHECK-NEXT:    [[VSTL64IP51:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP50]], i32 8)
; CHECK-NEXT:    [[VSTH64IP52:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP51]], i32 8)
; CHECK-NEXT:    [[VSTL64IP53:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP52]], i32 8)
; CHECK-NEXT:    [[VSTH64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP53]], i32 8)
; CHECK-NEXT:    [[VSTL64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP54]], i32 8)
; CHECK-NEXT:    [[VSTH64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP55]], i32 8)
; CHECK-NEXT:    [[VSTL64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP56]], i32 8)
; CHECK-NEXT:    [[VSTH64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP57]], i32 8)
; CHECK-NEXT:    [[VSTL64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP58]], i32 8)
; CHECK-NEXT:    [[VSTH64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP59]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(256) %a, ptr noundef nonnull align 8 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src8_dst8_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP32]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP33]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP34]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP35]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP36]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP38:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP37]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP39:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP38]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP40:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP39]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP41:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP40]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP42:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP41]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP43:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP42]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP44:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP43]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP28]], i32 8)
; CHECK-NEXT:    [[VSTH64IP46:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP45]], i32 8)
; CHECK-NEXT:    [[VSTL64IP47:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP46]], i32 8)
; CHECK-NEXT:    [[VSTH64IP48:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP47]], i32 8)
; CHECK-NEXT:    [[VSTL64IP49:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP48]], i32 8)
; CHECK-NEXT:    [[VSTH64IP50:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP49]], i32 8)
; CHECK-NEXT:    [[VSTL64IP51:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP50]], i32 8)
; CHECK-NEXT:    [[VSTH64IP52:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP51]], i32 8)
; CHECK-NEXT:    [[VSTL64IP53:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP52]], i32 8)
; CHECK-NEXT:    [[VSTH64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP53]], i32 8)
; CHECK-NEXT:    [[VSTL64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP54]], i32 8)
; CHECK-NEXT:    [[VSTH64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP55]], i32 8)
; CHECK-NEXT:    [[VSTL64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP56]], i32 8)
; CHECK-NEXT:    [[VSTH64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP57]], i32 8)
; CHECK-NEXT:    [[VSTL64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP58]], i32 8)
; CHECK-NEXT:    [[VSTH64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP59]], i32 8)
; CHECK-NEXT:    [[VLDL64IP61:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP44]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP62:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP61]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP63:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP62]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP64:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP63]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP65:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP64]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP66:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP65]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP67:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP66]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP68:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP67]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP69:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP68]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP70:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP69]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP71:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP70]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP72:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP71]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP73:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP72]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP74:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP73]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP75:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP74]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP76:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP75]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP77:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP60]], i32 8)
; CHECK-NEXT:    [[VSTH64IP78:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP77]], i32 8)
; CHECK-NEXT:    [[VSTL64IP79:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP78]], i32 8)
; CHECK-NEXT:    [[VSTH64IP80:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP79]], i32 8)
; CHECK-NEXT:    [[VSTL64IP81:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP80]], i32 8)
; CHECK-NEXT:    [[VSTH64IP82:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP81]], i32 8)
; CHECK-NEXT:    [[VSTL64IP83:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP82]], i32 8)
; CHECK-NEXT:    [[VSTH64IP84:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP83]], i32 8)
; CHECK-NEXT:    [[VSTL64IP85:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP84]], i32 8)
; CHECK-NEXT:    [[VSTH64IP86:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP85]], i32 8)
; CHECK-NEXT:    [[VSTL64IP87:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP86]], i32 8)
; CHECK-NEXT:    [[VSTH64IP88:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP87]], i32 8)
; CHECK-NEXT:    [[VSTL64IP89:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP88]], i32 8)
; CHECK-NEXT:    [[VSTH64IP90:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP89]], i32 8)
; CHECK-NEXT:    [[VSTL64IP91:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP90]], i32 8)
; CHECK-NEXT:    [[VSTH64IP92:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP91]], i32 8)
; CHECK-NEXT:    [[VLDL64IP93:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP76]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP94:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP93]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP95:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP94]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP96:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP95]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP97:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP96]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP98:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP97]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP99:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP98]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP100:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP99]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP101:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP100]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP102:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP101]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP103:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP102]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP104:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP103]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP105:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP104]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP106:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP105]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP107:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP106]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP108:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP107]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP109:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP92]], i32 8)
; CHECK-NEXT:    [[VSTH64IP110:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP109]], i32 8)
; CHECK-NEXT:    [[VSTL64IP111:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP110]], i32 8)
; CHECK-NEXT:    [[VSTH64IP112:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP111]], i32 8)
; CHECK-NEXT:    [[VSTL64IP113:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP112]], i32 8)
; CHECK-NEXT:    [[VSTH64IP114:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP113]], i32 8)
; CHECK-NEXT:    [[VSTL64IP115:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP114]], i32 8)
; CHECK-NEXT:    [[VSTH64IP116:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP115]], i32 8)
; CHECK-NEXT:    [[VSTL64IP117:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP116]], i32 8)
; CHECK-NEXT:    [[VSTH64IP118:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP117]], i32 8)
; CHECK-NEXT:    [[VSTL64IP119:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP118]], i32 8)
; CHECK-NEXT:    [[VSTH64IP120:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP119]], i32 8)
; CHECK-NEXT:    [[VSTL64IP121:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP120]], i32 8)
; CHECK-NEXT:    [[VSTH64IP122:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP121]], i32 8)
; CHECK-NEXT:    [[VSTL64IP123:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP122]], i32 8)
; CHECK-NEXT:    [[VSTH64IP124:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP123]], i32 8)
; CHECK-NEXT:    [[VLDL64IP125:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP108]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP126:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP125]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP127:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP126]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP128:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP127]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP129:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP128]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP130:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP129]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP131:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP130]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP132:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP131]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP133:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP132]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP134:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP133]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP135:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP134]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP136:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP135]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP137:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP136]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP138:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP137]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP139:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP138]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP140:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP139]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP141:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP124]], i32 8)
; CHECK-NEXT:    [[VSTH64IP142:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP141]], i32 8)
; CHECK-NEXT:    [[VSTL64IP143:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP142]], i32 8)
; CHECK-NEXT:    [[VSTH64IP144:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP143]], i32 8)
; CHECK-NEXT:    [[VSTL64IP145:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP144]], i32 8)
; CHECK-NEXT:    [[VSTH64IP146:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP145]], i32 8)
; CHECK-NEXT:    [[VSTL64IP147:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP146]], i32 8)
; CHECK-NEXT:    [[VSTH64IP148:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP147]], i32 8)
; CHECK-NEXT:    [[VSTL64IP149:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP148]], i32 8)
; CHECK-NEXT:    [[VSTH64IP150:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP149]], i32 8)
; CHECK-NEXT:    [[VSTL64IP151:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP150]], i32 8)
; CHECK-NEXT:    [[VSTH64IP152:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP151]], i32 8)
; CHECK-NEXT:    [[VSTL64IP153:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP152]], i32 8)
; CHECK-NEXT:    [[VSTH64IP154:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP153]], i32 8)
; CHECK-NEXT:    [[VSTL64IP155:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP154]], i32 8)
; CHECK-NEXT:    [[VSTH64IP156:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP155]], i32 8)
; CHECK-NEXT:    [[VLDL64IP157:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP140]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP158:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP157]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP159:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP158]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP160:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP159]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP161:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP160]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP162:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP161]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP163:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP162]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP164:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP163]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP165:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP164]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP166:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP165]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP167:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP166]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP168:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP167]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP169:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP168]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP170:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP169]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP171:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP170]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP172:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP171]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP173:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP156]], i32 8)
; CHECK-NEXT:    [[VSTH64IP174:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP173]], i32 8)
; CHECK-NEXT:    [[VSTL64IP175:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP174]], i32 8)
; CHECK-NEXT:    [[VSTH64IP176:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP175]], i32 8)
; CHECK-NEXT:    [[VSTL64IP177:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP176]], i32 8)
; CHECK-NEXT:    [[VSTH64IP178:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP177]], i32 8)
; CHECK-NEXT:    [[VSTL64IP179:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP178]], i32 8)
; CHECK-NEXT:    [[VSTH64IP180:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP179]], i32 8)
; CHECK-NEXT:    [[VSTL64IP181:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP180]], i32 8)
; CHECK-NEXT:    [[VSTH64IP182:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP181]], i32 8)
; CHECK-NEXT:    [[VSTL64IP183:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP182]], i32 8)
; CHECK-NEXT:    [[VSTH64IP184:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP183]], i32 8)
; CHECK-NEXT:    [[VSTL64IP185:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP184]], i32 8)
; CHECK-NEXT:    [[VSTH64IP186:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP185]], i32 8)
; CHECK-NEXT:    [[VSTL64IP187:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP186]], i32 8)
; CHECK-NEXT:    [[VSTH64IP188:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP187]], i32 8)
; CHECK-NEXT:    [[VLDL64IP189:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP172]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP190:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP189]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP191:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP190]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP192:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP191]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP193:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP192]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP194:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP193]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP195:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP194]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP196:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP195]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP197:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP196]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP198:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP197]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP199:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP198]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP200:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP199]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP201:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP200]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP202:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP201]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP203:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP202]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP204:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP203]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP205:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP188]], i32 8)
; CHECK-NEXT:    [[VSTH64IP206:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP205]], i32 8)
; CHECK-NEXT:    [[VSTL64IP207:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP206]], i32 8)
; CHECK-NEXT:    [[VSTH64IP208:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP207]], i32 8)
; CHECK-NEXT:    [[VSTL64IP209:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP208]], i32 8)
; CHECK-NEXT:    [[VSTH64IP210:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP209]], i32 8)
; CHECK-NEXT:    [[VSTL64IP211:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP210]], i32 8)
; CHECK-NEXT:    [[VSTH64IP212:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP211]], i32 8)
; CHECK-NEXT:    [[VSTL64IP213:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP212]], i32 8)
; CHECK-NEXT:    [[VSTH64IP214:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP213]], i32 8)
; CHECK-NEXT:    [[VSTL64IP215:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP214]], i32 8)
; CHECK-NEXT:    [[VSTH64IP216:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP215]], i32 8)
; CHECK-NEXT:    [[VSTL64IP217:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP216]], i32 8)
; CHECK-NEXT:    [[VSTH64IP218:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP217]], i32 8)
; CHECK-NEXT:    [[VSTL64IP219:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP218]], i32 8)
; CHECK-NEXT:    [[VSTH64IP220:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP219]], i32 8)
; CHECK-NEXT:    [[VLDL64IP221:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP204]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP222:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP221]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP223:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP222]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP224:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP223]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP225:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP224]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP226:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP225]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP227:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP226]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP228:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP227]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP229:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP228]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP230:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP229]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP231:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP230]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP232:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP231]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP233:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP232]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP234:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP233]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP235:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP220]], i32 8)
; CHECK-NEXT:    [[VSTH64IP236:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP235]], i32 8)
; CHECK-NEXT:    [[VSTL64IP237:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP236]], i32 8)
; CHECK-NEXT:    [[VSTH64IP238:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP237]], i32 8)
; CHECK-NEXT:    [[VSTL64IP239:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP238]], i32 8)
; CHECK-NEXT:    [[VSTH64IP240:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP239]], i32 8)
; CHECK-NEXT:    [[VSTL64IP241:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP240]], i32 8)
; CHECK-NEXT:    [[VSTH64IP242:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP241]], i32 8)
; CHECK-NEXT:    [[VSTL64IP243:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP242]], i32 8)
; CHECK-NEXT:    [[VSTH64IP244:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP243]], i32 8)
; CHECK-NEXT:    [[VSTL64IP245:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP244]], i32 8)
; CHECK-NEXT:    [[VSTH64IP246:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP245]], i32 8)
; CHECK-NEXT:    [[VSTL64IP247:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP246]], i32 8)
; CHECK-NEXT:    [[VSTH64IP248:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP247]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP249:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP250:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1023) %a, ptr noundef nonnull align 8 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src8_dst8_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP32]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP33]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP34]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP35]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP36]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP38:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP37]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP39:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP38]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP40:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP39]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP41:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP40]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP42:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP41]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP43:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP42]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP44:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP43]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP28]], i32 8)
; CHECK-NEXT:    [[VSTH64IP46:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP45]], i32 8)
; CHECK-NEXT:    [[VSTL64IP47:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP46]], i32 8)
; CHECK-NEXT:    [[VSTH64IP48:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP47]], i32 8)
; CHECK-NEXT:    [[VSTL64IP49:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP48]], i32 8)
; CHECK-NEXT:    [[VSTH64IP50:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP49]], i32 8)
; CHECK-NEXT:    [[VSTL64IP51:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP50]], i32 8)
; CHECK-NEXT:    [[VSTH64IP52:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP51]], i32 8)
; CHECK-NEXT:    [[VSTL64IP53:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP52]], i32 8)
; CHECK-NEXT:    [[VSTH64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP53]], i32 8)
; CHECK-NEXT:    [[VSTL64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP54]], i32 8)
; CHECK-NEXT:    [[VSTH64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP55]], i32 8)
; CHECK-NEXT:    [[VSTL64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP56]], i32 8)
; CHECK-NEXT:    [[VSTH64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP57]], i32 8)
; CHECK-NEXT:    [[VSTL64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP58]], i32 8)
; CHECK-NEXT:    [[VSTH64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP59]], i32 8)
; CHECK-NEXT:    [[VLDL64IP61:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP44]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP62:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP61]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP63:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP62]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP64:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP63]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP65:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP64]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP66:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP65]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP67:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP66]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP68:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP67]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP69:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP68]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP70:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP69]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP71:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP70]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP72:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP71]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP73:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP72]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP74:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP73]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP75:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP74]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP76:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP75]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP77:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP60]], i32 8)
; CHECK-NEXT:    [[VSTH64IP78:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP77]], i32 8)
; CHECK-NEXT:    [[VSTL64IP79:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP78]], i32 8)
; CHECK-NEXT:    [[VSTH64IP80:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP79]], i32 8)
; CHECK-NEXT:    [[VSTL64IP81:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP80]], i32 8)
; CHECK-NEXT:    [[VSTH64IP82:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP81]], i32 8)
; CHECK-NEXT:    [[VSTL64IP83:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP82]], i32 8)
; CHECK-NEXT:    [[VSTH64IP84:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP83]], i32 8)
; CHECK-NEXT:    [[VSTL64IP85:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP84]], i32 8)
; CHECK-NEXT:    [[VSTH64IP86:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP85]], i32 8)
; CHECK-NEXT:    [[VSTL64IP87:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP86]], i32 8)
; CHECK-NEXT:    [[VSTH64IP88:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP87]], i32 8)
; CHECK-NEXT:    [[VSTL64IP89:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP88]], i32 8)
; CHECK-NEXT:    [[VSTH64IP90:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP89]], i32 8)
; CHECK-NEXT:    [[VSTL64IP91:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP90]], i32 8)
; CHECK-NEXT:    [[VSTH64IP92:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP91]], i32 8)
; CHECK-NEXT:    [[VLDL64IP93:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP76]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP94:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP93]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP95:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP94]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP96:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP95]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP97:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP96]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP98:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP97]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP99:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP98]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP100:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP99]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP101:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP100]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP102:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP101]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP103:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP102]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP104:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP103]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP105:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP104]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP106:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP105]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP107:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP106]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP108:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP107]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP109:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP92]], i32 8)
; CHECK-NEXT:    [[VSTH64IP110:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP109]], i32 8)
; CHECK-NEXT:    [[VSTL64IP111:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP110]], i32 8)
; CHECK-NEXT:    [[VSTH64IP112:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP111]], i32 8)
; CHECK-NEXT:    [[VSTL64IP113:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP112]], i32 8)
; CHECK-NEXT:    [[VSTH64IP114:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP113]], i32 8)
; CHECK-NEXT:    [[VSTL64IP115:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP114]], i32 8)
; CHECK-NEXT:    [[VSTH64IP116:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP115]], i32 8)
; CHECK-NEXT:    [[VSTL64IP117:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP116]], i32 8)
; CHECK-NEXT:    [[VSTH64IP118:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP117]], i32 8)
; CHECK-NEXT:    [[VSTL64IP119:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP118]], i32 8)
; CHECK-NEXT:    [[VSTH64IP120:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP119]], i32 8)
; CHECK-NEXT:    [[VSTL64IP121:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP120]], i32 8)
; CHECK-NEXT:    [[VSTH64IP122:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP121]], i32 8)
; CHECK-NEXT:    [[VSTL64IP123:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP122]], i32 8)
; CHECK-NEXT:    [[VSTH64IP124:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP123]], i32 8)
; CHECK-NEXT:    [[VLDL64IP125:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP108]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP126:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP125]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP127:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP126]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP128:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP127]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP129:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP128]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP130:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP129]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP131:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP130]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP132:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP131]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP133:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP132]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP134:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP133]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP135:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP134]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP136:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP135]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP137:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP136]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP138:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP137]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP139:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP138]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP140:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP139]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP141:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP124]], i32 8)
; CHECK-NEXT:    [[VSTH64IP142:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP141]], i32 8)
; CHECK-NEXT:    [[VSTL64IP143:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP142]], i32 8)
; CHECK-NEXT:    [[VSTH64IP144:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP143]], i32 8)
; CHECK-NEXT:    [[VSTL64IP145:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP144]], i32 8)
; CHECK-NEXT:    [[VSTH64IP146:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP145]], i32 8)
; CHECK-NEXT:    [[VSTL64IP147:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP146]], i32 8)
; CHECK-NEXT:    [[VSTH64IP148:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP147]], i32 8)
; CHECK-NEXT:    [[VSTL64IP149:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP148]], i32 8)
; CHECK-NEXT:    [[VSTH64IP150:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP149]], i32 8)
; CHECK-NEXT:    [[VSTL64IP151:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP150]], i32 8)
; CHECK-NEXT:    [[VSTH64IP152:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP151]], i32 8)
; CHECK-NEXT:    [[VSTL64IP153:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP152]], i32 8)
; CHECK-NEXT:    [[VSTH64IP154:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP153]], i32 8)
; CHECK-NEXT:    [[VSTL64IP155:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP154]], i32 8)
; CHECK-NEXT:    [[VSTH64IP156:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP155]], i32 8)
; CHECK-NEXT:    [[VLDL64IP157:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP140]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP158:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP157]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP159:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP158]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP160:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP159]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP161:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP160]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP162:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP161]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP163:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP162]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP164:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP163]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP165:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP164]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP166:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP165]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP167:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP166]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP168:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP167]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP169:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP168]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP170:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP169]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP171:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP170]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP172:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP171]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP173:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP156]], i32 8)
; CHECK-NEXT:    [[VSTH64IP174:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP173]], i32 8)
; CHECK-NEXT:    [[VSTL64IP175:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP174]], i32 8)
; CHECK-NEXT:    [[VSTH64IP176:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP175]], i32 8)
; CHECK-NEXT:    [[VSTL64IP177:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP176]], i32 8)
; CHECK-NEXT:    [[VSTH64IP178:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP177]], i32 8)
; CHECK-NEXT:    [[VSTL64IP179:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP178]], i32 8)
; CHECK-NEXT:    [[VSTH64IP180:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP179]], i32 8)
; CHECK-NEXT:    [[VSTL64IP181:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP180]], i32 8)
; CHECK-NEXT:    [[VSTH64IP182:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP181]], i32 8)
; CHECK-NEXT:    [[VSTL64IP183:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP182]], i32 8)
; CHECK-NEXT:    [[VSTH64IP184:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP183]], i32 8)
; CHECK-NEXT:    [[VSTL64IP185:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP184]], i32 8)
; CHECK-NEXT:    [[VSTH64IP186:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP185]], i32 8)
; CHECK-NEXT:    [[VSTL64IP187:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP186]], i32 8)
; CHECK-NEXT:    [[VSTH64IP188:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP187]], i32 8)
; CHECK-NEXT:    [[VLDL64IP189:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP172]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP190:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP189]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP191:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP190]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP192:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP191]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP193:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP192]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP194:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP193]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP195:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP194]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP196:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP195]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP197:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP196]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP198:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP197]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP199:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP198]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP200:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP199]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP201:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP200]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP202:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP201]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP203:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP202]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP204:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP203]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP205:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP188]], i32 8)
; CHECK-NEXT:    [[VSTH64IP206:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP205]], i32 8)
; CHECK-NEXT:    [[VSTL64IP207:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP206]], i32 8)
; CHECK-NEXT:    [[VSTH64IP208:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP207]], i32 8)
; CHECK-NEXT:    [[VSTL64IP209:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP208]], i32 8)
; CHECK-NEXT:    [[VSTH64IP210:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP209]], i32 8)
; CHECK-NEXT:    [[VSTL64IP211:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP210]], i32 8)
; CHECK-NEXT:    [[VSTH64IP212:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP211]], i32 8)
; CHECK-NEXT:    [[VSTL64IP213:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP212]], i32 8)
; CHECK-NEXT:    [[VSTH64IP214:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP213]], i32 8)
; CHECK-NEXT:    [[VSTL64IP215:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP214]], i32 8)
; CHECK-NEXT:    [[VSTH64IP216:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP215]], i32 8)
; CHECK-NEXT:    [[VSTL64IP217:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP216]], i32 8)
; CHECK-NEXT:    [[VSTH64IP218:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP217]], i32 8)
; CHECK-NEXT:    [[VSTL64IP219:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP218]], i32 8)
; CHECK-NEXT:    [[VSTH64IP220:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP219]], i32 8)
; CHECK-NEXT:    [[VLDL64IP221:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP204]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP222:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP221]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP223:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP222]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP224:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP223]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP225:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP224]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP226:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP225]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP227:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP226]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP228:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP227]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP229:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP228]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP230:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP229]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP231:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP230]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP232:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP231]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP233:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP232]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP234:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP233]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP235:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP234]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP236:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP235]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP237:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP220]], i32 8)
; CHECK-NEXT:    [[VSTH64IP238:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP237]], i32 8)
; CHECK-NEXT:    [[VSTL64IP239:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP238]], i32 8)
; CHECK-NEXT:    [[VSTH64IP240:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP239]], i32 8)
; CHECK-NEXT:    [[VSTL64IP241:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP240]], i32 8)
; CHECK-NEXT:    [[VSTH64IP242:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP241]], i32 8)
; CHECK-NEXT:    [[VSTL64IP243:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP242]], i32 8)
; CHECK-NEXT:    [[VSTH64IP244:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP243]], i32 8)
; CHECK-NEXT:    [[VSTL64IP245:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP244]], i32 8)
; CHECK-NEXT:    [[VSTH64IP246:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP245]], i32 8)
; CHECK-NEXT:    [[VSTL64IP247:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP246]], i32 8)
; CHECK-NEXT:    [[VSTH64IP248:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP247]], i32 8)
; CHECK-NEXT:    [[VSTL64IP249:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP248]], i32 8)
; CHECK-NEXT:    [[VSTH64IP250:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP249]], i32 8)
; CHECK-NEXT:    [[VSTL64IP251:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP250]], i32 8)
; CHECK-NEXT:    [[VSTH64IP252:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP251]], i32 8)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1024) %a, ptr noundef nonnull align 8 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

define void @test_src8_dst8_size_20000(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_20000(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    call void @esp32p4MemCpySrc8Dst8Const16(i32 [[TMP1]], i32 [[TMP0]], i32 20000)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(20000) %a, ptr noundef nonnull align 8 dereferenceable(20000) %b, i32 20000, i1 false)
  ret void
}


; src16 dstunalign
define void @test_src16_dstunalign_constant_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(1) %a, ptr noundef nonnull align 16 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_2(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(2) %a, ptr noundef nonnull align 16 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_3(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i8 [[TMP5]], ptr [[TMP4]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(3) %a, ptr noundef nonnull align 16 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_4(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(4) %a, ptr noundef nonnull align 16 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_5(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i8 [[TMP5]], ptr [[TMP4]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(5) %a, ptr noundef nonnull align 16 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_6(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(6) %a, ptr noundef nonnull align 16 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    store i8 [[TMP8]], ptr [[TMP7]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(7) %a, ptr noundef nonnull align 16 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_8(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 8, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(8) %a, ptr noundef nonnull align 16 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_9(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    store i8 [[TMP8]], ptr [[TMP7]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(9) %a, ptr noundef nonnull align 16 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_10(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[TMP6]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[TMP7]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(10) %a, ptr noundef nonnull align 16 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_11(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[TMP6]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[TMP7]], align 2
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP10]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(11) %a, ptr noundef nonnull align 16 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_12(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(12) %a, ptr noundef nonnull align 16 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_13(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP10]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(13) %a, ptr noundef nonnull align 16 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_14(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(14) %a, ptr noundef nonnull align 16 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(15) %a, ptr noundef nonnull align 16 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 16, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(16) %a, ptr noundef nonnull align 16 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 17, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(17) %a, ptr noundef nonnull align 16 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 31, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(31) %a, ptr noundef nonnull align 16 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 32, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(32) %a, ptr noundef nonnull align 16 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 33, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(33) %a, ptr noundef nonnull align 16 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 47, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(47) %a, ptr noundef nonnull align 16 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 48, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(48) %a, ptr noundef nonnull align 16 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 49, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(49) %a, ptr noundef nonnull align 16 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 63, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(63) %a, ptr noundef nonnull align 16 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 64, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(64) %a, ptr noundef nonnull align 16 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 65, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(65) %a, ptr noundef nonnull align 16 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 80, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(80) %a, ptr noundef nonnull align 16 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 81, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(81) %a, ptr noundef nonnull align 16 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 88, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(88) %a, ptr noundef nonnull align 16 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 96, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(96) %a, ptr noundef nonnull align 16 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 112, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(112) %a, ptr noundef nonnull align 16 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 124, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(124) %a, ptr noundef nonnull align 16 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 127, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(127) %a, ptr noundef nonnull align 16 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 128, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(128) %a, ptr noundef nonnull align 16 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 129, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(129) %a, ptr noundef nonnull align 16 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 255, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(255) %a, ptr noundef nonnull align 16 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 256, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(256) %a, ptr noundef nonnull align 16 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 1023, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(1023) %a, ptr noundef nonnull align 16 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src16_dstunalign_constant_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dstunalign_constant_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 1024, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(1024) %a, ptr noundef nonnull align 16 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

; src8 dstunalign
define void @test_src8_dstunalign_constant_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(1) %a, ptr noundef nonnull align 8 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_2(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(2) %a, ptr noundef nonnull align 8 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_3(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i8 [[TMP5]], ptr [[TMP4]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(3) %a, ptr noundef nonnull align 8 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_4(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(4) %a, ptr noundef nonnull align 8 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_5(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i8 [[TMP5]], ptr [[TMP4]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(5) %a, ptr noundef nonnull align 8 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_6(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(6) %a, ptr noundef nonnull align 8 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    store i8 [[TMP8]], ptr [[TMP7]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(7) %a, ptr noundef nonnull align 8 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_8(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 8, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(8) %a, ptr noundef nonnull align 8 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_9(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    store i8 [[TMP8]], ptr [[TMP7]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(9) %a, ptr noundef nonnull align 8 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_10(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[TMP6]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[TMP7]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(10) %a, ptr noundef nonnull align 8 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_11(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[TMP6]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[TMP7]], align 2
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP10]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(11) %a, ptr noundef nonnull align 8 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_12(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(12) %a, ptr noundef nonnull align 8 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_13(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP10]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(13) %a, ptr noundef nonnull align 8 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_14(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(14) %a, ptr noundef nonnull align 8 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(15) %a, ptr noundef nonnull align 8 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 16, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(16) %a, ptr noundef nonnull align 8 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 17, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(17) %a, ptr noundef nonnull align 8 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 31, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(31) %a, ptr noundef nonnull align 8 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 32, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(32) %a, ptr noundef nonnull align 8 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 33, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(33) %a, ptr noundef nonnull align 8 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 47, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(47) %a, ptr noundef nonnull align 8 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 48, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(48) %a, ptr noundef nonnull align 8 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 49, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(49) %a, ptr noundef nonnull align 8 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 63, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(63) %a, ptr noundef nonnull align 8 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 64, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(64) %a, ptr noundef nonnull align 8 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 65, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(65) %a, ptr noundef nonnull align 8 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 80, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(80) %a, ptr noundef nonnull align 8 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 81, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(81) %a, ptr noundef nonnull align 8 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 88, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(88) %a, ptr noundef nonnull align 8 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 96, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(96) %a, ptr noundef nonnull align 8 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 112, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(112) %a, ptr noundef nonnull align 8 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 124, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(124) %a, ptr noundef nonnull align 8 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 127, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(127) %a, ptr noundef nonnull align 8 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 128, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(128) %a, ptr noundef nonnull align 8 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 129, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(129) %a, ptr noundef nonnull align 8 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 255, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(255) %a, ptr noundef nonnull align 8 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 256, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(256) %a, ptr noundef nonnull align 8 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 1023, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(1023) %a, ptr noundef nonnull align 8 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src8_dstunalign_constant_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dstunalign_constant_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @esp32p4MemCpySrc16DstunalignVar(ptr [[A]], ptr [[B]], i32 1024, i32 1)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(1024) %a, ptr noundef nonnull align 8 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

; srcunalign dst16
define void @test_srcunalign_dst16_constant_size(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    store i8 [[TMP8]], ptr [[TMP7]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(7) %a, ptr noundef nonnull align 1 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(15) %a, ptr noundef nonnull align 1 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(16) %a, ptr noundef nonnull align 1 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(17) %a, ptr noundef nonnull align 1 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP2]], align 8
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[TMP11]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[TMP13]], align 2
; CHECK-NEXT:    store i16 [[TMP15]], ptr [[TMP14]], align 2
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP18:%.*]] = load i8, ptr [[TMP16]], align 1
; CHECK-NEXT:    store i8 [[TMP18]], ptr [[TMP17]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(31) %a, ptr noundef nonnull align 1 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP2_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(32) %a, ptr noundef nonnull align 1 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP2_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(33) %a, ptr noundef nonnull align 1 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP2_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP2]], align 8
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[TMP11]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[TMP13]], align 2
; CHECK-NEXT:    store i16 [[TMP15]], ptr [[TMP14]], align 2
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP18:%.*]] = load i8, ptr [[TMP16]], align 1
; CHECK-NEXT:    store i8 [[TMP18]], ptr [[TMP17]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(47) %a, ptr noundef nonnull align 1 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index0.1(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(48) %a, ptr noundef nonnull align 1 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index1.2(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(49) %a, ptr noundef nonnull align 1 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index2.3(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP2]], align 8
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[TMP11]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[TMP13]], align 2
; CHECK-NEXT:    store i16 [[TMP15]], ptr [[TMP14]], align 2
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP18:%.*]] = load i8, ptr [[TMP16]], align 1
; CHECK-NEXT:    store i8 [[TMP18]], ptr [[TMP17]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(63) %a, ptr noundef nonnull align 1 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.0.4(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(64) %a, ptr noundef nonnull align 1 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.1.5(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(65) %a, ptr noundef nonnull align 1 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index0.6(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(80) %a, ptr noundef nonnull align 1 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index1.7(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(81) %a, ptr noundef nonnull align 1 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index2.8(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(88) %a, ptr noundef nonnull align 1 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index3.9(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(96) %a, ptr noundef nonnull align 1 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.2.10(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(112) %a, ptr noundef nonnull align 1 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.3.11(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP2]], align 8
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[TMP11]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(124) %a, ptr noundef nonnull align 1 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.4.12(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP2]], align 8
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[TMP11]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[TMP13]], align 2
; CHECK-NEXT:    store i16 [[TMP15]], ptr [[TMP14]], align 2
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP18:%.*]] = load i8, ptr [[TMP16]], align 1
; CHECK-NEXT:    store i8 [[TMP18]], ptr [[TMP17]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(127) %a, ptr noundef nonnull align 1 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index3.13(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(128) %a, ptr noundef nonnull align 1 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index4.14(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(129) %a, ptr noundef nonnull align 1 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index4.15(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP2]], align 8
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[TMP11]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[TMP13]], align 2
; CHECK-NEXT:    store i16 [[TMP15]], ptr [[TMP14]], align 2
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP18:%.*]] = load i8, ptr [[TMP16]], align 1
; CHECK-NEXT:    store i8 [[TMP18]], ptr [[TMP17]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(255) %a, ptr noundef nonnull align 1 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.5.16(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(256) %a, ptr noundef nonnull align 1 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index5.17(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP2]], align 8
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[TMP10]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[TMP11]], align 4
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP15:%.*]] = load i16, ptr [[TMP13]], align 2
; CHECK-NEXT:    store i16 [[TMP15]], ptr [[TMP14]], align 2
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP18:%.*]] = load i8, ptr [[TMP16]], align 1
; CHECK-NEXT:    store i8 [[TMP18]], ptr [[TMP17]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1023) %a, ptr noundef nonnull align 1 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_srcunalign_dst16_constant_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst16_constant_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.6.18(i32 [[TMP1]], i32 [[TMP0]])
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1024) %a, ptr noundef nonnull align 1 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

; srcunalign dst8
define void @test_srcunalign_dst8_constant_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1) %a, ptr noundef nonnull align 1 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_2(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(2) %a, ptr noundef nonnull align 1 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_3(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i8 [[TMP5]], ptr [[TMP4]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(3) %a, ptr noundef nonnull align 1 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_4(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(4) %a, ptr noundef nonnull align 1 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_5(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i8 [[TMP5]], ptr [[TMP4]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(5) %a, ptr noundef nonnull align 1 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_6(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(6) %a, ptr noundef nonnull align 1 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    store i8 [[TMP8]], ptr [[TMP7]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(7) %a, ptr noundef nonnull align 1 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_8(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(8) [[A]], ptr noundef nonnull align 1 dereferenceable(8) [[B]], i32 8, i1 false)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(8) %a, ptr noundef nonnull align 1 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_9(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    store i8 [[TMP8]], ptr [[TMP7]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(9) %a, ptr noundef nonnull align 1 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_10(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[TMP6]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[TMP7]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(10) %a, ptr noundef nonnull align 1 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_11(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[TMP6]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[TMP7]], align 2
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP10]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(11) %a, ptr noundef nonnull align 1 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_12(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(12) %a, ptr noundef nonnull align 1 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_13(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP10]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(13) %a, ptr noundef nonnull align 1 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_14(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(14) %a, ptr noundef nonnull align 1 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(15) %a, ptr noundef nonnull align 1 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ADD_PTR_I]], align 1
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[ADD_PTR1_I]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(16) %a, ptr noundef nonnull align 1 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ADD_PTR_I]], align 1
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[ADD_PTR1_I]], align 16
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP10]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(17) %a, ptr noundef nonnull align 1 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr [[ADD_PTR_I]], align 1
; CHECK-NEXT:    store i64 [[TMP1]], ptr [[ADD_PTR1_I]], align 16
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP2]], align 8
; CHECK-NEXT:    store i64 [[TMP4]], ptr [[TMP3]], align 8
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[TMP15]], align 4
; CHECK-NEXT:    store i32 [[TMP17]], ptr [[TMP16]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP20:%.*]] = load i16, ptr [[TMP18]], align 2
; CHECK-NEXT:    store i16 [[TMP20]], ptr [[TMP19]], align 2
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP23:%.*]] = load i8, ptr [[TMP21]], align 1
; CHECK-NEXT:    store i8 [[TMP23]], ptr [[TMP22]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(31) %a, ptr noundef nonnull align 1 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP1]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP2]], i32 16)
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(32) %a, ptr noundef nonnull align 1 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP1]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP2]], i32 16)
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP15:%.*]] = load i8, ptr [[TMP13]], align 1
; CHECK-NEXT:    store i8 [[TMP15]], ptr [[TMP14]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(33) %a, ptr noundef nonnull align 1 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP1]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP2]], i32 16)
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[TMP6]], align 8
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, ptr [[TMP19]], align 4
; CHECK-NEXT:    store i32 [[TMP21]], ptr [[TMP20]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[TMP22]], align 2
; CHECK-NEXT:    store i16 [[TMP24]], ptr [[TMP23]], align 2
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[TMP25]], align 1
; CHECK-NEXT:    store i8 [[TMP27]], ptr [[TMP26]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(47) %a, ptr noundef nonnull align 1 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP1]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP2]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP2_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(48) %a, ptr noundef nonnull align 1 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP1]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP2]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP2_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP15:%.*]] = load i8, ptr [[TMP13]], align 1
; CHECK-NEXT:    store i8 [[TMP15]], ptr [[TMP14]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(49) %a, ptr noundef nonnull align 1 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP1]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP2]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP2_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[TMP6]], align 8
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, ptr [[TMP19]], align 4
; CHECK-NEXT:    store i32 [[TMP21]], ptr [[TMP20]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[TMP22]], align 2
; CHECK-NEXT:    store i16 [[TMP24]], ptr [[TMP23]], align 2
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[TMP25]], align 1
; CHECK-NEXT:    store i8 [[TMP27]], ptr [[TMP26]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(63) %a, ptr noundef nonnull align 1 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index6.19(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(64) %a, ptr noundef nonnull align 1 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index7.20(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP15:%.*]] = load i8, ptr [[TMP13]], align 1
; CHECK-NEXT:    store i8 [[TMP15]], ptr [[TMP14]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(65) %a, ptr noundef nonnull align 1 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.7.21(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 72
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 72
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(80) %a, ptr noundef nonnull align 1 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.8.22(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 72
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 72
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP15:%.*]] = load i8, ptr [[TMP13]], align 1
; CHECK-NEXT:    store i8 [[TMP15]], ptr [[TMP14]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(81) %a, ptr noundef nonnull align 1 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = ptrtoint ptr [[TMP6]] to i32
; CHECK-NEXT:    [[TMP9:%.*]] = ptrtoint ptr [[TMP7]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index5.23(i32 [[TMP9]], i32 [[TMP8]])
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(88) %a, ptr noundef nonnull align 1 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index6.24(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 88
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 88
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(96) %a, ptr noundef nonnull align 1 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index8.25(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 104
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 104
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(112) %a, ptr noundef nonnull align 1 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index9.26(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 104
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 104
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[TMP6]], align 8
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, ptr [[TMP19]], align 4
; CHECK-NEXT:    store i32 [[TMP21]], ptr [[TMP20]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(124) %a, ptr noundef nonnull align 1 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index10.27(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 104
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 104
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[TMP6]], align 8
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, ptr [[TMP19]], align 4
; CHECK-NEXT:    store i32 [[TMP21]], ptr [[TMP20]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[TMP22]], align 2
; CHECK-NEXT:    store i16 [[TMP24]], ptr [[TMP23]], align 2
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[TMP25]], align 1
; CHECK-NEXT:    store i8 [[TMP27]], ptr [[TMP26]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(127) %a, ptr noundef nonnull align 1 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.9.28(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(128) %a, ptr noundef nonnull align 1 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From16to31.10.29(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP15:%.*]] = load i8, ptr [[TMP13]], align 1
; CHECK-NEXT:    store i8 [[TMP15]], ptr [[TMP14]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(129) %a, ptr noundef nonnull align 1 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index7.30(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 232
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 232
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[TMP6]], align 8
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, ptr [[TMP19]], align 4
; CHECK-NEXT:    store i32 [[TMP21]], ptr [[TMP20]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[TMP22]], align 2
; CHECK-NEXT:    store i16 [[TMP24]], ptr [[TMP23]], align 2
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[TMP25]], align 1
; CHECK-NEXT:    store i8 [[TMP27]], ptr [[TMP26]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(255) %a, ptr noundef nonnull align 1 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index11.31(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(256) %a, ptr noundef nonnull align 1 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index8.32(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 1000
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 1000
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP8:%.*]] = load i64, ptr [[TMP6]], align 8
; CHECK-NEXT:    store i64 [[TMP8]], ptr [[TMP7]], align 8
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, ptr [[TMP19]], align 4
; CHECK-NEXT:    store i32 [[TMP21]], ptr [[TMP20]], align 4
; CHECK-NEXT:    [[TMP22:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP23:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP24:%.*]] = load i16, ptr [[TMP22]], align 2
; CHECK-NEXT:    store i16 [[TMP24]], ptr [[TMP23]], align 2
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP26:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP27:%.*]] = load i8, ptr [[TMP25]], align 1
; CHECK-NEXT:    store i8 [[TMP27]], ptr [[TMP26]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1023) %a, ptr noundef nonnull align 1 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_srcunalign_dst8_constant_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dst8_constant_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 1
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    [[ADD_PTR1_I:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[ADD_PTR_I:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[ADD_PTR_I]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = ptrtoint ptr [[ADD_PTR1_I]] to i32
; CHECK-NEXT:    tail call void @esp32p4MemCpySrcunalignedDst16Div48Index12.33(i32 [[TMP2]], i32 [[TMP1]])
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i64 [[TMP5]], ptr [[TMP4]], align 16
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1024) %a, ptr noundef nonnull align 1 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

; srcunalign dstunalign
define void @test_srcunalign_dstunalign_constant_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(1) %a, ptr noundef nonnull align 1 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_2(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(2) %a, ptr noundef nonnull align 1 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_3(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i8 [[TMP5]], ptr [[TMP4]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(3) %a, ptr noundef nonnull align 1 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_4(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(4) %a, ptr noundef nonnull align 1 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_5(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i8, ptr [[TMP3]], align 1
; CHECK-NEXT:    store i8 [[TMP5]], ptr [[TMP4]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(5) %a, ptr noundef nonnull align 1 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_6(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(6) %a, ptr noundef nonnull align 1 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[TMP3]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[TMP4]], align 2
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    store i8 [[TMP8]], ptr [[TMP7]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(7) %a, ptr noundef nonnull align 1 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_8(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(8) %a, ptr noundef nonnull align 1 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_9(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP6]], align 1
; CHECK-NEXT:    store i8 [[TMP8]], ptr [[TMP7]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(9) %a, ptr noundef nonnull align 1 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_10(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[TMP6]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[TMP7]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(10) %a, ptr noundef nonnull align 1 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_11(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[TMP6]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[TMP7]], align 2
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP10]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(11) %a, ptr noundef nonnull align 1 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_12(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(12) %a, ptr noundef nonnull align 1 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_13(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[TMP10]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(13) %a, ptr noundef nonnull align 1 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_14(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(14) %a, ptr noundef nonnull align 1 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr [[B]], align 8
; CHECK-NEXT:    store i64 [[TMP0]], ptr [[A]], align 8
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(15) %a, ptr noundef nonnull align 1 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP9_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(16) %a, ptr noundef nonnull align 1 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP9_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SUB_SRC_I:%.*]] = add i32 [[LD128USARIP1_I]], -16
; CHECK-NEXT:    [[DST_PTR_FINAL_I:%.*]] = inttoptr i32 [[VST128IP9_I]] to ptr
; CHECK-NEXT:    [[SRC_PTR_FINAL_I:%.*]] = inttoptr i32 [[SUB_SRC_I]] to ptr
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[SRC_PTR_FINAL_I]], align 1
; CHECK-NEXT:    store i8 [[TMP2]], ptr [[DST_PTR_FINAL_I]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(17) %a, ptr noundef nonnull align 1 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP9_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SUB_SRC_I:%.*]] = add i32 [[LD128USARIP1_I]], -16
; CHECK-NEXT:    [[DST_PTR_FINAL_I:%.*]] = inttoptr i32 [[VST128IP9_I]] to ptr
; CHECK-NEXT:    [[SRC_PTR_FINAL_I:%.*]] = inttoptr i32 [[SUB_SRC_I]] to ptr
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP2]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3267_I:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3268_I:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[SRC_GEP_I3267_I]], align 4
; CHECK-NEXT:    store i32 [[TMP3]], ptr [[DST_GEP_I3268_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3269_I:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3270_I:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[SRC_GEP_I3269_I]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[DST_GEP_I3270_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1671_I:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[DST_GEP_I1672_I:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[SRC_GEP_I1671_I]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[DST_GEP_I1672_I]], align 2
; CHECK-NEXT:    [[SRC_GEP_I873_I:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 14
; CHECK-NEXT:    [[DST_GEP_I874_I:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 14
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[SRC_GEP_I873_I]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[DST_GEP_I874_I]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(31) %a, ptr noundef nonnull align 1 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[SRCQLDIP6_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7_I]], i32 16)
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(32) %a, ptr noundef nonnull align 1 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[SRCQLDIP6_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7_I]], i32 16)
; CHECK-NEXT:    [[DST_PTR_FINAL_I:%.*]] = inttoptr i32 [[VST128IP8_I]] to ptr
; CHECK-NEXT:    [[SRC_PTR_FINAL_I:%.*]] = inttoptr i32 [[SRCQLDIP6_I]] to ptr
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr [[SRC_PTR_FINAL_I]], align 1
; CHECK-NEXT:    store i8 [[TMP2]], ptr [[DST_PTR_FINAL_I]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(33) %a, ptr noundef nonnull align 1 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[SRCQLDIP6_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7_I]], i32 16)
; CHECK-NEXT:    [[DST_PTR_FINAL_I:%.*]] = inttoptr i32 [[VST128IP8_I]] to ptr
; CHECK-NEXT:    [[SRC_PTR_FINAL_I:%.*]] = inttoptr i32 [[SRCQLDIP6_I]] to ptr
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP2]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3267_I:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3268_I:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[SRC_GEP_I3267_I]], align 4
; CHECK-NEXT:    store i32 [[TMP3]], ptr [[DST_GEP_I3268_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3269_I:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3270_I:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[SRC_GEP_I3269_I]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[DST_GEP_I3270_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1671_I:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[DST_GEP_I1672_I:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[TMP5:%.*]] = load i16, ptr [[SRC_GEP_I1671_I]], align 2
; CHECK-NEXT:    store i16 [[TMP5]], ptr [[DST_GEP_I1672_I]], align 2
; CHECK-NEXT:    [[SRC_GEP_I873_I:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 14
; CHECK-NEXT:    [[DST_GEP_I874_I:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 14
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[SRC_GEP_I873_I]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[DST_GEP_I874_I]], align 1
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(47) %a, ptr noundef nonnull align 1 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(48) %a, ptr noundef nonnull align 1 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(49) %a, ptr noundef nonnull align 1 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(63) %a, ptr noundef nonnull align 1 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(64) %a, ptr noundef nonnull align 1 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(65) %a, ptr noundef nonnull align 1 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(80) %a, ptr noundef nonnull align 1 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(81) %a, ptr noundef nonnull align 1 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(88) %a, ptr noundef nonnull align 1 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(96) %a, ptr noundef nonnull align 1 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(112) %a, ptr noundef nonnull align 1 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(124) %a, ptr noundef nonnull align 1 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(127) %a, ptr noundef nonnull align 1 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(128) %a, ptr noundef nonnull align 1 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(129) %a, ptr noundef nonnull align 1 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(255) %a, ptr noundef nonnull align 1 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(256) %a, ptr noundef nonnull align 1 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(1023) %a, ptr noundef nonnull align 1 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_srcunalign_dstunalign_constant_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_srcunalign_dstunalign_constant_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[MAIN_LOOP_BODY_I:.*]]
; CHECK:       [[MAIN_LOOP_BODY_I]]:
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[LD128USARIP1_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    br i1 true, label %[[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT:.*]], label %[[MAIN_LOOP_BODY_I]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNEDDST16VAR_EXIT]]:
; CHECK-NEXT:    ret void
;

entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 1 dereferenceable(1024) %a, ptr noundef nonnull align 1 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg)


; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrc16Dst16Const16(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc16Dst16Const16(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP3:%.*]] = lshr i32 [[TMP2]], 7
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP2]], 128
; CHECK-NEXT:    br i1 [[TMP4]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[TMP6:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLD128IP7:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VST128IP14:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[SRC_PTR_LOOP]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[TMP6]] = add nuw nsw i32 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[FOR_COND_CLEANUP]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRC_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLD128IP7]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VST128IP14]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[SRC_PTR_CLEANUP]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_CLEANUP]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %3 = lshr i32 %2, 7
  %4 = icmp ult i32 %2, 128
  br i1 %4, label %for.cond.cleanup, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %5 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  %src.ptr.loop = phi i32 [ %1, %entry ], [ %vld128ip7, %for.body ]
  %dst.ptr.loop = phi i32 [ %0, %entry ], [ %vst128ip14, %for.body ]
  %vld128ip = call i32 @llvm.riscv.esp.vld.128.ip(i32 %src.ptr.loop, i32 16, i32 0)
  %vld128ip1 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip, i32 16, i32 1)
  %vld128ip2 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip1, i32 16, i32 2)
  %vld128ip3 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip2, i32 16, i32 3)
  %vld128ip4 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip3, i32 16, i32 4)
  %vld128ip5 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip4, i32 16, i32 5)
  %vld128ip6 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip5, i32 16, i32 6)
  %vld128ip7 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip6, i32 16, i32 7)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %vst128ip9 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip8, i32 16)
  %vst128ip10 = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 %vst128ip9, i32 16)
  %vst128ip11 = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 %vst128ip10, i32 16)
  %vst128ip12 = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 %vst128ip11, i32 16)
  %vst128ip13 = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 %vst128ip12, i32 16)
  %vst128ip14 = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 %vst128ip13, i32 16)
  %6 = add nuw nsw i32 %5, 1
  %7 = icmp eq i32 %6, %3
  br i1 %7, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %src.ptr.cleanup = phi i32 [ %1, %entry ], [ %vld128ip7, %for.body ]
  %dst.ptr.cleanup = phi i32 [ %0, %entry ], [ %vst128ip14, %for.body ]
  %vld128ip15 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %src.ptr.cleanup, i32 16, i32 0)
  %vld128ip16 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip15, i32 16, i32 1)
  %vst128ip17 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.cleanup, i32 16)
  %vst128ip18 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip17, i32 16)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrc16Dst16From1To7Opt(ptr %dst, ptr %src, i32 %size) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc16Dst16From1To7Opt(
; CHECK-SAME: ptr [[DST:%.*]], ptr [[SRC:%.*]], i32 [[SIZE:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    switch i32 [[SIZE]], label %[[RETURN:.*]] [
; CHECK-NEXT:      i32 1, label %[[SW_BB1:.*]]
; CHECK-NEXT:      i32 2, label %[[SW_BB2:.*]]
; CHECK-NEXT:      i32 3, label %[[SW_BB3:.*]]
; CHECK-NEXT:      i32 4, label %[[SW_BB4:.*]]
; CHECK-NEXT:      i32 5, label %[[SW_BB5:.*]]
; CHECK-NEXT:      i32 6, label %[[SW_BB6:.*]]
; CHECK-NEXT:      i32 7, label %[[SW_BB7:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[RETURN]]:
; CHECK-NEXT:    ret void
; CHECK:       [[SW_BB1]]:
; CHECK-NEXT:    [[SRC_GEP_I8:%.*]] = getelementptr i8, ptr [[SRC]], i32 0
; CHECK-NEXT:    [[DST_GEP_I8:%.*]] = getelementptr i8, ptr [[DST]], i32 0
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[SRC_GEP_I8]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[DST_GEP_I8]], align 1
; CHECK-NEXT:    br label %[[RETURN]]
; CHECK:       [[SW_BB2]]:
; CHECK-NEXT:    [[SRC_GEP_I16:%.*]] = getelementptr i8, ptr [[SRC]], i32 0
; CHECK-NEXT:    [[DST_GEP_I16:%.*]] = getelementptr i8, ptr [[DST]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[SRC_GEP_I16]], align 2
; CHECK-NEXT:    store i16 [[TMP1]], ptr [[DST_GEP_I16]], align 2
; CHECK-NEXT:    br label %[[RETURN]]
; CHECK:       [[SW_BB3]]:
; CHECK-NEXT:    [[SRC_GEP_I161:%.*]] = getelementptr i8, ptr [[SRC]], i32 0
; CHECK-NEXT:    [[DST_GEP_I162:%.*]] = getelementptr i8, ptr [[DST]], i32 0
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[SRC_GEP_I161]], align 2
; CHECK-NEXT:    store i16 [[TMP2]], ptr [[DST_GEP_I162]], align 2
; CHECK-NEXT:    [[SRC_GEP_I83:%.*]] = getelementptr i8, ptr [[SRC]], i32 2
; CHECK-NEXT:    [[DST_GEP_I84:%.*]] = getelementptr i8, ptr [[DST]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[SRC_GEP_I83]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[DST_GEP_I84]], align 1
; CHECK-NEXT:    br label %[[RETURN]]
; CHECK:       [[SW_BB4]]:
; CHECK-NEXT:    [[SRC_GEP_I32:%.*]] = getelementptr i8, ptr [[SRC]], i32 0
; CHECK-NEXT:    [[DST_GEP_I32:%.*]] = getelementptr i8, ptr [[DST]], i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[SRC_GEP_I32]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[DST_GEP_I32]], align 4
; CHECK-NEXT:    br label %[[RETURN]]
; CHECK:       [[SW_BB5]]:
; CHECK-NEXT:    [[SRC_GEP_I325:%.*]] = getelementptr i8, ptr [[SRC]], i32 0
; CHECK-NEXT:    [[DST_GEP_I326:%.*]] = getelementptr i8, ptr [[DST]], i32 0
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[SRC_GEP_I325]], align 4
; CHECK-NEXT:    store i32 [[TMP5]], ptr [[DST_GEP_I326]], align 4
; CHECK-NEXT:    [[SRC_GEP_I87:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I88:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[SRC_GEP_I87]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[DST_GEP_I88]], align 1
; CHECK-NEXT:    br label %[[RETURN]]
; CHECK:       [[SW_BB6]]:
; CHECK-NEXT:    [[SRC_GEP_I329:%.*]] = getelementptr i8, ptr [[SRC]], i32 0
; CHECK-NEXT:    [[DST_GEP_I3210:%.*]] = getelementptr i8, ptr [[DST]], i32 0
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[SRC_GEP_I329]], align 4
; CHECK-NEXT:    store i32 [[TMP7]], ptr [[DST_GEP_I3210]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1611:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I1612:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[SRC_GEP_I1611]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[DST_GEP_I1612]], align 2
; CHECK-NEXT:    br label %[[RETURN]]
; CHECK:       [[SW_BB7]]:
; CHECK-NEXT:    [[SRC_GEP_I3213:%.*]] = getelementptr i8, ptr [[SRC]], i32 0
; CHECK-NEXT:    [[DST_GEP_I3214:%.*]] = getelementptr i8, ptr [[DST]], i32 0
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[SRC_GEP_I3213]], align 4
; CHECK-NEXT:    store i32 [[TMP9]], ptr [[DST_GEP_I3214]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1615:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I1616:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP10:%.*]] = load i16, ptr [[SRC_GEP_I1615]], align 2
; CHECK-NEXT:    store i16 [[TMP10]], ptr [[DST_GEP_I1616]], align 2
; CHECK-NEXT:    [[SRC_GEP_I817:%.*]] = getelementptr i8, ptr [[SRC]], i32 6
; CHECK-NEXT:    [[DST_GEP_I818:%.*]] = getelementptr i8, ptr [[DST]], i32 6
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[SRC_GEP_I817]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[DST_GEP_I818]], align 1
; CHECK-NEXT:    br label %[[RETURN]]
;
entry:
  switch i32 %size, label %return [
  i32 1, label %sw.bb1
  i32 2, label %sw.bb2
  i32 3, label %sw.bb3
  i32 4, label %sw.bb4
  i32 5, label %sw.bb5
  i32 6, label %sw.bb6
  i32 7, label %sw.bb7
  ]

return:                                           ; preds = %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %entry
  ret void

sw.bb1:                                           ; preds = %entry
  %src.gep.i8 = getelementptr i8, ptr %src, i32 0
  %dst.gep.i8 = getelementptr i8, ptr %dst, i32 0
  %0 = load i8, ptr %src.gep.i8, align 1
  store i8 %0, ptr %dst.gep.i8, align 1
  br label %return

sw.bb2:                                           ; preds = %entry
  %src.gep.i16 = getelementptr i8, ptr %src, i32 0
  %dst.gep.i16 = getelementptr i8, ptr %dst, i32 0
  %1 = load i16, ptr %src.gep.i16, align 2
  store i16 %1, ptr %dst.gep.i16, align 2
  br label %return

sw.bb3:                                           ; preds = %entry
  %src.gep.i161 = getelementptr i8, ptr %src, i32 0
  %dst.gep.i162 = getelementptr i8, ptr %dst, i32 0
  %2 = load i16, ptr %src.gep.i161, align 2
  store i16 %2, ptr %dst.gep.i162, align 2
  %src.gep.i83 = getelementptr i8, ptr %src, i32 2
  %dst.gep.i84 = getelementptr i8, ptr %dst, i32 2
  %3 = load i8, ptr %src.gep.i83, align 1
  store i8 %3, ptr %dst.gep.i84, align 1
  br label %return

sw.bb4:                                           ; preds = %entry
  %src.gep.i32 = getelementptr i8, ptr %src, i32 0
  %dst.gep.i32 = getelementptr i8, ptr %dst, i32 0
  %4 = load i32, ptr %src.gep.i32, align 4
  store i32 %4, ptr %dst.gep.i32, align 4
  br label %return

sw.bb5:                                           ; preds = %entry
  %src.gep.i325 = getelementptr i8, ptr %src, i32 0
  %dst.gep.i326 = getelementptr i8, ptr %dst, i32 0
  %5 = load i32, ptr %src.gep.i325, align 4
  store i32 %5, ptr %dst.gep.i326, align 4
  %src.gep.i87 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i88 = getelementptr i8, ptr %dst, i32 4
  %6 = load i8, ptr %src.gep.i87, align 1
  store i8 %6, ptr %dst.gep.i88, align 1
  br label %return

sw.bb6:                                           ; preds = %entry
  %src.gep.i329 = getelementptr i8, ptr %src, i32 0
  %dst.gep.i3210 = getelementptr i8, ptr %dst, i32 0
  %7 = load i32, ptr %src.gep.i329, align 4
  store i32 %7, ptr %dst.gep.i3210, align 4
  %src.gep.i1611 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i1612 = getelementptr i8, ptr %dst, i32 4
  %8 = load i16, ptr %src.gep.i1611, align 2
  store i16 %8, ptr %dst.gep.i1612, align 2
  br label %return

sw.bb7:                                           ; preds = %entry
  %src.gep.i3213 = getelementptr i8, ptr %src, i32 0
  %dst.gep.i3214 = getelementptr i8, ptr %dst, i32 0
  %9 = load i32, ptr %src.gep.i3213, align 4
  store i32 %9, ptr %dst.gep.i3214, align 4
  %src.gep.i1615 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i1616 = getelementptr i8, ptr %dst, i32 4
  %10 = load i16, ptr %src.gep.i1615, align 2
  store i16 %10, ptr %dst.gep.i1616, align 2
  %src.gep.i817 = getelementptr i8, ptr %src, i32 6
  %dst.gep.i818 = getelementptr i8, ptr %dst, i32 6
  %11 = load i8, ptr %src.gep.i817, align 1
  store i8 %11, ptr %dst.gep.i818, align 1
  br label %return
}

; Function Attrs: nounwind
declare i32 @llvm.riscv.esp.vst.h.64.ip(i32 immarg, i32, i32 immarg) #10

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrc16Dst8Const16(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc16Dst8Const16(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP3:%.*]] = lshr i32 [[TMP2]], 7
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP2]], 128
; CHECK-NEXT:    br i1 [[TMP4]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[TMP6:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLD128IP7:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VSTH64IP21:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[SRC_PTR_LOOP]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[TMP6]] = add nuw nsw i32 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[FOR_COND_CLEANUP]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRC_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLD128IP7]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VSTH64IP21]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[SRC_PTR_CLEANUP]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VSTL64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[DST_PTR_CLEANUP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP24]], i32 8)
; CHECK-NEXT:    [[VSTL64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP25]], i32 8)
; CHECK-NEXT:    [[VSTH64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP26]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  %3 = lshr i32 %2, 7
  %4 = icmp ult i32 %2, 128
  br i1 %4, label %for.cond.cleanup, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %5 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  %src.ptr.loop = phi i32 [ %1, %entry ], [ %vld128ip7, %for.body ]
  %dst.ptr.loop = phi i32 [ %0, %entry ], [ %vsth64ip21, %for.body ]
  %vld128ip = call i32 @llvm.riscv.esp.vld.128.ip(i32 %src.ptr.loop, i32 16, i32 0)
  %vld128ip1 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip, i32 16, i32 1)
  %vld128ip2 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip1, i32 16, i32 2)
  %vld128ip3 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip2, i32 16, i32 3)
  %vld128ip4 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip3, i32 16, i32 4)
  %vld128ip5 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip4, i32 16, i32 5)
  %vld128ip6 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip5, i32 16, i32 6)
  %vld128ip7 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip6, i32 16, i32 7)
  %vstl64ip = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 %dst.ptr.loop, i32 8)
  %vsth64ip = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 %vstl64ip, i32 8)
  %vstl64ip8 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 %vsth64ip, i32 8)
  %vsth64ip9 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 %vstl64ip8, i32 8)
  %vstl64ip10 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 %vsth64ip9, i32 8)
  %vsth64ip11 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 %vstl64ip10, i32 8)
  %vstl64ip12 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 %vsth64ip11, i32 8)
  %vsth64ip13 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 %vstl64ip12, i32 8)
  %vstl64ip14 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 %vsth64ip13, i32 8)
  %vsth64ip15 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 %vstl64ip14, i32 8)
  %vstl64ip16 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 %vsth64ip15, i32 8)
  %vsth64ip17 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 %vstl64ip16, i32 8)
  %vstl64ip18 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 %vsth64ip17, i32 8)
  %vsth64ip19 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 %vstl64ip18, i32 8)
  %vstl64ip20 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 %vsth64ip19, i32 8)
  %vsth64ip21 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 %vstl64ip20, i32 8)
  %6 = add nuw nsw i32 %5, 1
  %7 = icmp eq i32 %6, %3
  br i1 %7, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %src.ptr.cleanup = phi i32 [ %1, %entry ], [ %vld128ip7, %for.body ]
  %dst.ptr.cleanup = phi i32 [ %0, %entry ], [ %vsth64ip21, %for.body ]
  %vld128ip22 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %src.ptr.cleanup, i32 16, i32 0)
  %vld128ip23 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip22, i32 16, i32 1)
  %vstl64ip24 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 %dst.ptr.cleanup, i32 8)
  %vsth64ip25 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 %vstl64ip24, i32 8)
  %vstl64ip26 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 %vsth64ip25, i32 8)
  %vsth64ip27 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 %vstl64ip26, i32 8)
  ret void
}


; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrc16DstunalignVar(ptr %dst, ptr %src, i32 %size, i32 %dst_align) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc16DstunalignVar(
; CHECK-SAME: ptr [[DST:%.*]], ptr [[SRC:%.*]], i32 [[SIZE:%.*]], i32 [[DST_ALIGN:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 16, [[DST_ALIGN]]
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp ult i32 [[SUB]], [[SIZE]]
; CHECK-NEXT:    br i1 [[CMP_NOT]], label %[[IF_END:.*]], label %[[IF_THEN:.*]]
; CHECK:       [[IF_THEN]]:
; CHECK-NEXT:    switch i32 [[SIZE]], label %[[CLEANUP:.*]] [
; CHECK-NEXT:      i32 1, label %[[SW_BB1_I65:.*]]
; CHECK-NEXT:      i32 2, label %[[SW_BB2_I64:.*]]
; CHECK-NEXT:      i32 3, label %[[SW_BB3_I61:.*]]
; CHECK-NEXT:      i32 4, label %[[SW_BB4_I60:.*]]
; CHECK-NEXT:      i32 5, label %[[SW_BB5_I57:.*]]
; CHECK-NEXT:      i32 6, label %[[SW_BB6_I54:.*]]
; CHECK-NEXT:      i32 7, label %[[SW_BB7_I49:.*]]
; CHECK-NEXT:      i32 8, label %[[SW_BB8_I46:.*]]
; CHECK-NEXT:      i32 9, label %[[SW_BB9_I41:.*]]
; CHECK-NEXT:      i32 10, label %[[SW_BB10_I36:.*]]
; CHECK-NEXT:      i32 11, label %[[SW_BB11_I29:.*]]
; CHECK-NEXT:      i32 12, label %[[SW_BB12_I24:.*]]
; CHECK-NEXT:      i32 13, label %[[SW_BB13_I17:.*]]
; CHECK-NEXT:      i32 14, label %[[SW_BB14_I10:.*]]
; CHECK-NEXT:      i32 15, label %[[SW_BB15_I1:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[SW_BB1_I65]]:
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[SRC]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[DST]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB2_I64]]:
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[SRC]], align 2
; CHECK-NEXT:    store i16 [[TMP1]], ptr [[DST]], align 2
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB3_I61]]:
; CHECK-NEXT:    [[TMP2:%.*]] = load i16, ptr [[SRC]], align 2
; CHECK-NEXT:    store i16 [[TMP2]], ptr [[DST]], align 2
; CHECK-NEXT:    [[SRC_GEP_I83_I62:%.*]] = getelementptr i8, ptr [[SRC]], i32 2
; CHECK-NEXT:    [[DST_GEP_I84_I63:%.*]] = getelementptr i8, ptr [[DST]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[SRC_GEP_I83_I62]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[DST_GEP_I84_I63]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB4_I60]]:
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[DST]], align 4
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB5_I57]]:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP5]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I87_I58:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I88_I59:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[SRC_GEP_I87_I58]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[DST_GEP_I88_I59]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB6_I54]]:
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP7]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1611_I55:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I1612_I56:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP8:%.*]] = load i16, ptr [[SRC_GEP_I1611_I55]], align 2
; CHECK-NEXT:    store i16 [[TMP8]], ptr [[DST_GEP_I1612_I56]], align 2
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB7_I49]]:
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP9]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1615_I50:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I1616_I51:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP10:%.*]] = load i16, ptr [[SRC_GEP_I1615_I50]], align 2
; CHECK-NEXT:    store i16 [[TMP10]], ptr [[DST_GEP_I1616_I51]], align 2
; CHECK-NEXT:    [[SRC_GEP_I817_I52:%.*]] = getelementptr i8, ptr [[SRC]], i32 6
; CHECK-NEXT:    [[DST_GEP_I818_I53:%.*]] = getelementptr i8, ptr [[DST]], i32 6
; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr [[SRC_GEP_I817_I52]], align 1
; CHECK-NEXT:    store i8 [[TMP11]], ptr [[DST_GEP_I818_I53]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB8_I46]]:
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP12]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3221_I47:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3222_I48:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP13:%.*]] = load i32, ptr [[SRC_GEP_I3221_I47]], align 4
; CHECK-NEXT:    store i32 [[TMP13]], ptr [[DST_GEP_I3222_I48]], align 4
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB9_I41]]:
; CHECK-NEXT:    [[TMP14:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP14]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3225_I42:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3226_I43:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP15:%.*]] = load i32, ptr [[SRC_GEP_I3225_I42]], align 4
; CHECK-NEXT:    store i32 [[TMP15]], ptr [[DST_GEP_I3226_I43]], align 4
; CHECK-NEXT:    [[SRC_GEP_I827_I44:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I828_I45:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP16:%.*]] = load i8, ptr [[SRC_GEP_I827_I44]], align 1
; CHECK-NEXT:    store i8 [[TMP16]], ptr [[DST_GEP_I828_I45]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB10_I36]]:
; CHECK-NEXT:    [[TMP17:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP17]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3231_I37:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3232_I38:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP18:%.*]] = load i32, ptr [[SRC_GEP_I3231_I37]], align 4
; CHECK-NEXT:    store i32 [[TMP18]], ptr [[DST_GEP_I3232_I38]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1633_I39:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I1634_I40:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP19:%.*]] = load i16, ptr [[SRC_GEP_I1633_I39]], align 2
; CHECK-NEXT:    store i16 [[TMP19]], ptr [[DST_GEP_I1634_I40]], align 2
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB11_I29]]:
; CHECK-NEXT:    [[TMP20:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP20]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3237_I30:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3238_I31:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP21:%.*]] = load i32, ptr [[SRC_GEP_I3237_I30]], align 4
; CHECK-NEXT:    store i32 [[TMP21]], ptr [[DST_GEP_I3238_I31]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1639_I32:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I1640_I33:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP22:%.*]] = load i16, ptr [[SRC_GEP_I1639_I32]], align 2
; CHECK-NEXT:    store i16 [[TMP22]], ptr [[DST_GEP_I1640_I33]], align 2
; CHECK-NEXT:    [[SRC_GEP_I841_I34:%.*]] = getelementptr i8, ptr [[SRC]], i32 10
; CHECK-NEXT:    [[DST_GEP_I842_I35:%.*]] = getelementptr i8, ptr [[DST]], i32 10
; CHECK-NEXT:    [[TMP23:%.*]] = load i8, ptr [[SRC_GEP_I841_I34]], align 1
; CHECK-NEXT:    store i8 [[TMP23]], ptr [[DST_GEP_I842_I35]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB12_I24]]:
; CHECK-NEXT:    [[TMP24:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP24]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3245_I25:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3246_I26:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, ptr [[SRC_GEP_I3245_I25]], align 4
; CHECK-NEXT:    store i32 [[TMP25]], ptr [[DST_GEP_I3246_I26]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3247_I27:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3248_I28:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, ptr [[SRC_GEP_I3247_I27]], align 4
; CHECK-NEXT:    store i32 [[TMP26]], ptr [[DST_GEP_I3248_I28]], align 4
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB13_I17]]:
; CHECK-NEXT:    [[TMP27:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP27]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3251_I18:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3252_I19:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP28:%.*]] = load i32, ptr [[SRC_GEP_I3251_I18]], align 4
; CHECK-NEXT:    store i32 [[TMP28]], ptr [[DST_GEP_I3252_I19]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3253_I20:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3254_I21:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, ptr [[SRC_GEP_I3253_I20]], align 4
; CHECK-NEXT:    store i32 [[TMP29]], ptr [[DST_GEP_I3254_I21]], align 4
; CHECK-NEXT:    [[SRC_GEP_I855_I22:%.*]] = getelementptr i8, ptr [[SRC]], i32 12
; CHECK-NEXT:    [[DST_GEP_I856_I23:%.*]] = getelementptr i8, ptr [[DST]], i32 12
; CHECK-NEXT:    [[TMP30:%.*]] = load i8, ptr [[SRC_GEP_I855_I22]], align 1
; CHECK-NEXT:    store i8 [[TMP30]], ptr [[DST_GEP_I856_I23]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB14_I10]]:
; CHECK-NEXT:    [[TMP31:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP31]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3259_I11:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3260_I12:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP32:%.*]] = load i32, ptr [[SRC_GEP_I3259_I11]], align 4
; CHECK-NEXT:    store i32 [[TMP32]], ptr [[DST_GEP_I3260_I12]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3261_I13:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3262_I14:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP33:%.*]] = load i32, ptr [[SRC_GEP_I3261_I13]], align 4
; CHECK-NEXT:    store i32 [[TMP33]], ptr [[DST_GEP_I3262_I14]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1663_I15:%.*]] = getelementptr i8, ptr [[SRC]], i32 12
; CHECK-NEXT:    [[DST_GEP_I1664_I16:%.*]] = getelementptr i8, ptr [[DST]], i32 12
; CHECK-NEXT:    [[TMP34:%.*]] = load i16, ptr [[SRC_GEP_I1663_I15]], align 2
; CHECK-NEXT:    store i16 [[TMP34]], ptr [[DST_GEP_I1664_I16]], align 2
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB15_I1]]:
; CHECK-NEXT:    [[TMP35:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP35]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3267_I2:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3268_I3:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP36:%.*]] = load i32, ptr [[SRC_GEP_I3267_I2]], align 4
; CHECK-NEXT:    store i32 [[TMP36]], ptr [[DST_GEP_I3268_I3]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3269_I4:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3270_I5:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP37:%.*]] = load i32, ptr [[SRC_GEP_I3269_I4]], align 4
; CHECK-NEXT:    store i32 [[TMP37]], ptr [[DST_GEP_I3270_I5]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1671_I6:%.*]] = getelementptr i8, ptr [[SRC]], i32 12
; CHECK-NEXT:    [[DST_GEP_I1672_I7:%.*]] = getelementptr i8, ptr [[DST]], i32 12
; CHECK-NEXT:    [[TMP38:%.*]] = load i16, ptr [[SRC_GEP_I1671_I6]], align 2
; CHECK-NEXT:    store i16 [[TMP38]], ptr [[DST_GEP_I1672_I7]], align 2
; CHECK-NEXT:    [[SRC_GEP_I873_I8:%.*]] = getelementptr i8, ptr [[SRC]], i32 14
; CHECK-NEXT:    [[DST_GEP_I874_I9:%.*]] = getelementptr i8, ptr [[DST]], i32 14
; CHECK-NEXT:    [[TMP39:%.*]] = load i8, ptr [[SRC_GEP_I873_I8]], align 1
; CHECK-NEXT:    store i8 [[TMP39]], ptr [[DST_GEP_I874_I9]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[IF_END]]:
; CHECK-NEXT:    switch i32 [[DST_ALIGN]], label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT:.*]] [
; CHECK-NEXT:      i32 15, label %[[SW_BB1_I:.*]]
; CHECK-NEXT:      i32 14, label %[[SW_BB2_I:.*]]
; CHECK-NEXT:      i32 13, label %[[SW_BB3_I:.*]]
; CHECK-NEXT:      i32 12, label %[[SW_BB4_I:.*]]
; CHECK-NEXT:      i32 11, label %[[SW_BB5_I:.*]]
; CHECK-NEXT:      i32 10, label %[[SW_BB6_I:.*]]
; CHECK-NEXT:      i32 9, label %[[SW_BB7_I:.*]]
; CHECK-NEXT:      i32 8, label %[[SW_BB8_I:.*]]
; CHECK-NEXT:      i32 7, label %[[SW_BB9_I:.*]]
; CHECK-NEXT:      i32 6, label %[[SW_BB10_I:.*]]
; CHECK-NEXT:      i32 5, label %[[SW_BB11_I:.*]]
; CHECK-NEXT:      i32 4, label %[[SW_BB12_I:.*]]
; CHECK-NEXT:      i32 3, label %[[SW_BB13_I:.*]]
; CHECK-NEXT:      i32 2, label %[[SW_BB14_I:.*]]
; CHECK-NEXT:      i32 1, label %[[SW_BB15_I:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[SW_BB1_I]]:
; CHECK-NEXT:    [[TMP40:%.*]] = load i8, ptr [[SRC]], align 1
; CHECK-NEXT:    store i8 [[TMP40]], ptr [[DST]], align 1
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB2_I]]:
; CHECK-NEXT:    [[TMP41:%.*]] = load i16, ptr [[SRC]], align 2
; CHECK-NEXT:    store i16 [[TMP41]], ptr [[DST]], align 2
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB3_I]]:
; CHECK-NEXT:    [[TMP42:%.*]] = load i16, ptr [[SRC]], align 2
; CHECK-NEXT:    store i16 [[TMP42]], ptr [[DST]], align 2
; CHECK-NEXT:    [[SRC_GEP_I83_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 2
; CHECK-NEXT:    [[DST_GEP_I84_I:%.*]] = getelementptr i8, ptr [[DST]], i32 2
; CHECK-NEXT:    [[TMP43:%.*]] = load i8, ptr [[SRC_GEP_I83_I]], align 1
; CHECK-NEXT:    store i8 [[TMP43]], ptr [[DST_GEP_I84_I]], align 1
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB4_I]]:
; CHECK-NEXT:    [[TMP44:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP44]], ptr [[DST]], align 4
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB5_I]]:
; CHECK-NEXT:    [[TMP45:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP45]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I87_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I88_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP46:%.*]] = load i8, ptr [[SRC_GEP_I87_I]], align 1
; CHECK-NEXT:    store i8 [[TMP46]], ptr [[DST_GEP_I88_I]], align 1
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB6_I]]:
; CHECK-NEXT:    [[TMP47:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP47]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1611_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I1612_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP48:%.*]] = load i16, ptr [[SRC_GEP_I1611_I]], align 2
; CHECK-NEXT:    store i16 [[TMP48]], ptr [[DST_GEP_I1612_I]], align 2
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB7_I]]:
; CHECK-NEXT:    [[TMP49:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP49]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1615_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I1616_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP50:%.*]] = load i16, ptr [[SRC_GEP_I1615_I]], align 2
; CHECK-NEXT:    store i16 [[TMP50]], ptr [[DST_GEP_I1616_I]], align 2
; CHECK-NEXT:    [[SRC_GEP_I817_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 6
; CHECK-NEXT:    [[DST_GEP_I818_I:%.*]] = getelementptr i8, ptr [[DST]], i32 6
; CHECK-NEXT:    [[TMP51:%.*]] = load i8, ptr [[SRC_GEP_I817_I]], align 1
; CHECK-NEXT:    store i8 [[TMP51]], ptr [[DST_GEP_I818_I]], align 1
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB8_I]]:
; CHECK-NEXT:    [[TMP52:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP52]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3221_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3222_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP53:%.*]] = load i32, ptr [[SRC_GEP_I3221_I]], align 4
; CHECK-NEXT:    store i32 [[TMP53]], ptr [[DST_GEP_I3222_I]], align 4
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB9_I]]:
; CHECK-NEXT:    [[TMP54:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP54]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3225_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3226_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP55:%.*]] = load i32, ptr [[SRC_GEP_I3225_I]], align 4
; CHECK-NEXT:    store i32 [[TMP55]], ptr [[DST_GEP_I3226_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I827_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I828_I:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP56:%.*]] = load i8, ptr [[SRC_GEP_I827_I]], align 1
; CHECK-NEXT:    store i8 [[TMP56]], ptr [[DST_GEP_I828_I]], align 1
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB10_I]]:
; CHECK-NEXT:    [[TMP57:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP57]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3231_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3232_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP58:%.*]] = load i32, ptr [[SRC_GEP_I3231_I]], align 4
; CHECK-NEXT:    store i32 [[TMP58]], ptr [[DST_GEP_I3232_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1633_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I1634_I:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP59:%.*]] = load i16, ptr [[SRC_GEP_I1633_I]], align 2
; CHECK-NEXT:    store i16 [[TMP59]], ptr [[DST_GEP_I1634_I]], align 2
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB11_I]]:
; CHECK-NEXT:    [[TMP60:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP60]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3237_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3238_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP61:%.*]] = load i32, ptr [[SRC_GEP_I3237_I]], align 4
; CHECK-NEXT:    store i32 [[TMP61]], ptr [[DST_GEP_I3238_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1639_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I1640_I:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP62:%.*]] = load i16, ptr [[SRC_GEP_I1639_I]], align 2
; CHECK-NEXT:    store i16 [[TMP62]], ptr [[DST_GEP_I1640_I]], align 2
; CHECK-NEXT:    [[SRC_GEP_I841_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 10
; CHECK-NEXT:    [[DST_GEP_I842_I:%.*]] = getelementptr i8, ptr [[DST]], i32 10
; CHECK-NEXT:    [[TMP63:%.*]] = load i8, ptr [[SRC_GEP_I841_I]], align 1
; CHECK-NEXT:    store i8 [[TMP63]], ptr [[DST_GEP_I842_I]], align 1
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB12_I]]:
; CHECK-NEXT:    [[TMP64:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP64]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3245_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3246_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP65:%.*]] = load i32, ptr [[SRC_GEP_I3245_I]], align 4
; CHECK-NEXT:    store i32 [[TMP65]], ptr [[DST_GEP_I3246_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3247_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3248_I:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP66:%.*]] = load i32, ptr [[SRC_GEP_I3247_I]], align 4
; CHECK-NEXT:    store i32 [[TMP66]], ptr [[DST_GEP_I3248_I]], align 4
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB13_I]]:
; CHECK-NEXT:    [[TMP67:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP67]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3251_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3252_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP68:%.*]] = load i32, ptr [[SRC_GEP_I3251_I]], align 4
; CHECK-NEXT:    store i32 [[TMP68]], ptr [[DST_GEP_I3252_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3253_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3254_I:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP69:%.*]] = load i32, ptr [[SRC_GEP_I3253_I]], align 4
; CHECK-NEXT:    store i32 [[TMP69]], ptr [[DST_GEP_I3254_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I855_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 12
; CHECK-NEXT:    [[DST_GEP_I856_I:%.*]] = getelementptr i8, ptr [[DST]], i32 12
; CHECK-NEXT:    [[TMP70:%.*]] = load i8, ptr [[SRC_GEP_I855_I]], align 1
; CHECK-NEXT:    store i8 [[TMP70]], ptr [[DST_GEP_I856_I]], align 1
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB14_I]]:
; CHECK-NEXT:    [[TMP71:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP71]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3259_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3260_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP72:%.*]] = load i32, ptr [[SRC_GEP_I3259_I]], align 4
; CHECK-NEXT:    store i32 [[TMP72]], ptr [[DST_GEP_I3260_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3261_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3262_I:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP73:%.*]] = load i32, ptr [[SRC_GEP_I3261_I]], align 4
; CHECK-NEXT:    store i32 [[TMP73]], ptr [[DST_GEP_I3262_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1663_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 12
; CHECK-NEXT:    [[DST_GEP_I1664_I:%.*]] = getelementptr i8, ptr [[DST]], i32 12
; CHECK-NEXT:    [[TMP74:%.*]] = load i16, ptr [[SRC_GEP_I1663_I]], align 2
; CHECK-NEXT:    store i16 [[TMP74]], ptr [[DST_GEP_I1664_I]], align 2
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[SW_BB15_I]]:
; CHECK-NEXT:    [[TMP75:%.*]] = load i32, ptr [[SRC]], align 4
; CHECK-NEXT:    store i32 [[TMP75]], ptr [[DST]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3267_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3268_I:%.*]] = getelementptr i8, ptr [[DST]], i32 4
; CHECK-NEXT:    [[TMP76:%.*]] = load i32, ptr [[SRC_GEP_I3267_I]], align 4
; CHECK-NEXT:    store i32 [[TMP76]], ptr [[DST_GEP_I3268_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3269_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3270_I:%.*]] = getelementptr i8, ptr [[DST]], i32 8
; CHECK-NEXT:    [[TMP77:%.*]] = load i32, ptr [[SRC_GEP_I3269_I]], align 4
; CHECK-NEXT:    store i32 [[TMP77]], ptr [[DST_GEP_I3270_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1671_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 12
; CHECK-NEXT:    [[DST_GEP_I1672_I:%.*]] = getelementptr i8, ptr [[DST]], i32 12
; CHECK-NEXT:    [[TMP78:%.*]] = load i16, ptr [[SRC_GEP_I1671_I]], align 2
; CHECK-NEXT:    store i16 [[TMP78]], ptr [[DST_GEP_I1672_I]], align 2
; CHECK-NEXT:    [[SRC_GEP_I873_I:%.*]] = getelementptr i8, ptr [[SRC]], i32 14
; CHECK-NEXT:    [[DST_GEP_I874_I:%.*]] = getelementptr i8, ptr [[DST]], i32 14
; CHECK-NEXT:    [[TMP79:%.*]] = load i8, ptr [[SRC_GEP_I873_I]], align 1
; CHECK-NEXT:    store i8 [[TMP79]], ptr [[DST_GEP_I874_I]], align 1
; CHECK-NEXT:    br label %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]
; CHECK:       [[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]]:
; CHECK-NEXT:    [[SUB2:%.*]] = sub i32 [[SIZE]], [[SUB]]
; CHECK-NEXT:    [[ADD_PTR1:%.*]] = getelementptr i8, ptr [[DST]], i32 [[SUB]]
; CHECK-NEXT:    [[ADD_PTR:%.*]] = getelementptr i8, ptr [[SRC]], i32 [[SUB]]
; CHECK-NEXT:    [[TMP80:%.*]] = ptrtoint ptr [[ADD_PTR]] to i32
; CHECK-NEXT:    [[TMP81:%.*]] = ptrtoint ptr [[ADD_PTR1]] to i32
; CHECK-NEXT:    [[CMP_I:%.*]] = icmp ult i32 [[SUB2]], 16
; CHECK-NEXT:    br i1 [[CMP_I]], label %[[CLEANUP_OUT_I:.*]], label %[[IF_END_I:.*]]
; CHECK:       [[IF_END_I]]:
; CHECK-NEXT:    [[DIV_I:%.*]] = udiv i32 [[SUB2]], 48
; CHECK-NEXT:    [[DOTNEG:%.*]] = mul i32 [[DIV_I]], -48
; CHECK-NEXT:    [[REM_DECOMPOSED_I:%.*]] = add i32 [[DOTNEG]], [[SUB2]]
; CHECK-NEXT:    [[LD128USARIP_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[TMP80]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1_I:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP_I]], i32 16, i32 1)
; CHECK-NEXT:    [[CMP21_NOT_I:%.*]] = icmp ult i32 [[SUB2]], 48
; CHECK-NEXT:    br i1 [[CMP21_NOT_I]], label %[[FOR_COND_CLEANUP_I:.*]], label %[[FOR_BODY_I:.*]]
; CHECK:       [[FOR_COND_CLEANUP_I]]:
; CHECK-NEXT:    [[SRC_PTR_AFTERLOOP_I:%.*]] = phi i32 [ [[LD128USARIP1_I]], %[[IF_END_I]] ], [ [[SRCQLDIP4_FINAL_I:%.*]], %[[FOR_BODY_I]] ]
; CHECK-NEXT:    [[DST_PTR_AFTERLOOP_I:%.*]] = phi i32 [ [[TMP81]], %[[IF_END_I]] ], [ [[VST128IP5_FINAL_I:%.*]], %[[FOR_BODY_I]] ]
; CHECK-NEXT:    [[TOBOOL_NOT_I:%.*]] = icmp ult i32 [[REM_DECOMPOSED_I]], 32
; CHECK-NEXT:    br i1 [[TOBOOL_NOT_I]], label %[[IF_END3_I:.*]], label %[[IF_THEN2_I:.*]]
; CHECK:       [[FOR_BODY_I]]:
; CHECK-NEXT:    [[I_022_I:%.*]] = phi i32 [ 0, %[[IF_END_I]] ], [ [[INC_I:%.*]], %[[FOR_BODY_I]] ]
; CHECK-NEXT:    [[SRC_PTR_PHI_I:%.*]] = phi i32 [ [[LD128USARIP1_I]], %[[IF_END_I]] ], [ [[SRCQLDIP4_FINAL_I]], %[[FOR_BODY_I]] ]
; CHECK-NEXT:    [[DST_PTR_PHI_I:%.*]] = phi i32 [ [[TMP81]], %[[IF_END_I]] ], [ [[VST128IP5_FINAL_I]], %[[FOR_BODY_I]] ]
; CHECK-NEXT:    [[SRCQLDIP_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_PHI_I]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_PHI_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP_I]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP_I]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4_FINAL_I]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2_I]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5_FINAL_I]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3_I]], i32 16)
; CHECK-NEXT:    [[INC_I]] = add nuw nsw i32 [[I_022_I]], 1
; CHECK-NEXT:    [[EXITCOND_NOT_I:%.*]] = icmp eq i32 [[INC_I]], [[DIV_I]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT_I]], label %[[FOR_COND_CLEANUP_I]], label %[[FOR_BODY_I]]
; CHECK:       [[IF_THEN2_I]]:
; CHECK-NEXT:    [[SRCQLDIP6_I:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_AFTERLOOP_I]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_AFTERLOOP_I]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7_I]], i32 16)
; CHECK-NEXT:    [[SUB1_I:%.*]] = add nsw i32 [[REM_DECOMPOSED_I]], -32
; CHECK-NEXT:    br label %[[CLEANUP_OUT_I]]
; CHECK:       [[IF_END3_I]]:
; CHECK-NEXT:    [[TOBOOL5_NOT_I:%.*]] = icmp ult i32 [[REM_DECOMPOSED_I]], 16
; CHECK-NEXT:    br i1 [[TOBOOL5_NOT_I]], label %[[IF_END7_I:.*]], label %[[IF_THEN6_I:.*]]
; CHECK:       [[IF_THEN6_I]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP9_I:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_AFTERLOOP_I]], i32 16)
; CHECK-NEXT:    [[SUB_SRC_I:%.*]] = add i32 [[SRC_PTR_AFTERLOOP_I]], -16
; CHECK-NEXT:    [[SUB9_I:%.*]] = add nsw i32 [[REM_DECOMPOSED_I]], -16
; CHECK-NEXT:    br label %[[CLEANUP_OUT_I]]
; CHECK:       [[IF_END7_I]]:
; CHECK-NEXT:    [[SRC_END7_I:%.*]] = add i32 [[SRC_PTR_AFTERLOOP_I]], -32
; CHECK-NEXT:    br label %[[CLEANUP_OUT_I]]
; CHECK:       [[CLEANUP_OUT_I]]:
; CHECK-NEXT:    [[SRC_FINAL_I:%.*]] = phi i32 [ [[SRCQLDIP6_I]], %[[IF_THEN2_I]] ], [ [[SUB_SRC_I]], %[[IF_THEN6_I]] ], [ [[TMP80]], %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]] ], [ [[SRC_END7_I]], %[[IF_END7_I]] ]
; CHECK-NEXT:    [[DST_FINAL_I:%.*]] = phi i32 [ [[VST128IP8_I]], %[[IF_THEN2_I]] ], [ [[VST128IP9_I]], %[[IF_THEN6_I]] ], [ [[TMP81]], %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]] ], [ [[DST_PTR_AFTERLOOP_I]], %[[IF_END7_I]] ]
; CHECK-NEXT:    [[REM_FINAL_I:%.*]] = phi i32 [ [[SUB1_I]], %[[IF_THEN2_I]] ], [ [[SUB9_I]], %[[IF_THEN6_I]] ], [ [[SUB2]], %[[ESP32P4MEMCPYSRCUNALIGNDSTUNALIGNFROM1TO15OPT_EXIT]] ], [ [[REM_DECOMPOSED_I]], %[[IF_END7_I]] ]
; CHECK-NEXT:    [[CMP_FINAL_I:%.*]] = icmp eq i32 [[REM_FINAL_I]], 0
; CHECK-NEXT:    br i1 [[CMP_FINAL_I]], label %[[CLEANUP]], label %[[CALL_CLEANUP_I:.*]]
; CHECK:       [[CALL_CLEANUP_I]]:
; CHECK-NEXT:    [[DST_PTR_FINAL_I:%.*]] = inttoptr i32 [[DST_FINAL_I]] to ptr
; CHECK-NEXT:    [[SRC_PTR_FINAL_I:%.*]] = inttoptr i32 [[SRC_FINAL_I]] to ptr
; CHECK-NEXT:    switch i32 [[REM_FINAL_I]], label %[[CLEANUP]] [
; CHECK-NEXT:      i32 1, label %[[SW_BB1_I131:.*]]
; CHECK-NEXT:      i32 2, label %[[SW_BB2_I130:.*]]
; CHECK-NEXT:      i32 3, label %[[SW_BB3_I127:.*]]
; CHECK-NEXT:      i32 4, label %[[SW_BB4_I126:.*]]
; CHECK-NEXT:      i32 5, label %[[SW_BB5_I123:.*]]
; CHECK-NEXT:      i32 6, label %[[SW_BB6_I120:.*]]
; CHECK-NEXT:      i32 7, label %[[SW_BB7_I115:.*]]
; CHECK-NEXT:      i32 8, label %[[SW_BB8_I112:.*]]
; CHECK-NEXT:      i32 9, label %[[SW_BB9_I107:.*]]
; CHECK-NEXT:      i32 10, label %[[SW_BB10_I102:.*]]
; CHECK-NEXT:      i32 11, label %[[SW_BB11_I95:.*]]
; CHECK-NEXT:      i32 12, label %[[SW_BB12_I90:.*]]
; CHECK-NEXT:      i32 13, label %[[SW_BB13_I83:.*]]
; CHECK-NEXT:      i32 14, label %[[SW_BB14_I76:.*]]
; CHECK-NEXT:      i32 15, label %[[SW_BB15_I67:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[SW_BB1_I131]]:
; CHECK-NEXT:    [[TMP82:%.*]] = load i8, ptr [[SRC_PTR_FINAL_I]], align 1
; CHECK-NEXT:    store i8 [[TMP82]], ptr [[DST_PTR_FINAL_I]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB2_I130]]:
; CHECK-NEXT:    [[TMP83:%.*]] = load i16, ptr [[SRC_PTR_FINAL_I]], align 2
; CHECK-NEXT:    store i16 [[TMP83]], ptr [[DST_PTR_FINAL_I]], align 2
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB3_I127]]:
; CHECK-NEXT:    [[TMP84:%.*]] = load i16, ptr [[SRC_PTR_FINAL_I]], align 2
; CHECK-NEXT:    store i16 [[TMP84]], ptr [[DST_PTR_FINAL_I]], align 2
; CHECK-NEXT:    [[SRC_GEP_I83_I128:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 2
; CHECK-NEXT:    [[DST_GEP_I84_I129:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 2
; CHECK-NEXT:    [[TMP85:%.*]] = load i8, ptr [[SRC_GEP_I83_I128]], align 1
; CHECK-NEXT:    store i8 [[TMP85]], ptr [[DST_GEP_I84_I129]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB4_I126]]:
; CHECK-NEXT:    [[TMP86:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP86]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB5_I123]]:
; CHECK-NEXT:    [[TMP87:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP87]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I87_I124:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I88_I125:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP88:%.*]] = load i8, ptr [[SRC_GEP_I87_I124]], align 1
; CHECK-NEXT:    store i8 [[TMP88]], ptr [[DST_GEP_I88_I125]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB6_I120]]:
; CHECK-NEXT:    [[TMP89:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP89]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1611_I121:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I1612_I122:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP90:%.*]] = load i16, ptr [[SRC_GEP_I1611_I121]], align 2
; CHECK-NEXT:    store i16 [[TMP90]], ptr [[DST_GEP_I1612_I122]], align 2
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB7_I115]]:
; CHECK-NEXT:    [[TMP91:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP91]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1615_I116:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I1616_I117:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP92:%.*]] = load i16, ptr [[SRC_GEP_I1615_I116]], align 2
; CHECK-NEXT:    store i16 [[TMP92]], ptr [[DST_GEP_I1616_I117]], align 2
; CHECK-NEXT:    [[SRC_GEP_I817_I118:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 6
; CHECK-NEXT:    [[DST_GEP_I818_I119:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 6
; CHECK-NEXT:    [[TMP93:%.*]] = load i8, ptr [[SRC_GEP_I817_I118]], align 1
; CHECK-NEXT:    store i8 [[TMP93]], ptr [[DST_GEP_I818_I119]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB8_I112]]:
; CHECK-NEXT:    [[TMP94:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP94]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3221_I113:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3222_I114:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP95:%.*]] = load i32, ptr [[SRC_GEP_I3221_I113]], align 4
; CHECK-NEXT:    store i32 [[TMP95]], ptr [[DST_GEP_I3222_I114]], align 4
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB9_I107]]:
; CHECK-NEXT:    [[TMP96:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP96]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3225_I108:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3226_I109:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP97:%.*]] = load i32, ptr [[SRC_GEP_I3225_I108]], align 4
; CHECK-NEXT:    store i32 [[TMP97]], ptr [[DST_GEP_I3226_I109]], align 4
; CHECK-NEXT:    [[SRC_GEP_I827_I110:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[DST_GEP_I828_I111:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[TMP98:%.*]] = load i8, ptr [[SRC_GEP_I827_I110]], align 1
; CHECK-NEXT:    store i8 [[TMP98]], ptr [[DST_GEP_I828_I111]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB10_I102]]:
; CHECK-NEXT:    [[TMP99:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP99]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3231_I103:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3232_I104:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP100:%.*]] = load i32, ptr [[SRC_GEP_I3231_I103]], align 4
; CHECK-NEXT:    store i32 [[TMP100]], ptr [[DST_GEP_I3232_I104]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1633_I105:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[DST_GEP_I1634_I106:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[TMP101:%.*]] = load i16, ptr [[SRC_GEP_I1633_I105]], align 2
; CHECK-NEXT:    store i16 [[TMP101]], ptr [[DST_GEP_I1634_I106]], align 2
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB11_I95]]:
; CHECK-NEXT:    [[TMP102:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP102]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3237_I96:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3238_I97:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP103:%.*]] = load i32, ptr [[SRC_GEP_I3237_I96]], align 4
; CHECK-NEXT:    store i32 [[TMP103]], ptr [[DST_GEP_I3238_I97]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1639_I98:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[DST_GEP_I1640_I99:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[TMP104:%.*]] = load i16, ptr [[SRC_GEP_I1639_I98]], align 2
; CHECK-NEXT:    store i16 [[TMP104]], ptr [[DST_GEP_I1640_I99]], align 2
; CHECK-NEXT:    [[SRC_GEP_I841_I100:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 10
; CHECK-NEXT:    [[DST_GEP_I842_I101:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 10
; CHECK-NEXT:    [[TMP105:%.*]] = load i8, ptr [[SRC_GEP_I841_I100]], align 1
; CHECK-NEXT:    store i8 [[TMP105]], ptr [[DST_GEP_I842_I101]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB12_I90]]:
; CHECK-NEXT:    [[TMP106:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP106]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3245_I91:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3246_I92:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP107:%.*]] = load i32, ptr [[SRC_GEP_I3245_I91]], align 4
; CHECK-NEXT:    store i32 [[TMP107]], ptr [[DST_GEP_I3246_I92]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3247_I93:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3248_I94:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[TMP108:%.*]] = load i32, ptr [[SRC_GEP_I3247_I93]], align 4
; CHECK-NEXT:    store i32 [[TMP108]], ptr [[DST_GEP_I3248_I94]], align 4
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB13_I83]]:
; CHECK-NEXT:    [[TMP109:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP109]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3251_I84:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3252_I85:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP110:%.*]] = load i32, ptr [[SRC_GEP_I3251_I84]], align 4
; CHECK-NEXT:    store i32 [[TMP110]], ptr [[DST_GEP_I3252_I85]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3253_I86:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3254_I87:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[TMP111:%.*]] = load i32, ptr [[SRC_GEP_I3253_I86]], align 4
; CHECK-NEXT:    store i32 [[TMP111]], ptr [[DST_GEP_I3254_I87]], align 4
; CHECK-NEXT:    [[SRC_GEP_I855_I88:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[DST_GEP_I856_I89:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[TMP112:%.*]] = load i8, ptr [[SRC_GEP_I855_I88]], align 1
; CHECK-NEXT:    store i8 [[TMP112]], ptr [[DST_GEP_I856_I89]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB14_I76]]:
; CHECK-NEXT:    [[TMP113:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP113]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3259_I77:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3260_I78:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP114:%.*]] = load i32, ptr [[SRC_GEP_I3259_I77]], align 4
; CHECK-NEXT:    store i32 [[TMP114]], ptr [[DST_GEP_I3260_I78]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3261_I79:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3262_I80:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[TMP115:%.*]] = load i32, ptr [[SRC_GEP_I3261_I79]], align 4
; CHECK-NEXT:    store i32 [[TMP115]], ptr [[DST_GEP_I3262_I80]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1663_I81:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[DST_GEP_I1664_I82:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[TMP116:%.*]] = load i16, ptr [[SRC_GEP_I1663_I81]], align 2
; CHECK-NEXT:    store i16 [[TMP116]], ptr [[DST_GEP_I1664_I82]], align 2
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[SW_BB15_I67]]:
; CHECK-NEXT:    [[TMP117:%.*]] = load i32, ptr [[SRC_PTR_FINAL_I]], align 4
; CHECK-NEXT:    store i32 [[TMP117]], ptr [[DST_PTR_FINAL_I]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3267_I68:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[DST_GEP_I3268_I69:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 4
; CHECK-NEXT:    [[TMP118:%.*]] = load i32, ptr [[SRC_GEP_I3267_I68]], align 4
; CHECK-NEXT:    store i32 [[TMP118]], ptr [[DST_GEP_I3268_I69]], align 4
; CHECK-NEXT:    [[SRC_GEP_I3269_I70:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[DST_GEP_I3270_I71:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 8
; CHECK-NEXT:    [[TMP119:%.*]] = load i32, ptr [[SRC_GEP_I3269_I70]], align 4
; CHECK-NEXT:    store i32 [[TMP119]], ptr [[DST_GEP_I3270_I71]], align 4
; CHECK-NEXT:    [[SRC_GEP_I1671_I72:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[DST_GEP_I1672_I73:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 12
; CHECK-NEXT:    [[TMP120:%.*]] = load i16, ptr [[SRC_GEP_I1671_I72]], align 2
; CHECK-NEXT:    store i16 [[TMP120]], ptr [[DST_GEP_I1672_I73]], align 2
; CHECK-NEXT:    [[SRC_GEP_I873_I74:%.*]] = getelementptr i8, ptr [[SRC_PTR_FINAL_I]], i32 14
; CHECK-NEXT:    [[DST_GEP_I874_I75:%.*]] = getelementptr i8, ptr [[DST_PTR_FINAL_I]], i32 14
; CHECK-NEXT:    [[TMP121:%.*]] = load i8, ptr [[SRC_GEP_I873_I74]], align 1
; CHECK-NEXT:    store i8 [[TMP121]], ptr [[DST_GEP_I874_I75]], align 1
; CHECK-NEXT:    br label %[[CLEANUP]]
; CHECK:       [[CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %sub = sub i32 16, %dst_align
  %cmp.not = icmp ult i32 %sub, %size
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  switch i32 %size, label %cleanup [
  i32 1, label %sw.bb1.i65
  i32 2, label %sw.bb2.i64
  i32 3, label %sw.bb3.i61
  i32 4, label %sw.bb4.i60
  i32 5, label %sw.bb5.i57
  i32 6, label %sw.bb6.i54
  i32 7, label %sw.bb7.i49
  i32 8, label %sw.bb8.i46
  i32 9, label %sw.bb9.i41
  i32 10, label %sw.bb10.i36
  i32 11, label %sw.bb11.i29
  i32 12, label %sw.bb12.i24
  i32 13, label %sw.bb13.i17
  i32 14, label %sw.bb14.i10
  i32 15, label %sw.bb15.i1
  ]

sw.bb1.i65:                                       ; preds = %if.then
  %0 = load i8, ptr %src, align 1
  store i8 %0, ptr %dst, align 1
  br label %cleanup

sw.bb2.i64:                                       ; preds = %if.then
  %1 = load i16, ptr %src, align 2
  store i16 %1, ptr %dst, align 2
  br label %cleanup

sw.bb3.i61:                                       ; preds = %if.then
  %2 = load i16, ptr %src, align 2
  store i16 %2, ptr %dst, align 2
  %src.gep.i83.i62 = getelementptr i8, ptr %src, i32 2
  %dst.gep.i84.i63 = getelementptr i8, ptr %dst, i32 2
  %3 = load i8, ptr %src.gep.i83.i62, align 1
  store i8 %3, ptr %dst.gep.i84.i63, align 1
  br label %cleanup

sw.bb4.i60:                                       ; preds = %if.then
  %4 = load i32, ptr %src, align 4
  store i32 %4, ptr %dst, align 4
  br label %cleanup

sw.bb5.i57:                                       ; preds = %if.then
  %5 = load i32, ptr %src, align 4
  store i32 %5, ptr %dst, align 4
  %src.gep.i87.i58 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i88.i59 = getelementptr i8, ptr %dst, i32 4
  %6 = load i8, ptr %src.gep.i87.i58, align 1
  store i8 %6, ptr %dst.gep.i88.i59, align 1
  br label %cleanup

sw.bb6.i54:                                       ; preds = %if.then
  %7 = load i32, ptr %src, align 4
  store i32 %7, ptr %dst, align 4
  %src.gep.i1611.i55 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i1612.i56 = getelementptr i8, ptr %dst, i32 4
  %8 = load i16, ptr %src.gep.i1611.i55, align 2
  store i16 %8, ptr %dst.gep.i1612.i56, align 2
  br label %cleanup

sw.bb7.i49:                                       ; preds = %if.then
  %9 = load i32, ptr %src, align 4
  store i32 %9, ptr %dst, align 4
  %src.gep.i1615.i50 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i1616.i51 = getelementptr i8, ptr %dst, i32 4
  %10 = load i16, ptr %src.gep.i1615.i50, align 2
  store i16 %10, ptr %dst.gep.i1616.i51, align 2
  %src.gep.i817.i52 = getelementptr i8, ptr %src, i32 6
  %dst.gep.i818.i53 = getelementptr i8, ptr %dst, i32 6
  %11 = load i8, ptr %src.gep.i817.i52, align 1
  store i8 %11, ptr %dst.gep.i818.i53, align 1
  br label %cleanup

sw.bb8.i46:                                       ; preds = %if.then
  %12 = load i32, ptr %src, align 4
  store i32 %12, ptr %dst, align 4
  %src.gep.i3221.i47 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3222.i48 = getelementptr i8, ptr %dst, i32 4
  %13 = load i32, ptr %src.gep.i3221.i47, align 4
  store i32 %13, ptr %dst.gep.i3222.i48, align 4
  br label %cleanup

sw.bb9.i41:                                       ; preds = %if.then
  %14 = load i32, ptr %src, align 4
  store i32 %14, ptr %dst, align 4
  %src.gep.i3225.i42 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3226.i43 = getelementptr i8, ptr %dst, i32 4
  %15 = load i32, ptr %src.gep.i3225.i42, align 4
  store i32 %15, ptr %dst.gep.i3226.i43, align 4
  %src.gep.i827.i44 = getelementptr i8, ptr %src, i32 8
  %dst.gep.i828.i45 = getelementptr i8, ptr %dst, i32 8
  %16 = load i8, ptr %src.gep.i827.i44, align 1
  store i8 %16, ptr %dst.gep.i828.i45, align 1
  br label %cleanup

sw.bb10.i36:                                      ; preds = %if.then
  %17 = load i32, ptr %src, align 4
  store i32 %17, ptr %dst, align 4
  %src.gep.i3231.i37 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3232.i38 = getelementptr i8, ptr %dst, i32 4
  %18 = load i32, ptr %src.gep.i3231.i37, align 4
  store i32 %18, ptr %dst.gep.i3232.i38, align 4
  %src.gep.i1633.i39 = getelementptr i8, ptr %src, i32 8
  %dst.gep.i1634.i40 = getelementptr i8, ptr %dst, i32 8
  %19 = load i16, ptr %src.gep.i1633.i39, align 2
  store i16 %19, ptr %dst.gep.i1634.i40, align 2
  br label %cleanup

sw.bb11.i29:                                      ; preds = %if.then
  %20 = load i32, ptr %src, align 4
  store i32 %20, ptr %dst, align 4
  %src.gep.i3237.i30 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3238.i31 = getelementptr i8, ptr %dst, i32 4
  %21 = load i32, ptr %src.gep.i3237.i30, align 4
  store i32 %21, ptr %dst.gep.i3238.i31, align 4
  %src.gep.i1639.i32 = getelementptr i8, ptr %src, i32 8
  %dst.gep.i1640.i33 = getelementptr i8, ptr %dst, i32 8
  %22 = load i16, ptr %src.gep.i1639.i32, align 2
  store i16 %22, ptr %dst.gep.i1640.i33, align 2
  %src.gep.i841.i34 = getelementptr i8, ptr %src, i32 10
  %dst.gep.i842.i35 = getelementptr i8, ptr %dst, i32 10
  %23 = load i8, ptr %src.gep.i841.i34, align 1
  store i8 %23, ptr %dst.gep.i842.i35, align 1
  br label %cleanup

sw.bb12.i24:                                      ; preds = %if.then
  %24 = load i32, ptr %src, align 4
  store i32 %24, ptr %dst, align 4
  %src.gep.i3245.i25 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3246.i26 = getelementptr i8, ptr %dst, i32 4
  %25 = load i32, ptr %src.gep.i3245.i25, align 4
  store i32 %25, ptr %dst.gep.i3246.i26, align 4
  %src.gep.i3247.i27 = getelementptr i8, ptr %src, i32 8
  %dst.gep.i3248.i28 = getelementptr i8, ptr %dst, i32 8
  %26 = load i32, ptr %src.gep.i3247.i27, align 4
  store i32 %26, ptr %dst.gep.i3248.i28, align 4
  br label %cleanup

sw.bb13.i17:                                      ; preds = %if.then
  %27 = load i32, ptr %src, align 4
  store i32 %27, ptr %dst, align 4
  %src.gep.i3251.i18 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3252.i19 = getelementptr i8, ptr %dst, i32 4
  %28 = load i32, ptr %src.gep.i3251.i18, align 4
  store i32 %28, ptr %dst.gep.i3252.i19, align 4
  %src.gep.i3253.i20 = getelementptr i8, ptr %src, i32 8
  %dst.gep.i3254.i21 = getelementptr i8, ptr %dst, i32 8
  %29 = load i32, ptr %src.gep.i3253.i20, align 4
  store i32 %29, ptr %dst.gep.i3254.i21, align 4
  %src.gep.i855.i22 = getelementptr i8, ptr %src, i32 12
  %dst.gep.i856.i23 = getelementptr i8, ptr %dst, i32 12
  %30 = load i8, ptr %src.gep.i855.i22, align 1
  store i8 %30, ptr %dst.gep.i856.i23, align 1
  br label %cleanup

sw.bb14.i10:                                      ; preds = %if.then
  %31 = load i32, ptr %src, align 4
  store i32 %31, ptr %dst, align 4
  %src.gep.i3259.i11 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3260.i12 = getelementptr i8, ptr %dst, i32 4
  %32 = load i32, ptr %src.gep.i3259.i11, align 4
  store i32 %32, ptr %dst.gep.i3260.i12, align 4
  %src.gep.i3261.i13 = getelementptr i8, ptr %src, i32 8
  %dst.gep.i3262.i14 = getelementptr i8, ptr %dst, i32 8
  %33 = load i32, ptr %src.gep.i3261.i13, align 4
  store i32 %33, ptr %dst.gep.i3262.i14, align 4
  %src.gep.i1663.i15 = getelementptr i8, ptr %src, i32 12
  %dst.gep.i1664.i16 = getelementptr i8, ptr %dst, i32 12
  %34 = load i16, ptr %src.gep.i1663.i15, align 2
  store i16 %34, ptr %dst.gep.i1664.i16, align 2
  br label %cleanup

sw.bb15.i1:                                       ; preds = %if.then
  %35 = load i32, ptr %src, align 4
  store i32 %35, ptr %dst, align 4
  %src.gep.i3267.i2 = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3268.i3 = getelementptr i8, ptr %dst, i32 4
  %36 = load i32, ptr %src.gep.i3267.i2, align 4
  store i32 %36, ptr %dst.gep.i3268.i3, align 4
  %src.gep.i3269.i4 = getelementptr i8, ptr %src, i32 8
  %dst.gep.i3270.i5 = getelementptr i8, ptr %dst, i32 8
  %37 = load i32, ptr %src.gep.i3269.i4, align 4
  store i32 %37, ptr %dst.gep.i3270.i5, align 4
  %src.gep.i1671.i6 = getelementptr i8, ptr %src, i32 12
  %dst.gep.i1672.i7 = getelementptr i8, ptr %dst, i32 12
  %38 = load i16, ptr %src.gep.i1671.i6, align 2
  store i16 %38, ptr %dst.gep.i1672.i7, align 2
  %src.gep.i873.i8 = getelementptr i8, ptr %src, i32 14
  %dst.gep.i874.i9 = getelementptr i8, ptr %dst, i32 14
  %39 = load i8, ptr %src.gep.i873.i8, align 1
  store i8 %39, ptr %dst.gep.i874.i9, align 1
  br label %cleanup

if.end:                                           ; preds = %entry
  switch i32 %dst_align, label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit [
  i32 15, label %sw.bb1.i
  i32 14, label %sw.bb2.i
  i32 13, label %sw.bb3.i
  i32 12, label %sw.bb4.i
  i32 11, label %sw.bb5.i
  i32 10, label %sw.bb6.i
  i32 9, label %sw.bb7.i
  i32 8, label %sw.bb8.i
  i32 7, label %sw.bb9.i
  i32 6, label %sw.bb10.i
  i32 5, label %sw.bb11.i
  i32 4, label %sw.bb12.i
  i32 3, label %sw.bb13.i
  i32 2, label %sw.bb14.i
  i32 1, label %sw.bb15.i
  ]

sw.bb1.i:                                         ; preds = %if.end
  %40 = load i8, ptr %src, align 1
  store i8 %40, ptr %dst, align 1
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb2.i:                                         ; preds = %if.end
  %41 = load i16, ptr %src, align 2
  store i16 %41, ptr %dst, align 2
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb3.i:                                         ; preds = %if.end
  %42 = load i16, ptr %src, align 2
  store i16 %42, ptr %dst, align 2
  %src.gep.i83.i = getelementptr i8, ptr %src, i32 2
  %dst.gep.i84.i = getelementptr i8, ptr %dst, i32 2
  %43 = load i8, ptr %src.gep.i83.i, align 1
  store i8 %43, ptr %dst.gep.i84.i, align 1
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb4.i:                                         ; preds = %if.end
  %44 = load i32, ptr %src, align 4
  store i32 %44, ptr %dst, align 4
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb5.i:                                         ; preds = %if.end
  %45 = load i32, ptr %src, align 4
  store i32 %45, ptr %dst, align 4
  %src.gep.i87.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i88.i = getelementptr i8, ptr %dst, i32 4
  %46 = load i8, ptr %src.gep.i87.i, align 1
  store i8 %46, ptr %dst.gep.i88.i, align 1
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb6.i:                                         ; preds = %if.end
  %47 = load i32, ptr %src, align 4
  store i32 %47, ptr %dst, align 4
  %src.gep.i1611.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i1612.i = getelementptr i8, ptr %dst, i32 4
  %48 = load i16, ptr %src.gep.i1611.i, align 2
  store i16 %48, ptr %dst.gep.i1612.i, align 2
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb7.i:                                         ; preds = %if.end
  %49 = load i32, ptr %src, align 4
  store i32 %49, ptr %dst, align 4
  %src.gep.i1615.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i1616.i = getelementptr i8, ptr %dst, i32 4
  %50 = load i16, ptr %src.gep.i1615.i, align 2
  store i16 %50, ptr %dst.gep.i1616.i, align 2
  %src.gep.i817.i = getelementptr i8, ptr %src, i32 6
  %dst.gep.i818.i = getelementptr i8, ptr %dst, i32 6
  %51 = load i8, ptr %src.gep.i817.i, align 1
  store i8 %51, ptr %dst.gep.i818.i, align 1
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb8.i:                                         ; preds = %if.end
  %52 = load i32, ptr %src, align 4
  store i32 %52, ptr %dst, align 4
  %src.gep.i3221.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3222.i = getelementptr i8, ptr %dst, i32 4
  %53 = load i32, ptr %src.gep.i3221.i, align 4
  store i32 %53, ptr %dst.gep.i3222.i, align 4
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb9.i:                                         ; preds = %if.end
  %54 = load i32, ptr %src, align 4
  store i32 %54, ptr %dst, align 4
  %src.gep.i3225.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3226.i = getelementptr i8, ptr %dst, i32 4
  %55 = load i32, ptr %src.gep.i3225.i, align 4
  store i32 %55, ptr %dst.gep.i3226.i, align 4
  %src.gep.i827.i = getelementptr i8, ptr %src, i32 8
  %dst.gep.i828.i = getelementptr i8, ptr %dst, i32 8
  %56 = load i8, ptr %src.gep.i827.i, align 1
  store i8 %56, ptr %dst.gep.i828.i, align 1
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb10.i:                                        ; preds = %if.end
  %57 = load i32, ptr %src, align 4
  store i32 %57, ptr %dst, align 4
  %src.gep.i3231.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3232.i = getelementptr i8, ptr %dst, i32 4
  %58 = load i32, ptr %src.gep.i3231.i, align 4
  store i32 %58, ptr %dst.gep.i3232.i, align 4
  %src.gep.i1633.i = getelementptr i8, ptr %src, i32 8
  %dst.gep.i1634.i = getelementptr i8, ptr %dst, i32 8
  %59 = load i16, ptr %src.gep.i1633.i, align 2
  store i16 %59, ptr %dst.gep.i1634.i, align 2
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb11.i:                                        ; preds = %if.end
  %60 = load i32, ptr %src, align 4
  store i32 %60, ptr %dst, align 4
  %src.gep.i3237.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3238.i = getelementptr i8, ptr %dst, i32 4
  %61 = load i32, ptr %src.gep.i3237.i, align 4
  store i32 %61, ptr %dst.gep.i3238.i, align 4
  %src.gep.i1639.i = getelementptr i8, ptr %src, i32 8
  %dst.gep.i1640.i = getelementptr i8, ptr %dst, i32 8
  %62 = load i16, ptr %src.gep.i1639.i, align 2
  store i16 %62, ptr %dst.gep.i1640.i, align 2
  %src.gep.i841.i = getelementptr i8, ptr %src, i32 10
  %dst.gep.i842.i = getelementptr i8, ptr %dst, i32 10
  %63 = load i8, ptr %src.gep.i841.i, align 1
  store i8 %63, ptr %dst.gep.i842.i, align 1
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb12.i:                                        ; preds = %if.end
  %64 = load i32, ptr %src, align 4
  store i32 %64, ptr %dst, align 4
  %src.gep.i3245.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3246.i = getelementptr i8, ptr %dst, i32 4
  %65 = load i32, ptr %src.gep.i3245.i, align 4
  store i32 %65, ptr %dst.gep.i3246.i, align 4
  %src.gep.i3247.i = getelementptr i8, ptr %src, i32 8
  %dst.gep.i3248.i = getelementptr i8, ptr %dst, i32 8
  %66 = load i32, ptr %src.gep.i3247.i, align 4
  store i32 %66, ptr %dst.gep.i3248.i, align 4
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb13.i:                                        ; preds = %if.end
  %67 = load i32, ptr %src, align 4
  store i32 %67, ptr %dst, align 4
  %src.gep.i3251.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3252.i = getelementptr i8, ptr %dst, i32 4
  %68 = load i32, ptr %src.gep.i3251.i, align 4
  store i32 %68, ptr %dst.gep.i3252.i, align 4
  %src.gep.i3253.i = getelementptr i8, ptr %src, i32 8
  %dst.gep.i3254.i = getelementptr i8, ptr %dst, i32 8
  %69 = load i32, ptr %src.gep.i3253.i, align 4
  store i32 %69, ptr %dst.gep.i3254.i, align 4
  %src.gep.i855.i = getelementptr i8, ptr %src, i32 12
  %dst.gep.i856.i = getelementptr i8, ptr %dst, i32 12
  %70 = load i8, ptr %src.gep.i855.i, align 1
  store i8 %70, ptr %dst.gep.i856.i, align 1
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb14.i:                                        ; preds = %if.end
  %71 = load i32, ptr %src, align 4
  store i32 %71, ptr %dst, align 4
  %src.gep.i3259.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3260.i = getelementptr i8, ptr %dst, i32 4
  %72 = load i32, ptr %src.gep.i3259.i, align 4
  store i32 %72, ptr %dst.gep.i3260.i, align 4
  %src.gep.i3261.i = getelementptr i8, ptr %src, i32 8
  %dst.gep.i3262.i = getelementptr i8, ptr %dst, i32 8
  %73 = load i32, ptr %src.gep.i3261.i, align 4
  store i32 %73, ptr %dst.gep.i3262.i, align 4
  %src.gep.i1663.i = getelementptr i8, ptr %src, i32 12
  %dst.gep.i1664.i = getelementptr i8, ptr %dst, i32 12
  %74 = load i16, ptr %src.gep.i1663.i, align 2
  store i16 %74, ptr %dst.gep.i1664.i, align 2
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

sw.bb15.i:                                        ; preds = %if.end
  %75 = load i32, ptr %src, align 4
  store i32 %75, ptr %dst, align 4
  %src.gep.i3267.i = getelementptr i8, ptr %src, i32 4
  %dst.gep.i3268.i = getelementptr i8, ptr %dst, i32 4
  %76 = load i32, ptr %src.gep.i3267.i, align 4
  store i32 %76, ptr %dst.gep.i3268.i, align 4
  %src.gep.i3269.i = getelementptr i8, ptr %src, i32 8
  %dst.gep.i3270.i = getelementptr i8, ptr %dst, i32 8
  %77 = load i32, ptr %src.gep.i3269.i, align 4
  store i32 %77, ptr %dst.gep.i3270.i, align 4
  %src.gep.i1671.i = getelementptr i8, ptr %src, i32 12
  %dst.gep.i1672.i = getelementptr i8, ptr %dst, i32 12
  %78 = load i16, ptr %src.gep.i1671.i, align 2
  store i16 %78, ptr %dst.gep.i1672.i, align 2
  %src.gep.i873.i = getelementptr i8, ptr %src, i32 14
  %dst.gep.i874.i = getelementptr i8, ptr %dst, i32 14
  %79 = load i8, ptr %src.gep.i873.i, align 1
  store i8 %79, ptr %dst.gep.i874.i, align 1
  br label %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit

esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit: ; preds = %if.end, %sw.bb1.i, %sw.bb2.i, %sw.bb3.i, %sw.bb4.i, %sw.bb5.i, %sw.bb6.i, %sw.bb7.i, %sw.bb8.i, %sw.bb9.i, %sw.bb10.i, %sw.bb11.i, %sw.bb12.i, %sw.bb13.i, %sw.bb14.i, %sw.bb15.i
  %sub2 = sub i32 %size, %sub
  %add.ptr1 = getelementptr i8, ptr %dst, i32 %sub
  %add.ptr = getelementptr i8, ptr %src, i32 %sub
  %80 = ptrtoint ptr %add.ptr to i32
  %81 = ptrtoint ptr %add.ptr1 to i32
  %cmp.i = icmp ult i32 %sub2, 16
  br i1 %cmp.i, label %cleanup.out.i, label %if.end.i

if.end.i:                                         ; preds = %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit
  %div.i = udiv i32 %sub2, 48
  %.neg = mul i32 %div.i, -48
  %rem.decomposed.i = add i32 %.neg, %sub2
  %ld128usarip.i = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %80, i32 16, i32 0)
  %ld128usarip1.i = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip.i, i32 16, i32 1)
  %cmp21.not.i = icmp ult i32 %sub2, 48
  br i1 %cmp21.not.i, label %for.cond.cleanup.i, label %for.body.i

for.cond.cleanup.i:                               ; preds = %for.body.i, %if.end.i
  %src.ptr.afterloop.i = phi i32 [ %ld128usarip1.i, %if.end.i ], [ %srcqldip4.final.i, %for.body.i ]
  %dst.ptr.afterloop.i = phi i32 [ %81, %if.end.i ], [ %vst128ip5.final.i, %for.body.i ]
  %tobool.not.i = icmp ult i32 %rem.decomposed.i, 32
  br i1 %tobool.not.i, label %if.end3.i, label %if.then2.i

for.body.i:                                       ; preds = %for.body.i, %if.end.i
  %i.022.i = phi i32 [ 0, %if.end.i ], [ %inc.i, %for.body.i ]
  %src.ptr.phi.i = phi i32 [ %ld128usarip1.i, %if.end.i ], [ %srcqldip4.final.i, %for.body.i ]
  %dst.ptr.phi.i = phi i32 [ %81, %if.end.i ], [ %vst128ip5.final.i, %for.body.i ]
  %srcqldip.i = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.phi.i, i32 0, i32 16, i32 2)
  %vst128ip.i = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.phi.i, i32 16)
  %srcqldip2.i = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip.i, i32 1, i32 16, i32 0)
  %vst128ip3.i = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip.i, i32 16)
  %srcqldip4.final.i = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2.i, i32 2, i32 16, i32 1)
  %vst128ip5.final.i = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3.i, i32 16)
  %inc.i = add nuw nsw i32 %i.022.i, 1
  %exitcond.not.i = icmp eq i32 %inc.i, %div.i
  br i1 %exitcond.not.i, label %for.cond.cleanup.i, label %for.body.i

if.then2.i:                                       ; preds = %for.cond.cleanup.i
  %srcqldip6.i = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.afterloop.i, i32 0, i32 0, i32 2)
  %vst128ip7.i = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.afterloop.i, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8.i = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7.i, i32 16)
  %sub1.i = add nsw i32 %rem.decomposed.i, -32
  br label %cleanup.out.i

if.end3.i:                                        ; preds = %for.cond.cleanup.i
  %tobool5.not.i = icmp ult i32 %rem.decomposed.i, 16
  br i1 %tobool5.not.i, label %if.end7.i, label %if.then6.i

if.then6.i:                                       ; preds = %if.end3.i
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip9.i = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.afterloop.i, i32 16)
  %sub_src.i = add i32 %src.ptr.afterloop.i, -16
  %sub9.i = add nsw i32 %rem.decomposed.i, -16
  br label %cleanup.out.i

if.end7.i:                                        ; preds = %if.end3.i
  %src_end7.i = add i32 %src.ptr.afterloop.i, -32
  br label %cleanup.out.i

cleanup.out.i:                                    ; preds = %if.end7.i, %if.then6.i, %if.then2.i, %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit
  %src.final.i = phi i32 [ %srcqldip6.i, %if.then2.i ], [ %sub_src.i, %if.then6.i ], [ %80, %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit ], [ %src_end7.i, %if.end7.i ]
  %dst.final.i = phi i32 [ %vst128ip8.i, %if.then2.i ], [ %vst128ip9.i, %if.then6.i ], [ %81, %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit ], [ %dst.ptr.afterloop.i, %if.end7.i ]
  %rem.final.i = phi i32 [ %sub1.i, %if.then2.i ], [ %sub9.i, %if.then6.i ], [ %sub2, %esp32p4MemCpySrcUnalignDstUnalignFrom1To15Opt.exit ], [ %rem.decomposed.i, %if.end7.i ]
  %cmp.final.i = icmp eq i32 %rem.final.i, 0
  br i1 %cmp.final.i, label %cleanup, label %call.cleanup.i

call.cleanup.i:                                   ; preds = %cleanup.out.i
  %dst.ptr.final.i = inttoptr i32 %dst.final.i to ptr
  %src.ptr.final.i = inttoptr i32 %src.final.i to ptr
  switch i32 %rem.final.i, label %cleanup [
  i32 1, label %sw.bb1.i131
  i32 2, label %sw.bb2.i130
  i32 3, label %sw.bb3.i127
  i32 4, label %sw.bb4.i126
  i32 5, label %sw.bb5.i123
  i32 6, label %sw.bb6.i120
  i32 7, label %sw.bb7.i115
  i32 8, label %sw.bb8.i112
  i32 9, label %sw.bb9.i107
  i32 10, label %sw.bb10.i102
  i32 11, label %sw.bb11.i95
  i32 12, label %sw.bb12.i90
  i32 13, label %sw.bb13.i83
  i32 14, label %sw.bb14.i76
  i32 15, label %sw.bb15.i67
  ]

sw.bb1.i131:                                      ; preds = %call.cleanup.i
  %82 = load i8, ptr %src.ptr.final.i, align 1
  store i8 %82, ptr %dst.ptr.final.i, align 1
  br label %cleanup

sw.bb2.i130:                                      ; preds = %call.cleanup.i
  %83 = load i16, ptr %src.ptr.final.i, align 2
  store i16 %83, ptr %dst.ptr.final.i, align 2
  br label %cleanup

sw.bb3.i127:                                      ; preds = %call.cleanup.i
  %84 = load i16, ptr %src.ptr.final.i, align 2
  store i16 %84, ptr %dst.ptr.final.i, align 2
  %src.gep.i83.i128 = getelementptr i8, ptr %src.ptr.final.i, i32 2
  %dst.gep.i84.i129 = getelementptr i8, ptr %dst.ptr.final.i, i32 2
  %85 = load i8, ptr %src.gep.i83.i128, align 1
  store i8 %85, ptr %dst.gep.i84.i129, align 1
  br label %cleanup

sw.bb4.i126:                                      ; preds = %call.cleanup.i
  %86 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %86, ptr %dst.ptr.final.i, align 4
  br label %cleanup

sw.bb5.i123:                                      ; preds = %call.cleanup.i
  %87 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %87, ptr %dst.ptr.final.i, align 4
  %src.gep.i87.i124 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i88.i125 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %88 = load i8, ptr %src.gep.i87.i124, align 1
  store i8 %88, ptr %dst.gep.i88.i125, align 1
  br label %cleanup

sw.bb6.i120:                                      ; preds = %call.cleanup.i
  %89 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %89, ptr %dst.ptr.final.i, align 4
  %src.gep.i1611.i121 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i1612.i122 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %90 = load i16, ptr %src.gep.i1611.i121, align 2
  store i16 %90, ptr %dst.gep.i1612.i122, align 2
  br label %cleanup

sw.bb7.i115:                                      ; preds = %call.cleanup.i
  %91 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %91, ptr %dst.ptr.final.i, align 4
  %src.gep.i1615.i116 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i1616.i117 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %92 = load i16, ptr %src.gep.i1615.i116, align 2
  store i16 %92, ptr %dst.gep.i1616.i117, align 2
  %src.gep.i817.i118 = getelementptr i8, ptr %src.ptr.final.i, i32 6
  %dst.gep.i818.i119 = getelementptr i8, ptr %dst.ptr.final.i, i32 6
  %93 = load i8, ptr %src.gep.i817.i118, align 1
  store i8 %93, ptr %dst.gep.i818.i119, align 1
  br label %cleanup

sw.bb8.i112:                                      ; preds = %call.cleanup.i
  %94 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %94, ptr %dst.ptr.final.i, align 4
  %src.gep.i3221.i113 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i3222.i114 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %95 = load i32, ptr %src.gep.i3221.i113, align 4
  store i32 %95, ptr %dst.gep.i3222.i114, align 4
  br label %cleanup

sw.bb9.i107:                                      ; preds = %call.cleanup.i
  %96 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %96, ptr %dst.ptr.final.i, align 4
  %src.gep.i3225.i108 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i3226.i109 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %97 = load i32, ptr %src.gep.i3225.i108, align 4
  store i32 %97, ptr %dst.gep.i3226.i109, align 4
  %src.gep.i827.i110 = getelementptr i8, ptr %src.ptr.final.i, i32 8
  %dst.gep.i828.i111 = getelementptr i8, ptr %dst.ptr.final.i, i32 8
  %98 = load i8, ptr %src.gep.i827.i110, align 1
  store i8 %98, ptr %dst.gep.i828.i111, align 1
  br label %cleanup

sw.bb10.i102:                                     ; preds = %call.cleanup.i
  %99 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %99, ptr %dst.ptr.final.i, align 4
  %src.gep.i3231.i103 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i3232.i104 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %100 = load i32, ptr %src.gep.i3231.i103, align 4
  store i32 %100, ptr %dst.gep.i3232.i104, align 4
  %src.gep.i1633.i105 = getelementptr i8, ptr %src.ptr.final.i, i32 8
  %dst.gep.i1634.i106 = getelementptr i8, ptr %dst.ptr.final.i, i32 8
  %101 = load i16, ptr %src.gep.i1633.i105, align 2
  store i16 %101, ptr %dst.gep.i1634.i106, align 2
  br label %cleanup

sw.bb11.i95:                                      ; preds = %call.cleanup.i
  %102 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %102, ptr %dst.ptr.final.i, align 4
  %src.gep.i3237.i96 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i3238.i97 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %103 = load i32, ptr %src.gep.i3237.i96, align 4
  store i32 %103, ptr %dst.gep.i3238.i97, align 4
  %src.gep.i1639.i98 = getelementptr i8, ptr %src.ptr.final.i, i32 8
  %dst.gep.i1640.i99 = getelementptr i8, ptr %dst.ptr.final.i, i32 8
  %104 = load i16, ptr %src.gep.i1639.i98, align 2
  store i16 %104, ptr %dst.gep.i1640.i99, align 2
  %src.gep.i841.i100 = getelementptr i8, ptr %src.ptr.final.i, i32 10
  %dst.gep.i842.i101 = getelementptr i8, ptr %dst.ptr.final.i, i32 10
  %105 = load i8, ptr %src.gep.i841.i100, align 1
  store i8 %105, ptr %dst.gep.i842.i101, align 1
  br label %cleanup

sw.bb12.i90:                                      ; preds = %call.cleanup.i
  %106 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %106, ptr %dst.ptr.final.i, align 4
  %src.gep.i3245.i91 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i3246.i92 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %107 = load i32, ptr %src.gep.i3245.i91, align 4
  store i32 %107, ptr %dst.gep.i3246.i92, align 4
  %src.gep.i3247.i93 = getelementptr i8, ptr %src.ptr.final.i, i32 8
  %dst.gep.i3248.i94 = getelementptr i8, ptr %dst.ptr.final.i, i32 8
  %108 = load i32, ptr %src.gep.i3247.i93, align 4
  store i32 %108, ptr %dst.gep.i3248.i94, align 4
  br label %cleanup

sw.bb13.i83:                                      ; preds = %call.cleanup.i
  %109 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %109, ptr %dst.ptr.final.i, align 4
  %src.gep.i3251.i84 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i3252.i85 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %110 = load i32, ptr %src.gep.i3251.i84, align 4
  store i32 %110, ptr %dst.gep.i3252.i85, align 4
  %src.gep.i3253.i86 = getelementptr i8, ptr %src.ptr.final.i, i32 8
  %dst.gep.i3254.i87 = getelementptr i8, ptr %dst.ptr.final.i, i32 8
  %111 = load i32, ptr %src.gep.i3253.i86, align 4
  store i32 %111, ptr %dst.gep.i3254.i87, align 4
  %src.gep.i855.i88 = getelementptr i8, ptr %src.ptr.final.i, i32 12
  %dst.gep.i856.i89 = getelementptr i8, ptr %dst.ptr.final.i, i32 12
  %112 = load i8, ptr %src.gep.i855.i88, align 1
  store i8 %112, ptr %dst.gep.i856.i89, align 1
  br label %cleanup

sw.bb14.i76:                                      ; preds = %call.cleanup.i
  %113 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %113, ptr %dst.ptr.final.i, align 4
  %src.gep.i3259.i77 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i3260.i78 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %114 = load i32, ptr %src.gep.i3259.i77, align 4
  store i32 %114, ptr %dst.gep.i3260.i78, align 4
  %src.gep.i3261.i79 = getelementptr i8, ptr %src.ptr.final.i, i32 8
  %dst.gep.i3262.i80 = getelementptr i8, ptr %dst.ptr.final.i, i32 8
  %115 = load i32, ptr %src.gep.i3261.i79, align 4
  store i32 %115, ptr %dst.gep.i3262.i80, align 4
  %src.gep.i1663.i81 = getelementptr i8, ptr %src.ptr.final.i, i32 12
  %dst.gep.i1664.i82 = getelementptr i8, ptr %dst.ptr.final.i, i32 12
  %116 = load i16, ptr %src.gep.i1663.i81, align 2
  store i16 %116, ptr %dst.gep.i1664.i82, align 2
  br label %cleanup

sw.bb15.i67:                                      ; preds = %call.cleanup.i
  %117 = load i32, ptr %src.ptr.final.i, align 4
  store i32 %117, ptr %dst.ptr.final.i, align 4
  %src.gep.i3267.i68 = getelementptr i8, ptr %src.ptr.final.i, i32 4
  %dst.gep.i3268.i69 = getelementptr i8, ptr %dst.ptr.final.i, i32 4
  %118 = load i32, ptr %src.gep.i3267.i68, align 4
  store i32 %118, ptr %dst.gep.i3268.i69, align 4
  %src.gep.i3269.i70 = getelementptr i8, ptr %src.ptr.final.i, i32 8
  %dst.gep.i3270.i71 = getelementptr i8, ptr %dst.ptr.final.i, i32 8
  %119 = load i32, ptr %src.gep.i3269.i70, align 4
  store i32 %119, ptr %dst.gep.i3270.i71, align 4
  %src.gep.i1671.i72 = getelementptr i8, ptr %src.ptr.final.i, i32 12
  %dst.gep.i1672.i73 = getelementptr i8, ptr %dst.ptr.final.i, i32 12
  %120 = load i16, ptr %src.gep.i1671.i72, align 2
  store i16 %120, ptr %dst.gep.i1672.i73, align 2
  %src.gep.i873.i74 = getelementptr i8, ptr %src.ptr.final.i, i32 14
  %dst.gep.i874.i75 = getelementptr i8, ptr %dst.ptr.final.i, i32 14
  %121 = load i8, ptr %src.gep.i873.i74, align 1
  store i8 %121, ptr %dst.gep.i874.i75, align 1
  br label %cleanup

cleanup:                                          ; preds = %cleanup.out.i, %call.cleanup.i, %sw.bb1.i131, %sw.bb2.i130, %sw.bb3.i127, %sw.bb4.i126, %sw.bb5.i123, %sw.bb6.i120, %sw.bb7.i115, %sw.bb8.i112, %sw.bb9.i107, %sw.bb10.i102, %sw.bb11.i95, %sw.bb12.i90, %sw.bb13.i83, %sw.bb14.i76, %sw.bb15.i67, %sw.bb15.i1, %sw.bb14.i10, %sw.bb13.i17, %sw.bb12.i24, %sw.bb11.i29, %sw.bb10.i36, %sw.bb9.i41, %sw.bb8.i46, %sw.bb7.i49, %sw.bb6.i54, %sw.bb5.i57, %sw.bb4.i60, %sw.bb3.i61, %sw.bb2.i64, %sw.bb1.i65, %if.then
  ret void
}

; Function Attrs: nounwind
declare i32 @llvm.riscv.esp.vld.h.64.ip(i32, i32 immarg, i32 immarg) #10

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrc8Dst16Const16(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc8Dst16Const16(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP3:%.*]] = lshr i32 [[TMP2]], 7
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP2]], 128
; CHECK-NEXT:    br i1 [[TMP4]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[TMP6:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLDH64IP14:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VST128IP21:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[SRC_PTR_LOOP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[TMP6]] = add nuw nsw i32 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[FOR_COND_CLEANUP]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRC_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLDH64IP14]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VST128IP21]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[SRC_PTR_CLEANUP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_CLEANUP]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %3 = lshr i32 %2, 7
  %4 = icmp ult i32 %2, 128
  br i1 %4, label %for.cond.cleanup, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %5 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  %src.ptr.loop = phi i32 [ %1, %entry ], [ %vldh64ip14, %for.body ]
  %dst.ptr.loop = phi i32 [ %0, %entry ], [ %vst128ip21, %for.body ]
  %vldl64ip = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %src.ptr.loop, i32 8, i32 0)
  %vldh64ip = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip, i32 8, i32 0)
  %vldl64ip1 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip, i32 8, i32 1)
  %vldh64ip2 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip1, i32 8, i32 1)
  %vldl64ip3 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip2, i32 8, i32 2)
  %vldh64ip4 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip3, i32 8, i32 2)
  %vldl64ip5 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip4, i32 8, i32 3)
  %vldh64ip6 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip5, i32 8, i32 3)
  %vldl64ip7 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip6, i32 8, i32 4)
  %vldh64ip8 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip7, i32 8, i32 4)
  %vldl64ip9 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip8, i32 8, i32 5)
  %vldh64ip10 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip9, i32 8, i32 5)
  %vldl64ip11 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip10, i32 8, i32 6)
  %vldh64ip12 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip11, i32 8, i32 6)
  %vldl64ip13 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip12, i32 8, i32 7)
  %vldh64ip14 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip13, i32 8, i32 7)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %vst128ip15 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %vst128ip16 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip15, i32 16)
  %vst128ip17 = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 %vst128ip16, i32 16)
  %vst128ip18 = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 %vst128ip17, i32 16)
  %vst128ip19 = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 %vst128ip18, i32 16)
  %vst128ip20 = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 %vst128ip19, i32 16)
  %vst128ip21 = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 %vst128ip20, i32 16)
  %6 = add nuw nsw i32 %5, 1
  %7 = icmp eq i32 %6, %3
  br i1 %7, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %src.ptr.cleanup = phi i32 [ %1, %entry ], [ %vldh64ip14, %for.body ]
  %dst.ptr.cleanup = phi i32 [ %0, %entry ], [ %vst128ip21, %for.body ]
  %vldl64ip22 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %src.ptr.cleanup, i32 8, i32 0)
  %vldh64ip23 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip22, i32 8, i32 0)
  %vldl64ip24 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip23, i32 8, i32 1)
  %vldh64ip25 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip24, i32 8, i32 1)
  %vst128ip26 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.cleanup, i32 16)
  %vst128ip27 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip26, i32 16)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrc8Dst8Const16(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc8Dst8Const16(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP3:%.*]] = lshr i32 [[TMP2]], 7
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP2]], 128
; CHECK-NEXT:    br i1 [[TMP4]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[TMP6:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLDH64IP14:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VSTH64IP28:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[SRC_PTR_LOOP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[TMP6]] = add nuw nsw i32 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[FOR_COND_CLEANUP]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRC_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLDH64IP14]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VSTH64IP28]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[SRC_PTR_CLEANUP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VSTL64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[DST_PTR_CLEANUP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP33]], i32 8)
; CHECK-NEXT:    [[VSTL64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP34]], i32 8)
; CHECK-NEXT:    [[VSTH64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP35]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  %3 = lshr i32 %2, 7
  %4 = icmp ult i32 %2, 128
  br i1 %4, label %for.cond.cleanup, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %5 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  %src.ptr.loop = phi i32 [ %1, %entry ], [ %vldh64ip14, %for.body ]
  %dst.ptr.loop = phi i32 [ %0, %entry ], [ %vsth64ip28, %for.body ]
  %vldl64ip = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %src.ptr.loop, i32 8, i32 0)
  %vldh64ip = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip, i32 8, i32 0)
  %vldl64ip1 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip, i32 8, i32 1)
  %vldh64ip2 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip1, i32 8, i32 1)
  %vldl64ip3 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip2, i32 8, i32 2)
  %vldh64ip4 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip3, i32 8, i32 2)
  %vldl64ip5 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip4, i32 8, i32 3)
  %vldh64ip6 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip5, i32 8, i32 3)
  %vldl64ip7 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip6, i32 8, i32 4)
  %vldh64ip8 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip7, i32 8, i32 4)
  %vldl64ip9 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip8, i32 8, i32 5)
  %vldh64ip10 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip9, i32 8, i32 5)
  %vldl64ip11 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip10, i32 8, i32 6)
  %vldh64ip12 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip11, i32 8, i32 6)
  %vldl64ip13 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip12, i32 8, i32 7)
  %vldh64ip14 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip13, i32 8, i32 7)
  %vstl64ip = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 %dst.ptr.loop, i32 8)
  %vsth64ip = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 %vstl64ip, i32 8)
  %vstl64ip15 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 %vsth64ip, i32 8)
  %vsth64ip16 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 %vstl64ip15, i32 8)
  %vstl64ip17 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 %vsth64ip16, i32 8)
  %vsth64ip18 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 %vstl64ip17, i32 8)
  %vstl64ip19 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 %vsth64ip18, i32 8)
  %vsth64ip20 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 %vstl64ip19, i32 8)
  %vstl64ip21 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 %vsth64ip20, i32 8)
  %vsth64ip22 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 %vstl64ip21, i32 8)
  %vstl64ip23 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 %vsth64ip22, i32 8)
  %vsth64ip24 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 %vstl64ip23, i32 8)
  %vstl64ip25 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 %vsth64ip24, i32 8)
  %vsth64ip26 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 %vstl64ip25, i32 8)
  %vstl64ip27 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 %vsth64ip26, i32 8)
  %vsth64ip28 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 %vstl64ip27, i32 8)
  %6 = add nuw nsw i32 %5, 1
  %7 = icmp eq i32 %6, %3
  br i1 %7, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %src.ptr.cleanup = phi i32 [ %1, %entry ], [ %vldh64ip14, %for.body ]
  %dst.ptr.cleanup = phi i32 [ %0, %entry ], [ %vsth64ip28, %for.body ]
  %vldl64ip29 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %src.ptr.cleanup, i32 8, i32 0)
  %vldh64ip30 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip29, i32 8, i32 0)
  %vldl64ip31 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip30, i32 8, i32 1)
  %vldh64ip32 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip31, i32 8, i32 1)
  %vstl64ip33 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 %dst.ptr.cleanup, i32 8)
  %vsth64ip34 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 %vstl64ip33, i32 8)
  %vstl64ip35 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 %vsth64ip34, i32 8)
  %vsth64ip36 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 %vstl64ip35, i32 8)
  ret void
}

; Function Attrs: nounwind
declare i32 @llvm.riscv.esp.ld.128.usar.ip(i32, i32 immarg, i32 immarg) #10

; Function Attrs: nounwind
declare i32 @llvm.riscv.esp.src.q.ld.ip(i32 immarg, i32, i32 immarg, i32 immarg, i32 immarg) #10

; Function Attrs: nounwind
declare void @llvm.riscv.esp.src.q(i32 immarg, i32 immarg, i32 immarg) #10

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index0(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index0(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 1
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.0(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.0(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[I_013]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index0(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index0(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[I_013]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index1(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index1(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.1(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.1(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index1(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index1(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.2(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.2(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 5
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 5
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.3(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.3(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 21
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 21
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index2(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index2(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 416
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 416
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index2(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index2(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 1
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index3(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index3(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 1
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.4(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.4(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[I_013]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index3(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index3(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[I_013]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index4(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index4(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[I_013]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.5(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.5(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.6(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.6(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index5(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index5(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index4(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index4(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 5
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 5
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index5(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index5(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 21
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 21
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index6(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index6(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[I_013]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index6(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index6(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 1
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.7(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.7(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[I_013]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index7(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index7(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[I_013]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index7(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index7(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.8(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.8(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index8(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index8(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 5
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 5
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index9(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index9(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 21
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 21
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index10(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index10(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 1
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.9(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.9(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[I_013]], 0
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 1
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index11(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index11(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

define internal void @esp32p4MemCpySrcunalignedDst16Div48Index12(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16Div48Index12(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_08:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_08]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.08 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.08, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret void
}

; Function Attrs: nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.10(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From16to31.10(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 2
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 2
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  call void @llvm.riscv.esp.src.q(i32 1, i32 0, i32 0)
  %vst128ip6 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip4, -32
  %0 = inttoptr i32 %vst128ip6 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index8(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index8(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 4
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 4
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}

; Function Attrs: noinline nounwind
define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index9(i32 %dst, i32 %src) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrcunalignedDst16mod48From32To47Index9(
; CHECK-SAME: i32 [[DST:%.*]], i32 [[SRC:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[LD128USARIP:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[SRC]], i32 16, i32 0)
; CHECK-NEXT:    [[LD128USARIP1:%.*]] = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 [[LD128USARIP]], i32 16, i32 1)
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[I_013:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INC:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[LD128USARIP1]], %[[ENTRY]] ], [ [[SRCQLDIP4:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[DST]], %[[ENTRY]] ], [ [[VST128IP5:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[INC]] = add nuw nsw i32 [[I_013]], 1
; CHECK-NEXT:    [[SRCQLDIP:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRC_PTR_LOOP]], i32 0, i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP2:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 [[SRCQLDIP]], i32 1, i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[SRCQLDIP4]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 [[SRCQLDIP2]], i32 2, i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP5]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i32 [[INC]], 20
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRCQLDIP6:%.*]] = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 [[SRCQLDIP4]], i32 0, i32 0, i32 2)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %ld128usarip = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %src, i32 16, i32 0)
  %ld128usarip1 = call i32 @llvm.riscv.esp.ld.128.usar.ip(i32 %ld128usarip, i32 16, i32 1)
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %i.013 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %src.ptr.loop = phi i32 [ %ld128usarip1, %entry ], [ %srcqldip4, %for.body ]
  %dst.ptr.loop = phi i32 [ %dst, %entry ], [ %vst128ip5, %for.body ]
  %inc = add nuw nsw i32 %i.013, 1
  %srcqldip = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %src.ptr.loop, i32 0, i32 16, i32 2)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %srcqldip2 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 2, i32 %srcqldip, i32 1, i32 16, i32 0)
  %vst128ip3 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %srcqldip4 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 0, i32 %srcqldip2, i32 2, i32 16, i32 1)
  %vst128ip5 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip3, i32 16)
  %exitcond.not = icmp eq i32 %inc, 20
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  %srcqldip6 = call i32 @llvm.riscv.esp.src.q.ld.ip(i32 1, i32 %srcqldip4, i32 0, i32 0, i32 2)
  %vst128ip7 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %vst128ip5, i32 16)
  call void @llvm.riscv.esp.src.q(i32 2, i32 1, i32 1)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip7, i32 16)
  %adjusted_src_ptr = add i32 %srcqldip6, -32
  %0 = inttoptr i32 %vst128ip8 to ptr
  %1 = inttoptr i32 %adjusted_src_ptr to ptr
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %1, i32 0, i1 false)
  ret void
}
