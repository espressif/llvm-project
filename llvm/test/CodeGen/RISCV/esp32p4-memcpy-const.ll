; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -mtriple=riscv32-esp-unknown-elf -passes=riscv-esp32-p4-mem-intrin -riscv-esp32-p4-mem-intrin=true < %s | FileCheck %s

target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32-esp-unknown-elf"

; src16 dst16
define void @test_src16_dst16_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1) %a, ptr noundef nonnull align 16 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src16_dst16_size_2(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(2) %a, ptr noundef nonnull align 16 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src16_dst16_size_3(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(3) %a, ptr noundef nonnull align 16 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src16_dst16_size_4(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(4) %a, ptr noundef nonnull align 16 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src16_dst16_size_5(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(5) %a, ptr noundef nonnull align 16 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src16_dst16_size_6(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(6) %a, ptr noundef nonnull align 16 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src16_dst16_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(7) %a, ptr noundef nonnull align 16 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src16_dst16_size_8(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(8) %a, ptr noundef nonnull align 16 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src16_dst16_size_9(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(9) %a, ptr noundef nonnull align 16 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src16_dst16_size_10(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(10) %a, ptr noundef nonnull align 16 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src16_dst16_size_11(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(11) %a, ptr noundef nonnull align 16 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src16_dst16_size_12(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(12) %a, ptr noundef nonnull align 16 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src16_dst16_size_13(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(13) %a, ptr noundef nonnull align 16 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src16_dst16_size_14(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(14) %a, ptr noundef nonnull align 16 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src16_dst16_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP9]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(15) %a, ptr noundef nonnull align 16 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src16_dst16_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(16) %a, ptr noundef nonnull align 16 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src16_dst16_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(17) %a, ptr noundef nonnull align 16 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src16_dst16_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(31) %a, ptr noundef nonnull align 16 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src16_dst16_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP2:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(32) %a, ptr noundef nonnull align 16 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src16_dst16_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP2:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(33) %a, ptr noundef nonnull align 16 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src16_dst16_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP2:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(47) %a, ptr noundef nonnull align 16 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src16_dst16_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(48) %a, ptr noundef nonnull align 16 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src16_dst16_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(49) %a, ptr noundef nonnull align 16 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src16_dst16_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP3]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(63) %a, ptr noundef nonnull align 16 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src16_dst16_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP4]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(64) %a, ptr noundef nonnull align 16 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src16_dst16_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP4:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP4]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(65) %a, ptr noundef nonnull align 16 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src16_dst16_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP6]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(80) %a, ptr noundef nonnull align 16 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src16_dst16_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP6]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(81) %a, ptr noundef nonnull align 16 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src16_dst16_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP6]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLD128IP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VST128IP8]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(88) %a, ptr noundef nonnull align 16 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src16_dst16_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP6]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(96) %a, ptr noundef nonnull align 16 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src16_dst16_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(112) %a, ptr noundef nonnull align 16 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src16_dst16_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(124) %a, ptr noundef nonnull align 16 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src16_dst16_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(127) %a, ptr noundef nonnull align 16 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src16_dst16_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(128) %a, ptr noundef nonnull align 16 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src16_dst16_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(129) %a, ptr noundef nonnull align 16 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src16_dst16_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP17:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP16]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP18:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP17]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP19:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP18]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP20:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP19]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP21:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP20]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP22:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP23:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP22]], i32 16)
; CHECK-NEXT:    [[VST128IP24:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP23]], i32 16)
; CHECK-NEXT:    [[VST128IP25:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP24]], i32 16)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP25]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    [[VST128IP28:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP27]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(255) %a, ptr noundef nonnull align 16 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src16_dst16_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP17:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP16]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP18:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP17]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP19:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP18]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP20:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP19]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP21:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP20]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP21]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP23:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP24:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP23]], i32 16)
; CHECK-NEXT:    [[VST128IP25:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP24]], i32 16)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP25]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    [[VST128IP28:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP27]], i32 16)
; CHECK-NEXT:    [[VST128IP29:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP28]], i32 16)
; CHECK-NEXT:    [[VST128IP30:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP29]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(256) %a, ptr noundef nonnull align 16 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src16_dst16_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP17:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP16]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP18:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP17]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP19:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP18]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP20:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP19]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP21:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP20]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP21]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP23:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP24:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP23]], i32 16)
; CHECK-NEXT:    [[VST128IP25:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP24]], i32 16)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP25]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    [[VST128IP28:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP27]], i32 16)
; CHECK-NEXT:    [[VST128IP29:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP28]], i32 16)
; CHECK-NEXT:    [[VST128IP30:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP29]], i32 16)
; CHECK-NEXT:    [[VLD128IP31:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP32:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP31]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP33:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP32]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP34:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP33]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP35:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP34]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP36:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP35]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP37:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP36]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP38:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP37]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP30]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    [[VST128IP46:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP45]], i32 16)
; CHECK-NEXT:    [[VLD128IP47:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP38]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP48:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP47]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP49:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP48]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP50:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP49]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP51:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP50]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP52:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP51]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP53:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP52]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP54:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP53]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP55:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP46]], i32 16)
; CHECK-NEXT:    [[VST128IP56:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP55]], i32 16)
; CHECK-NEXT:    [[VST128IP57:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP56]], i32 16)
; CHECK-NEXT:    [[VST128IP58:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP57]], i32 16)
; CHECK-NEXT:    [[VST128IP59:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP58]], i32 16)
; CHECK-NEXT:    [[VST128IP60:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP59]], i32 16)
; CHECK-NEXT:    [[VST128IP61:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP60]], i32 16)
; CHECK-NEXT:    [[VST128IP62:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP61]], i32 16)
; CHECK-NEXT:    [[VLD128IP63:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP54]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP64:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP63]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP65:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP64]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP66:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP65]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP67:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP66]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP68:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP67]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP69:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP68]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP70:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP69]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP71:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP62]], i32 16)
; CHECK-NEXT:    [[VST128IP72:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP71]], i32 16)
; CHECK-NEXT:    [[VST128IP73:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP72]], i32 16)
; CHECK-NEXT:    [[VST128IP74:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP73]], i32 16)
; CHECK-NEXT:    [[VST128IP75:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP74]], i32 16)
; CHECK-NEXT:    [[VST128IP76:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP75]], i32 16)
; CHECK-NEXT:    [[VST128IP77:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP76]], i32 16)
; CHECK-NEXT:    [[VST128IP78:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP77]], i32 16)
; CHECK-NEXT:    [[VLD128IP79:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP70]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP80:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP79]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP81:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP80]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP82:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP81]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP83:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP82]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP84:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP83]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP85:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP84]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP86:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP85]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP87:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP78]], i32 16)
; CHECK-NEXT:    [[VST128IP88:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP87]], i32 16)
; CHECK-NEXT:    [[VST128IP89:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP88]], i32 16)
; CHECK-NEXT:    [[VST128IP90:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP89]], i32 16)
; CHECK-NEXT:    [[VST128IP91:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP90]], i32 16)
; CHECK-NEXT:    [[VST128IP92:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP91]], i32 16)
; CHECK-NEXT:    [[VST128IP93:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP92]], i32 16)
; CHECK-NEXT:    [[VST128IP94:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP93]], i32 16)
; CHECK-NEXT:    [[VLD128IP95:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP86]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP96:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP95]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP97:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP96]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP98:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP97]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP99:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP98]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP100:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP99]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP101:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP100]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP102:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP101]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP103:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP94]], i32 16)
; CHECK-NEXT:    [[VST128IP104:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP103]], i32 16)
; CHECK-NEXT:    [[VST128IP105:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP104]], i32 16)
; CHECK-NEXT:    [[VST128IP106:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP105]], i32 16)
; CHECK-NEXT:    [[VST128IP107:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP106]], i32 16)
; CHECK-NEXT:    [[VST128IP108:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP107]], i32 16)
; CHECK-NEXT:    [[VST128IP109:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP108]], i32 16)
; CHECK-NEXT:    [[VST128IP110:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP109]], i32 16)
; CHECK-NEXT:    [[VLD128IP111:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP102]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP112:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP111]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP113:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP112]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP114:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP113]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP115:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP114]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP116:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP115]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP117:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP116]], i32 16, i32 6)
; CHECK-NEXT:    [[VST128IP118:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP110]], i32 16)
; CHECK-NEXT:    [[VST128IP119:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP118]], i32 16)
; CHECK-NEXT:    [[VST128IP120:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP119]], i32 16)
; CHECK-NEXT:    [[VST128IP121:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP120]], i32 16)
; CHECK-NEXT:    [[VST128IP122:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP121]], i32 16)
; CHECK-NEXT:    [[VST128IP123:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP122]], i32 16)
; CHECK-NEXT:    [[VST128IP124:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP123]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1023) %a, ptr noundef nonnull align 16 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src16_dst16_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP17:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP16]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP18:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP17]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP19:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP18]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP20:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP19]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP21:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP20]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP21]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP23:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP24:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP23]], i32 16)
; CHECK-NEXT:    [[VST128IP25:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP24]], i32 16)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP25]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    [[VST128IP28:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP27]], i32 16)
; CHECK-NEXT:    [[VST128IP29:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP28]], i32 16)
; CHECK-NEXT:    [[VST128IP30:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP29]], i32 16)
; CHECK-NEXT:    [[VLD128IP31:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP32:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP31]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP33:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP32]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP34:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP33]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP35:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP34]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP36:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP35]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP37:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP36]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP38:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP37]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP30]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    [[VST128IP46:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP45]], i32 16)
; CHECK-NEXT:    [[VLD128IP47:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP38]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP48:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP47]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP49:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP48]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP50:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP49]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP51:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP50]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP52:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP51]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP53:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP52]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP54:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP53]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP55:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP46]], i32 16)
; CHECK-NEXT:    [[VST128IP56:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP55]], i32 16)
; CHECK-NEXT:    [[VST128IP57:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP56]], i32 16)
; CHECK-NEXT:    [[VST128IP58:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP57]], i32 16)
; CHECK-NEXT:    [[VST128IP59:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP58]], i32 16)
; CHECK-NEXT:    [[VST128IP60:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP59]], i32 16)
; CHECK-NEXT:    [[VST128IP61:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP60]], i32 16)
; CHECK-NEXT:    [[VST128IP62:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP61]], i32 16)
; CHECK-NEXT:    [[VLD128IP63:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP54]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP64:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP63]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP65:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP64]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP66:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP65]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP67:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP66]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP68:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP67]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP69:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP68]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP70:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP69]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP71:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP62]], i32 16)
; CHECK-NEXT:    [[VST128IP72:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP71]], i32 16)
; CHECK-NEXT:    [[VST128IP73:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP72]], i32 16)
; CHECK-NEXT:    [[VST128IP74:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP73]], i32 16)
; CHECK-NEXT:    [[VST128IP75:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP74]], i32 16)
; CHECK-NEXT:    [[VST128IP76:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP75]], i32 16)
; CHECK-NEXT:    [[VST128IP77:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP76]], i32 16)
; CHECK-NEXT:    [[VST128IP78:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP77]], i32 16)
; CHECK-NEXT:    [[VLD128IP79:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP70]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP80:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP79]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP81:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP80]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP82:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP81]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP83:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP82]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP84:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP83]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP85:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP84]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP86:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP85]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP87:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP78]], i32 16)
; CHECK-NEXT:    [[VST128IP88:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP87]], i32 16)
; CHECK-NEXT:    [[VST128IP89:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP88]], i32 16)
; CHECK-NEXT:    [[VST128IP90:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP89]], i32 16)
; CHECK-NEXT:    [[VST128IP91:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP90]], i32 16)
; CHECK-NEXT:    [[VST128IP92:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP91]], i32 16)
; CHECK-NEXT:    [[VST128IP93:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP92]], i32 16)
; CHECK-NEXT:    [[VST128IP94:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP93]], i32 16)
; CHECK-NEXT:    [[VLD128IP95:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP86]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP96:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP95]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP97:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP96]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP98:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP97]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP99:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP98]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP100:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP99]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP101:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP100]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP102:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP101]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP103:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP94]], i32 16)
; CHECK-NEXT:    [[VST128IP104:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP103]], i32 16)
; CHECK-NEXT:    [[VST128IP105:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP104]], i32 16)
; CHECK-NEXT:    [[VST128IP106:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP105]], i32 16)
; CHECK-NEXT:    [[VST128IP107:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP106]], i32 16)
; CHECK-NEXT:    [[VST128IP108:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP107]], i32 16)
; CHECK-NEXT:    [[VST128IP109:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP108]], i32 16)
; CHECK-NEXT:    [[VST128IP110:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP109]], i32 16)
; CHECK-NEXT:    [[VLD128IP111:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP102]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP112:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP111]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP113:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP112]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP114:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP113]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP115:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP114]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP116:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP115]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP117:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP116]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP118:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP117]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP119:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP110]], i32 16)
; CHECK-NEXT:    [[VST128IP120:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP119]], i32 16)
; CHECK-NEXT:    [[VST128IP121:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP120]], i32 16)
; CHECK-NEXT:    [[VST128IP122:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP121]], i32 16)
; CHECK-NEXT:    [[VST128IP123:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP122]], i32 16)
; CHECK-NEXT:    [[VST128IP124:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP123]], i32 16)
; CHECK-NEXT:    [[VST128IP125:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP124]], i32 16)
; CHECK-NEXT:    [[VST128IP126:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP125]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1024) %a, ptr noundef nonnull align 16 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

define void @test_src16_dst16_size_20000(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst16_size_20000(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    call void @esp32p4MemCpySrc16Dst16Const16(i32 [[TMP1]], i32 [[TMP0]], i32 20000)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(20000) %a, ptr noundef nonnull align 16 dereferenceable(20000) %b, i32 20000, i1 false)
  ret void
}


; src16 dst8
define void @test_src16_dst8_size_1(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_1(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1) [[A]], ptr noundef nonnull align 16 dereferenceable(1) [[B]], i32 1, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1) %a, ptr noundef nonnull align 16 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src16_dst8_size_2(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_2(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(2) [[A]], ptr noundef nonnull align 16 dereferenceable(2) [[B]], i32 2, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(2) %a, ptr noundef nonnull align 16 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src16_dst8_size_3(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_3(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(3) [[A]], ptr noundef nonnull align 16 dereferenceable(3) [[B]], i32 3, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(3) %a, ptr noundef nonnull align 16 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src16_dst8_size_4(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_4(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(4) [[A]], ptr noundef nonnull align 16 dereferenceable(4) [[B]], i32 4, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(4) %a, ptr noundef nonnull align 16 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src16_dst8_size_5(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_5(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(5) [[A]], ptr noundef nonnull align 16 dereferenceable(5) [[B]], i32 5, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(5) %a, ptr noundef nonnull align 16 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src16_dst8_size_6(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_6(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(6) [[A]], ptr noundef nonnull align 16 dereferenceable(6) [[B]], i32 6, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(6) %a, ptr noundef nonnull align 16 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src16_dst8_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(7) %a, ptr noundef nonnull align 16 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src16_dst8_size_8(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_8(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(8) [[A]], ptr noundef nonnull align 16 dereferenceable(8) [[B]], i32 8, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(8) %a, ptr noundef nonnull align 16 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src16_dst8_size_9(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_9(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(9) [[A]], ptr noundef nonnull align 16 dereferenceable(9) [[B]], i32 9, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(9) %a, ptr noundef nonnull align 16 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src16_dst8_size_10(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_10(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(10) [[A]], ptr noundef nonnull align 16 dereferenceable(10) [[B]], i32 10, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(10) %a, ptr noundef nonnull align 16 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src16_dst8_size_11(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_11(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(11) [[A]], ptr noundef nonnull align 16 dereferenceable(11) [[B]], i32 11, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(11) %a, ptr noundef nonnull align 16 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src16_dst8_size_12(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_12(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(12) [[A]], ptr noundef nonnull align 16 dereferenceable(12) [[B]], i32 12, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(12) %a, ptr noundef nonnull align 16 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src16_dst8_size_13(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_13(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(13) [[A]], ptr noundef nonnull align 16 dereferenceable(13) [[B]], i32 13, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(13) %a, ptr noundef nonnull align 16 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src16_dst8_size_14(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src16_dst8_size_14(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(14) [[A]], ptr noundef nonnull align 16 dereferenceable(14) [[B]], i32 14, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src16_dst8_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(14) %a, ptr noundef nonnull align 16 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src16_dst8_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP9]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(15) %a, ptr noundef nonnull align 16 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src16_dst8_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(16) %a, ptr noundef nonnull align 16 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src16_dst8_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(17) %a, ptr noundef nonnull align 16 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src16_dst8_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP1:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(31) %a, ptr noundef nonnull align 16 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src16_dst8_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP2:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP2]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(32) %a, ptr noundef nonnull align 16 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src16_dst8_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP2:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP2]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(33) %a, ptr noundef nonnull align 16 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src16_dst8_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP2:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP2]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(47) %a, ptr noundef nonnull align 16 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src16_dst8_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP4]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(48) %a, ptr noundef nonnull align 16 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src16_dst8_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP4]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(49) %a, ptr noundef nonnull align 16 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src16_dst8_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP4]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(63) %a, ptr noundef nonnull align 16 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src16_dst8_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP4]], i32 8)
; CHECK-NEXT:    [[VSTL64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP5]], i32 8)
; CHECK-NEXT:    [[VSTH64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP6]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP7]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(64) %a, ptr noundef nonnull align 16 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src16_dst8_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP4]], i32 8)
; CHECK-NEXT:    [[VSTL64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP5]], i32 8)
; CHECK-NEXT:    [[VSTH64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP6]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP7]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(65) %a, ptr noundef nonnull align 16 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src16_dst8_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(80) %a, ptr noundef nonnull align 16 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src16_dst8_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(81) %a, ptr noundef nonnull align 16 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src16_dst8_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLD128IP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(88) %a, ptr noundef nonnull align 16 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src16_dst8_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP6]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP7]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(96) %a, ptr noundef nonnull align 16 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src16_dst8_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(112) %a, ptr noundef nonnull align 16 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src16_dst8_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(124) %a, ptr noundef nonnull align 16 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src16_dst8_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(127) %a, ptr noundef nonnull align 16 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src16_dst8_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(128) %a, ptr noundef nonnull align 16 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src16_dst8_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(129) %a, ptr noundef nonnull align 16 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src16_dst8_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP24:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP23]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP25:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP24]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP26:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP25]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP27:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP26]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP28:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP27]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP29:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP21]], i32 8)
; CHECK-NEXT:    [[VSTH64IP30:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP29]], i32 8)
; CHECK-NEXT:    [[VSTL64IP31:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP30]], i32 8)
; CHECK-NEXT:    [[VSTH64IP32:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP31]], i32 8)
; CHECK-NEXT:    [[VSTL64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP32]], i32 8)
; CHECK-NEXT:    [[VSTH64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP33]], i32 8)
; CHECK-NEXT:    [[VSTL64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP34]], i32 8)
; CHECK-NEXT:    [[VSTH64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP35]], i32 8)
; CHECK-NEXT:    [[VSTL64IP37:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP36]], i32 8)
; CHECK-NEXT:    [[VSTH64IP38:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP37]], i32 8)
; CHECK-NEXT:    [[VSTL64IP39:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP38]], i32 8)
; CHECK-NEXT:    [[VSTH64IP40:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP39]], i32 8)
; CHECK-NEXT:    [[VSTL64IP41:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP40]], i32 8)
; CHECK-NEXT:    [[VSTH64IP42:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP41]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(255) %a, ptr noundef nonnull align 16 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src16_dst8_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP24:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP23]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP25:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP24]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP26:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP25]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP27:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP26]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP28:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP27]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP29:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP28]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP30:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP21]], i32 8)
; CHECK-NEXT:    [[VSTH64IP31:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP30]], i32 8)
; CHECK-NEXT:    [[VSTL64IP32:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP31]], i32 8)
; CHECK-NEXT:    [[VSTH64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP32]], i32 8)
; CHECK-NEXT:    [[VSTL64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP33]], i32 8)
; CHECK-NEXT:    [[VSTH64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP34]], i32 8)
; CHECK-NEXT:    [[VSTL64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP35]], i32 8)
; CHECK-NEXT:    [[VSTH64IP37:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP36]], i32 8)
; CHECK-NEXT:    [[VSTL64IP38:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP37]], i32 8)
; CHECK-NEXT:    [[VSTH64IP39:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP38]], i32 8)
; CHECK-NEXT:    [[VSTL64IP40:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP39]], i32 8)
; CHECK-NEXT:    [[VSTH64IP41:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP40]], i32 8)
; CHECK-NEXT:    [[VSTL64IP42:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP41]], i32 8)
; CHECK-NEXT:    [[VSTH64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP42]], i32 8)
; CHECK-NEXT:    [[VSTL64IP44:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP43]], i32 8)
; CHECK-NEXT:    [[VSTH64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP44]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(256) %a, ptr noundef nonnull align 16 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src16_dst8_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP24:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP23]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP25:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP24]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP26:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP25]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP27:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP26]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP28:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP27]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP29:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP28]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP30:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP21]], i32 8)
; CHECK-NEXT:    [[VSTH64IP31:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP30]], i32 8)
; CHECK-NEXT:    [[VSTL64IP32:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP31]], i32 8)
; CHECK-NEXT:    [[VSTH64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP32]], i32 8)
; CHECK-NEXT:    [[VSTL64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP33]], i32 8)
; CHECK-NEXT:    [[VSTH64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP34]], i32 8)
; CHECK-NEXT:    [[VSTL64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP35]], i32 8)
; CHECK-NEXT:    [[VSTH64IP37:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP36]], i32 8)
; CHECK-NEXT:    [[VSTL64IP38:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP37]], i32 8)
; CHECK-NEXT:    [[VSTH64IP39:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP38]], i32 8)
; CHECK-NEXT:    [[VSTL64IP40:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP39]], i32 8)
; CHECK-NEXT:    [[VSTH64IP41:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP40]], i32 8)
; CHECK-NEXT:    [[VSTL64IP42:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP41]], i32 8)
; CHECK-NEXT:    [[VSTH64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP42]], i32 8)
; CHECK-NEXT:    [[VSTL64IP44:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP43]], i32 8)
; CHECK-NEXT:    [[VSTH64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP44]], i32 8)
; CHECK-NEXT:    [[VLD128IP46:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP29]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP47:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP46]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP48:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP47]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP49:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP48]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP50:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP49]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP51:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP50]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP52:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP51]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP53:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP52]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP45]], i32 8)
; CHECK-NEXT:    [[VSTH64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP54]], i32 8)
; CHECK-NEXT:    [[VSTL64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP55]], i32 8)
; CHECK-NEXT:    [[VSTH64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP56]], i32 8)
; CHECK-NEXT:    [[VSTL64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP57]], i32 8)
; CHECK-NEXT:    [[VSTH64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP58]], i32 8)
; CHECK-NEXT:    [[VSTL64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP59]], i32 8)
; CHECK-NEXT:    [[VSTH64IP61:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP60]], i32 8)
; CHECK-NEXT:    [[VSTL64IP62:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP61]], i32 8)
; CHECK-NEXT:    [[VSTH64IP63:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP62]], i32 8)
; CHECK-NEXT:    [[VSTL64IP64:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP63]], i32 8)
; CHECK-NEXT:    [[VSTH64IP65:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP64]], i32 8)
; CHECK-NEXT:    [[VSTL64IP66:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP65]], i32 8)
; CHECK-NEXT:    [[VSTH64IP67:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP66]], i32 8)
; CHECK-NEXT:    [[VSTL64IP68:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP67]], i32 8)
; CHECK-NEXT:    [[VSTH64IP69:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP68]], i32 8)
; CHECK-NEXT:    [[VLD128IP70:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP53]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP71:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP70]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP72:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP71]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP73:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP72]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP74:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP73]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP75:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP74]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP76:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP75]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP77:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP76]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP78:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP69]], i32 8)
; CHECK-NEXT:    [[VSTH64IP79:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP78]], i32 8)
; CHECK-NEXT:    [[VSTL64IP80:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP79]], i32 8)
; CHECK-NEXT:    [[VSTH64IP81:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP80]], i32 8)
; CHECK-NEXT:    [[VSTL64IP82:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP81]], i32 8)
; CHECK-NEXT:    [[VSTH64IP83:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP82]], i32 8)
; CHECK-NEXT:    [[VSTL64IP84:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP83]], i32 8)
; CHECK-NEXT:    [[VSTH64IP85:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP84]], i32 8)
; CHECK-NEXT:    [[VSTL64IP86:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP85]], i32 8)
; CHECK-NEXT:    [[VSTH64IP87:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP86]], i32 8)
; CHECK-NEXT:    [[VSTL64IP88:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP87]], i32 8)
; CHECK-NEXT:    [[VSTH64IP89:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP88]], i32 8)
; CHECK-NEXT:    [[VSTL64IP90:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP89]], i32 8)
; CHECK-NEXT:    [[VSTH64IP91:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP90]], i32 8)
; CHECK-NEXT:    [[VSTL64IP92:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP91]], i32 8)
; CHECK-NEXT:    [[VSTH64IP93:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP92]], i32 8)
; CHECK-NEXT:    [[VLD128IP94:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP77]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP95:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP94]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP96:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP95]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP97:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP96]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP98:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP97]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP99:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP98]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP100:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP99]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP101:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP100]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP102:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP93]], i32 8)
; CHECK-NEXT:    [[VSTH64IP103:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP102]], i32 8)
; CHECK-NEXT:    [[VSTL64IP104:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP103]], i32 8)
; CHECK-NEXT:    [[VSTH64IP105:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP104]], i32 8)
; CHECK-NEXT:    [[VSTL64IP106:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP105]], i32 8)
; CHECK-NEXT:    [[VSTH64IP107:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP106]], i32 8)
; CHECK-NEXT:    [[VSTL64IP108:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP107]], i32 8)
; CHECK-NEXT:    [[VSTH64IP109:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP108]], i32 8)
; CHECK-NEXT:    [[VSTL64IP110:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP109]], i32 8)
; CHECK-NEXT:    [[VSTH64IP111:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP110]], i32 8)
; CHECK-NEXT:    [[VSTL64IP112:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP111]], i32 8)
; CHECK-NEXT:    [[VSTH64IP113:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP112]], i32 8)
; CHECK-NEXT:    [[VSTL64IP114:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP113]], i32 8)
; CHECK-NEXT:    [[VSTH64IP115:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP114]], i32 8)
; CHECK-NEXT:    [[VSTL64IP116:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP115]], i32 8)
; CHECK-NEXT:    [[VSTH64IP117:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP116]], i32 8)
; CHECK-NEXT:    [[VLD128IP118:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP101]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP119:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP118]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP120:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP119]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP121:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP120]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP122:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP121]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP123:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP122]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP124:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP123]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP125:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP124]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP126:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP117]], i32 8)
; CHECK-NEXT:    [[VSTH64IP127:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP126]], i32 8)
; CHECK-NEXT:    [[VSTL64IP128:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP127]], i32 8)
; CHECK-NEXT:    [[VSTH64IP129:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP128]], i32 8)
; CHECK-NEXT:    [[VSTL64IP130:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP129]], i32 8)
; CHECK-NEXT:    [[VSTH64IP131:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP130]], i32 8)
; CHECK-NEXT:    [[VSTL64IP132:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP131]], i32 8)
; CHECK-NEXT:    [[VSTH64IP133:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP132]], i32 8)
; CHECK-NEXT:    [[VSTL64IP134:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP133]], i32 8)
; CHECK-NEXT:    [[VSTH64IP135:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP134]], i32 8)
; CHECK-NEXT:    [[VSTL64IP136:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP135]], i32 8)
; CHECK-NEXT:    [[VSTH64IP137:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP136]], i32 8)
; CHECK-NEXT:    [[VSTL64IP138:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP137]], i32 8)
; CHECK-NEXT:    [[VSTH64IP139:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP138]], i32 8)
; CHECK-NEXT:    [[VSTL64IP140:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP139]], i32 8)
; CHECK-NEXT:    [[VSTH64IP141:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP140]], i32 8)
; CHECK-NEXT:    [[VLD128IP142:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP125]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP143:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP142]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP144:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP143]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP145:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP144]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP146:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP145]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP147:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP146]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP148:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP147]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP149:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP148]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP150:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP141]], i32 8)
; CHECK-NEXT:    [[VSTH64IP151:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP150]], i32 8)
; CHECK-NEXT:    [[VSTL64IP152:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP151]], i32 8)
; CHECK-NEXT:    [[VSTH64IP153:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP152]], i32 8)
; CHECK-NEXT:    [[VSTL64IP154:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP153]], i32 8)
; CHECK-NEXT:    [[VSTH64IP155:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP154]], i32 8)
; CHECK-NEXT:    [[VSTL64IP156:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP155]], i32 8)
; CHECK-NEXT:    [[VSTH64IP157:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP156]], i32 8)
; CHECK-NEXT:    [[VSTL64IP158:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP157]], i32 8)
; CHECK-NEXT:    [[VSTH64IP159:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP158]], i32 8)
; CHECK-NEXT:    [[VSTL64IP160:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP159]], i32 8)
; CHECK-NEXT:    [[VSTH64IP161:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP160]], i32 8)
; CHECK-NEXT:    [[VSTL64IP162:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP161]], i32 8)
; CHECK-NEXT:    [[VSTH64IP163:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP162]], i32 8)
; CHECK-NEXT:    [[VSTL64IP164:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP163]], i32 8)
; CHECK-NEXT:    [[VSTH64IP165:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP164]], i32 8)
; CHECK-NEXT:    [[VLD128IP166:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP149]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP167:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP166]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP168:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP167]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP169:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP168]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP170:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP169]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP171:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP170]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP172:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP171]], i32 16, i32 6)
; CHECK-NEXT:    [[VSTL64IP173:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP165]], i32 8)
; CHECK-NEXT:    [[VSTH64IP174:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP173]], i32 8)
; CHECK-NEXT:    [[VSTL64IP175:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP174]], i32 8)
; CHECK-NEXT:    [[VSTH64IP176:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP175]], i32 8)
; CHECK-NEXT:    [[VSTL64IP177:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP176]], i32 8)
; CHECK-NEXT:    [[VSTH64IP178:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP177]], i32 8)
; CHECK-NEXT:    [[VSTL64IP179:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP178]], i32 8)
; CHECK-NEXT:    [[VSTH64IP180:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP179]], i32 8)
; CHECK-NEXT:    [[VSTL64IP181:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP180]], i32 8)
; CHECK-NEXT:    [[VSTH64IP182:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP181]], i32 8)
; CHECK-NEXT:    [[VSTL64IP183:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP182]], i32 8)
; CHECK-NEXT:    [[VSTH64IP184:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP183]], i32 8)
; CHECK-NEXT:    [[VSTL64IP185:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP184]], i32 8)
; CHECK-NEXT:    [[VSTH64IP186:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP185]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP187:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1023) %a, ptr noundef nonnull align 16 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src16_dst8_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[TMP0]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP7]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP24:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP23]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP25:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP24]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP26:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP25]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP27:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP26]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP28:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP27]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP29:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP28]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP30:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP21]], i32 8)
; CHECK-NEXT:    [[VSTH64IP31:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP30]], i32 8)
; CHECK-NEXT:    [[VSTL64IP32:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP31]], i32 8)
; CHECK-NEXT:    [[VSTH64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP32]], i32 8)
; CHECK-NEXT:    [[VSTL64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP33]], i32 8)
; CHECK-NEXT:    [[VSTH64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP34]], i32 8)
; CHECK-NEXT:    [[VSTL64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP35]], i32 8)
; CHECK-NEXT:    [[VSTH64IP37:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP36]], i32 8)
; CHECK-NEXT:    [[VSTL64IP38:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP37]], i32 8)
; CHECK-NEXT:    [[VSTH64IP39:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP38]], i32 8)
; CHECK-NEXT:    [[VSTL64IP40:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP39]], i32 8)
; CHECK-NEXT:    [[VSTH64IP41:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP40]], i32 8)
; CHECK-NEXT:    [[VSTL64IP42:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP41]], i32 8)
; CHECK-NEXT:    [[VSTH64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP42]], i32 8)
; CHECK-NEXT:    [[VSTL64IP44:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP43]], i32 8)
; CHECK-NEXT:    [[VSTH64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP44]], i32 8)
; CHECK-NEXT:    [[VLD128IP46:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP29]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP47:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP46]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP48:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP47]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP49:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP48]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP50:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP49]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP51:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP50]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP52:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP51]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP53:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP52]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP45]], i32 8)
; CHECK-NEXT:    [[VSTH64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP54]], i32 8)
; CHECK-NEXT:    [[VSTL64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP55]], i32 8)
; CHECK-NEXT:    [[VSTH64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP56]], i32 8)
; CHECK-NEXT:    [[VSTL64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP57]], i32 8)
; CHECK-NEXT:    [[VSTH64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP58]], i32 8)
; CHECK-NEXT:    [[VSTL64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP59]], i32 8)
; CHECK-NEXT:    [[VSTH64IP61:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP60]], i32 8)
; CHECK-NEXT:    [[VSTL64IP62:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP61]], i32 8)
; CHECK-NEXT:    [[VSTH64IP63:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP62]], i32 8)
; CHECK-NEXT:    [[VSTL64IP64:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP63]], i32 8)
; CHECK-NEXT:    [[VSTH64IP65:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP64]], i32 8)
; CHECK-NEXT:    [[VSTL64IP66:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP65]], i32 8)
; CHECK-NEXT:    [[VSTH64IP67:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP66]], i32 8)
; CHECK-NEXT:    [[VSTL64IP68:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP67]], i32 8)
; CHECK-NEXT:    [[VSTH64IP69:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP68]], i32 8)
; CHECK-NEXT:    [[VLD128IP70:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP53]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP71:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP70]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP72:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP71]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP73:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP72]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP74:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP73]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP75:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP74]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP76:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP75]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP77:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP76]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP78:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP69]], i32 8)
; CHECK-NEXT:    [[VSTH64IP79:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP78]], i32 8)
; CHECK-NEXT:    [[VSTL64IP80:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP79]], i32 8)
; CHECK-NEXT:    [[VSTH64IP81:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP80]], i32 8)
; CHECK-NEXT:    [[VSTL64IP82:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP81]], i32 8)
; CHECK-NEXT:    [[VSTH64IP83:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP82]], i32 8)
; CHECK-NEXT:    [[VSTL64IP84:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP83]], i32 8)
; CHECK-NEXT:    [[VSTH64IP85:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP84]], i32 8)
; CHECK-NEXT:    [[VSTL64IP86:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP85]], i32 8)
; CHECK-NEXT:    [[VSTH64IP87:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP86]], i32 8)
; CHECK-NEXT:    [[VSTL64IP88:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP87]], i32 8)
; CHECK-NEXT:    [[VSTH64IP89:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP88]], i32 8)
; CHECK-NEXT:    [[VSTL64IP90:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP89]], i32 8)
; CHECK-NEXT:    [[VSTH64IP91:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP90]], i32 8)
; CHECK-NEXT:    [[VSTL64IP92:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP91]], i32 8)
; CHECK-NEXT:    [[VSTH64IP93:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP92]], i32 8)
; CHECK-NEXT:    [[VLD128IP94:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP77]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP95:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP94]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP96:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP95]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP97:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP96]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP98:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP97]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP99:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP98]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP100:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP99]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP101:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP100]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP102:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP93]], i32 8)
; CHECK-NEXT:    [[VSTH64IP103:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP102]], i32 8)
; CHECK-NEXT:    [[VSTL64IP104:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP103]], i32 8)
; CHECK-NEXT:    [[VSTH64IP105:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP104]], i32 8)
; CHECK-NEXT:    [[VSTL64IP106:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP105]], i32 8)
; CHECK-NEXT:    [[VSTH64IP107:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP106]], i32 8)
; CHECK-NEXT:    [[VSTL64IP108:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP107]], i32 8)
; CHECK-NEXT:    [[VSTH64IP109:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP108]], i32 8)
; CHECK-NEXT:    [[VSTL64IP110:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP109]], i32 8)
; CHECK-NEXT:    [[VSTH64IP111:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP110]], i32 8)
; CHECK-NEXT:    [[VSTL64IP112:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP111]], i32 8)
; CHECK-NEXT:    [[VSTH64IP113:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP112]], i32 8)
; CHECK-NEXT:    [[VSTL64IP114:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP113]], i32 8)
; CHECK-NEXT:    [[VSTH64IP115:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP114]], i32 8)
; CHECK-NEXT:    [[VSTL64IP116:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP115]], i32 8)
; CHECK-NEXT:    [[VSTH64IP117:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP116]], i32 8)
; CHECK-NEXT:    [[VLD128IP118:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP101]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP119:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP118]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP120:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP119]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP121:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP120]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP122:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP121]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP123:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP122]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP124:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP123]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP125:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP124]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP126:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP117]], i32 8)
; CHECK-NEXT:    [[VSTH64IP127:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP126]], i32 8)
; CHECK-NEXT:    [[VSTL64IP128:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP127]], i32 8)
; CHECK-NEXT:    [[VSTH64IP129:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP128]], i32 8)
; CHECK-NEXT:    [[VSTL64IP130:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP129]], i32 8)
; CHECK-NEXT:    [[VSTH64IP131:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP130]], i32 8)
; CHECK-NEXT:    [[VSTL64IP132:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP131]], i32 8)
; CHECK-NEXT:    [[VSTH64IP133:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP132]], i32 8)
; CHECK-NEXT:    [[VSTL64IP134:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP133]], i32 8)
; CHECK-NEXT:    [[VSTH64IP135:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP134]], i32 8)
; CHECK-NEXT:    [[VSTL64IP136:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP135]], i32 8)
; CHECK-NEXT:    [[VSTH64IP137:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP136]], i32 8)
; CHECK-NEXT:    [[VSTL64IP138:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP137]], i32 8)
; CHECK-NEXT:    [[VSTH64IP139:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP138]], i32 8)
; CHECK-NEXT:    [[VSTL64IP140:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP139]], i32 8)
; CHECK-NEXT:    [[VSTH64IP141:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP140]], i32 8)
; CHECK-NEXT:    [[VLD128IP142:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP125]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP143:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP142]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP144:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP143]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP145:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP144]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP146:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP145]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP147:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP146]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP148:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP147]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP149:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP148]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP150:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP141]], i32 8)
; CHECK-NEXT:    [[VSTH64IP151:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP150]], i32 8)
; CHECK-NEXT:    [[VSTL64IP152:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP151]], i32 8)
; CHECK-NEXT:    [[VSTH64IP153:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP152]], i32 8)
; CHECK-NEXT:    [[VSTL64IP154:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP153]], i32 8)
; CHECK-NEXT:    [[VSTH64IP155:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP154]], i32 8)
; CHECK-NEXT:    [[VSTL64IP156:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP155]], i32 8)
; CHECK-NEXT:    [[VSTH64IP157:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP156]], i32 8)
; CHECK-NEXT:    [[VSTL64IP158:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP157]], i32 8)
; CHECK-NEXT:    [[VSTH64IP159:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP158]], i32 8)
; CHECK-NEXT:    [[VSTL64IP160:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP159]], i32 8)
; CHECK-NEXT:    [[VSTH64IP161:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP160]], i32 8)
; CHECK-NEXT:    [[VSTL64IP162:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP161]], i32 8)
; CHECK-NEXT:    [[VSTH64IP163:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP162]], i32 8)
; CHECK-NEXT:    [[VSTL64IP164:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP163]], i32 8)
; CHECK-NEXT:    [[VSTH64IP165:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP164]], i32 8)
; CHECK-NEXT:    [[VLD128IP166:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP149]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP167:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP166]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP168:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP167]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP169:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP168]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP170:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP169]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP171:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP170]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP172:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP171]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP173:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP172]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP174:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP165]], i32 8)
; CHECK-NEXT:    [[VSTH64IP175:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP174]], i32 8)
; CHECK-NEXT:    [[VSTL64IP176:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP175]], i32 8)
; CHECK-NEXT:    [[VSTH64IP177:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP176]], i32 8)
; CHECK-NEXT:    [[VSTL64IP178:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP177]], i32 8)
; CHECK-NEXT:    [[VSTH64IP179:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP178]], i32 8)
; CHECK-NEXT:    [[VSTL64IP180:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP179]], i32 8)
; CHECK-NEXT:    [[VSTH64IP181:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP180]], i32 8)
; CHECK-NEXT:    [[VSTL64IP182:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP181]], i32 8)
; CHECK-NEXT:    [[VSTH64IP183:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP182]], i32 8)
; CHECK-NEXT:    [[VSTL64IP184:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP183]], i32 8)
; CHECK-NEXT:    [[VSTH64IP185:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP184]], i32 8)
; CHECK-NEXT:    [[VSTL64IP186:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP185]], i32 8)
; CHECK-NEXT:    [[VSTH64IP187:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP186]], i32 8)
; CHECK-NEXT:    [[VSTL64IP188:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP187]], i32 8)
; CHECK-NEXT:    [[VSTH64IP189:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP188]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1024) %a, ptr noundef nonnull align 16 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

define void @test_src16_dst8_size_20000(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src16_dst8_size_20000(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    call void @esp32p4MemCpySrc16Dst8Const16(i32 [[TMP1]], i32 [[TMP0]], i32 20000)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(20000) %a, ptr noundef nonnull align 16 dereferenceable(20000) %b, i32 20000, i1 false)
  ret void
}

; src8 dst16
define void @test_src8_dst16_size_1(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1) %a, ptr noundef nonnull align 8 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src8_dst16_size_2(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_2(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(2) [[A]], ptr noundef nonnull align 8 dereferenceable(2) [[B]], i32 2, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(2) %a, ptr noundef nonnull align 8 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src8_dst16_size_3(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_3(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(3) [[A]], ptr noundef nonnull align 8 dereferenceable(3) [[B]], i32 3, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(3) %a, ptr noundef nonnull align 8 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src8_dst16_size_4(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_4(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(4) [[A]], ptr noundef nonnull align 8 dereferenceable(4) [[B]], i32 4, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(4) %a, ptr noundef nonnull align 8 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src8_dst16_size_5(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_5(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(5) [[A]], ptr noundef nonnull align 8 dereferenceable(5) [[B]], i32 5, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(5) %a, ptr noundef nonnull align 8 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src8_dst16_size_6(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_6(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(6) [[A]], ptr noundef nonnull align 8 dereferenceable(6) [[B]], i32 6, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(6) %a, ptr noundef nonnull align 8 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src8_dst16_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(7) %a, ptr noundef nonnull align 8 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src8_dst16_size_8(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_8(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(8) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[B]], i32 8, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(8) %a, ptr noundef nonnull align 8 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src8_dst16_size_9(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_9(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(9) [[A]], ptr noundef nonnull align 8 dereferenceable(9) [[B]], i32 9, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(9) %a, ptr noundef nonnull align 8 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src8_dst16_size_10(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_10(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(10) [[A]], ptr noundef nonnull align 8 dereferenceable(10) [[B]], i32 10, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(10) %a, ptr noundef nonnull align 8 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src8_dst16_size_11(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_11(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(11) [[A]], ptr noundef nonnull align 8 dereferenceable(11) [[B]], i32 11, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(11) %a, ptr noundef nonnull align 8 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src8_dst16_size_12(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_12(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(12) [[A]], ptr noundef nonnull align 8 dereferenceable(12) [[B]], i32 12, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(12) %a, ptr noundef nonnull align 8 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src8_dst16_size_13(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_13(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(13) [[A]], ptr noundef nonnull align 8 dereferenceable(13) [[B]], i32 13, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(13) %a, ptr noundef nonnull align 8 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src8_dst16_size_14(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst16_size_14(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(14) [[A]], ptr noundef nonnull align 8 dereferenceable(14) [[B]], i32 14, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst16_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(14) %a, ptr noundef nonnull align 8 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src8_dst16_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP9]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(15) %a, ptr noundef nonnull align 8 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src8_dst16_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(16) %a, ptr noundef nonnull align 8 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src8_dst16_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(17) %a, ptr noundef nonnull align 8 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src8_dst16_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(31) %a, ptr noundef nonnull align 8 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src8_dst16_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(32) %a, ptr noundef nonnull align 8 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src8_dst16_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(33) %a, ptr noundef nonnull align 8 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src8_dst16_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP3:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(47) %a, ptr noundef nonnull align 8 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src8_dst16_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(48) %a, ptr noundef nonnull align 8 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src8_dst16_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(49) %a, ptr noundef nonnull align 8 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src8_dst16_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP5:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP6:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP5]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(63) %a, ptr noundef nonnull align 8 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src8_dst16_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(64) %a, ptr noundef nonnull align 8 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src8_dst16_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP7:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP7]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(65) %a, ptr noundef nonnull align 8 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src8_dst16_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(80) %a, ptr noundef nonnull align 8 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src8_dst16_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(81) %a, ptr noundef nonnull align 8 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src8_dst16_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VST128IP12]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(88) %a, ptr noundef nonnull align 8 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src8_dst16_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(96) %a, ptr noundef nonnull align 8 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src8_dst16_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(112) %a, ptr noundef nonnull align 8 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src8_dst16_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP19:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(124) %a, ptr noundef nonnull align 8 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src8_dst16_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP14:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP14]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP19:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(127) %a, ptr noundef nonnull align 8 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src8_dst16_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(128) %a, ptr noundef nonnull align 8 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src8_dst16_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(129) %a, ptr noundef nonnull align 8 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src8_dst16_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP26:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP25]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP27:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP26]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP28:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP27]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP28]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP29]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP30]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP31]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP32]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP33]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP34]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP36:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP21]], i32 16)
; CHECK-NEXT:    [[VST128IP37:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP36]], i32 16)
; CHECK-NEXT:    [[VST128IP38:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP37]], i32 16)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP38]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP43:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(255) %a, ptr noundef nonnull align 8 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src8_dst16_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP26:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP25]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP27:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP26]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP28:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP27]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP28]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP29]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP30]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP31]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP32]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP33]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP34]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP35]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP36]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP38:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP21]], i32 16)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP38]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(256) %a, ptr noundef nonnull align 8 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src8_dst16_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP26:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP25]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP27:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP26]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP28:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP27]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP28]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP29]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP30]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP31]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP32]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP33]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP34]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP35]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP36]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP38:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP21]], i32 16)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP38]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    [[VLDL64IP46:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP37]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP47:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP46]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP48:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP47]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP49:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP48]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP50:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP49]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP51:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP50]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP52:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP51]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP53:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP52]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP54:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP53]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP55:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP54]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP56:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP55]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP57:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP56]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP58:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP57]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP59:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP58]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP60:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP59]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP61:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP60]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP62:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP45]], i32 16)
; CHECK-NEXT:    [[VST128IP63:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP62]], i32 16)
; CHECK-NEXT:    [[VST128IP64:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP63]], i32 16)
; CHECK-NEXT:    [[VST128IP65:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP64]], i32 16)
; CHECK-NEXT:    [[VST128IP66:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP65]], i32 16)
; CHECK-NEXT:    [[VST128IP67:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP66]], i32 16)
; CHECK-NEXT:    [[VST128IP68:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP67]], i32 16)
; CHECK-NEXT:    [[VST128IP69:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP68]], i32 16)
; CHECK-NEXT:    [[VLDL64IP70:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP61]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP71:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP70]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP72:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP71]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP73:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP72]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP74:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP73]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP75:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP74]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP76:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP75]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP77:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP76]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP78:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP77]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP79:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP78]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP80:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP79]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP81:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP80]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP82:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP81]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP83:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP82]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP84:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP83]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP85:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP84]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP86:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP69]], i32 16)
; CHECK-NEXT:    [[VST128IP87:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP86]], i32 16)
; CHECK-NEXT:    [[VST128IP88:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP87]], i32 16)
; CHECK-NEXT:    [[VST128IP89:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP88]], i32 16)
; CHECK-NEXT:    [[VST128IP90:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP89]], i32 16)
; CHECK-NEXT:    [[VST128IP91:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP90]], i32 16)
; CHECK-NEXT:    [[VST128IP92:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP91]], i32 16)
; CHECK-NEXT:    [[VST128IP93:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP92]], i32 16)
; CHECK-NEXT:    [[VLDL64IP94:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP85]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP95:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP94]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP96:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP95]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP97:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP96]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP98:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP97]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP99:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP98]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP100:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP99]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP101:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP100]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP102:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP101]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP103:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP102]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP104:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP103]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP105:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP104]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP106:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP105]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP107:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP106]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP108:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP107]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP109:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP108]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP110:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP93]], i32 16)
; CHECK-NEXT:    [[VST128IP111:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP110]], i32 16)
; CHECK-NEXT:    [[VST128IP112:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP111]], i32 16)
; CHECK-NEXT:    [[VST128IP113:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP112]], i32 16)
; CHECK-NEXT:    [[VST128IP114:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP113]], i32 16)
; CHECK-NEXT:    [[VST128IP115:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP114]], i32 16)
; CHECK-NEXT:    [[VST128IP116:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP115]], i32 16)
; CHECK-NEXT:    [[VST128IP117:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP116]], i32 16)
; CHECK-NEXT:    [[VLDL64IP118:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP109]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP119:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP118]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP120:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP119]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP121:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP120]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP122:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP121]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP123:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP122]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP124:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP123]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP125:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP124]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP126:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP125]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP127:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP126]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP128:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP127]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP129:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP128]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP130:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP129]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP131:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP130]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP132:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP131]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP133:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP132]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP134:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP117]], i32 16)
; CHECK-NEXT:    [[VST128IP135:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP134]], i32 16)
; CHECK-NEXT:    [[VST128IP136:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP135]], i32 16)
; CHECK-NEXT:    [[VST128IP137:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP136]], i32 16)
; CHECK-NEXT:    [[VST128IP138:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP137]], i32 16)
; CHECK-NEXT:    [[VST128IP139:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP138]], i32 16)
; CHECK-NEXT:    [[VST128IP140:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP139]], i32 16)
; CHECK-NEXT:    [[VST128IP141:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP140]], i32 16)
; CHECK-NEXT:    [[VLDL64IP142:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP133]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP143:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP142]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP144:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP143]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP145:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP144]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP146:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP145]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP147:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP146]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP148:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP147]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP149:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP148]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP150:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP149]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP151:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP150]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP152:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP151]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP153:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP152]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP154:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP153]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP155:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP154]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP156:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP155]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP157:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP156]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP158:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP141]], i32 16)
; CHECK-NEXT:    [[VST128IP159:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP158]], i32 16)
; CHECK-NEXT:    [[VST128IP160:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP159]], i32 16)
; CHECK-NEXT:    [[VST128IP161:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP160]], i32 16)
; CHECK-NEXT:    [[VST128IP162:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP161]], i32 16)
; CHECK-NEXT:    [[VST128IP163:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP162]], i32 16)
; CHECK-NEXT:    [[VST128IP164:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP163]], i32 16)
; CHECK-NEXT:    [[VST128IP165:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP164]], i32 16)
; CHECK-NEXT:    [[VLDL64IP166:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP157]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP167:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP166]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP168:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP167]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP169:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP168]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP170:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP169]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP171:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP170]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP172:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP171]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP173:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP172]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP174:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP173]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP175:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP174]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP176:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP175]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP177:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP176]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP178:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP177]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP179:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP178]], i32 8, i32 6)
; CHECK-NEXT:    [[VST128IP180:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP165]], i32 16)
; CHECK-NEXT:    [[VST128IP181:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP180]], i32 16)
; CHECK-NEXT:    [[VST128IP182:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP181]], i32 16)
; CHECK-NEXT:    [[VST128IP183:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP182]], i32 16)
; CHECK-NEXT:    [[VST128IP184:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP183]], i32 16)
; CHECK-NEXT:    [[VST128IP185:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP184]], i32 16)
; CHECK-NEXT:    [[VST128IP186:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP185]], i32 16)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP187:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1023) %a, ptr noundef nonnull align 8 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src8_dst16_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[TMP1]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP26:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP25]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP27:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP26]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP28:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP27]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP28]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP29]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP30]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP31]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP32]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP33]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP34]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP35]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP36]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP38:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP21]], i32 16)
; CHECK-NEXT:    [[VST128IP39:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP38]], i32 16)
; CHECK-NEXT:    [[VST128IP40:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP39]], i32 16)
; CHECK-NEXT:    [[VST128IP41:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP40]], i32 16)
; CHECK-NEXT:    [[VST128IP42:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP41]], i32 16)
; CHECK-NEXT:    [[VST128IP43:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP42]], i32 16)
; CHECK-NEXT:    [[VST128IP44:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP43]], i32 16)
; CHECK-NEXT:    [[VST128IP45:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP44]], i32 16)
; CHECK-NEXT:    [[VLDL64IP46:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP37]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP47:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP46]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP48:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP47]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP49:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP48]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP50:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP49]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP51:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP50]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP52:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP51]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP53:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP52]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP54:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP53]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP55:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP54]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP56:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP55]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP57:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP56]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP58:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP57]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP59:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP58]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP60:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP59]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP61:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP60]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP62:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP45]], i32 16)
; CHECK-NEXT:    [[VST128IP63:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP62]], i32 16)
; CHECK-NEXT:    [[VST128IP64:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP63]], i32 16)
; CHECK-NEXT:    [[VST128IP65:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP64]], i32 16)
; CHECK-NEXT:    [[VST128IP66:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP65]], i32 16)
; CHECK-NEXT:    [[VST128IP67:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP66]], i32 16)
; CHECK-NEXT:    [[VST128IP68:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP67]], i32 16)
; CHECK-NEXT:    [[VST128IP69:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP68]], i32 16)
; CHECK-NEXT:    [[VLDL64IP70:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP61]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP71:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP70]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP72:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP71]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP73:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP72]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP74:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP73]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP75:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP74]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP76:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP75]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP77:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP76]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP78:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP77]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP79:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP78]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP80:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP79]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP81:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP80]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP82:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP81]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP83:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP82]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP84:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP83]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP85:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP84]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP86:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP69]], i32 16)
; CHECK-NEXT:    [[VST128IP87:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP86]], i32 16)
; CHECK-NEXT:    [[VST128IP88:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP87]], i32 16)
; CHECK-NEXT:    [[VST128IP89:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP88]], i32 16)
; CHECK-NEXT:    [[VST128IP90:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP89]], i32 16)
; CHECK-NEXT:    [[VST128IP91:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP90]], i32 16)
; CHECK-NEXT:    [[VST128IP92:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP91]], i32 16)
; CHECK-NEXT:    [[VST128IP93:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP92]], i32 16)
; CHECK-NEXT:    [[VLDL64IP94:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP85]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP95:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP94]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP96:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP95]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP97:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP96]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP98:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP97]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP99:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP98]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP100:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP99]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP101:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP100]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP102:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP101]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP103:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP102]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP104:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP103]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP105:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP104]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP106:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP105]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP107:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP106]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP108:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP107]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP109:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP108]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP110:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP93]], i32 16)
; CHECK-NEXT:    [[VST128IP111:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP110]], i32 16)
; CHECK-NEXT:    [[VST128IP112:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP111]], i32 16)
; CHECK-NEXT:    [[VST128IP113:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP112]], i32 16)
; CHECK-NEXT:    [[VST128IP114:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP113]], i32 16)
; CHECK-NEXT:    [[VST128IP115:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP114]], i32 16)
; CHECK-NEXT:    [[VST128IP116:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP115]], i32 16)
; CHECK-NEXT:    [[VST128IP117:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP116]], i32 16)
; CHECK-NEXT:    [[VLDL64IP118:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP109]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP119:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP118]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP120:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP119]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP121:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP120]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP122:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP121]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP123:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP122]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP124:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP123]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP125:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP124]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP126:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP125]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP127:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP126]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP128:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP127]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP129:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP128]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP130:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP129]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP131:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP130]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP132:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP131]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP133:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP132]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP134:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP117]], i32 16)
; CHECK-NEXT:    [[VST128IP135:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP134]], i32 16)
; CHECK-NEXT:    [[VST128IP136:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP135]], i32 16)
; CHECK-NEXT:    [[VST128IP137:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP136]], i32 16)
; CHECK-NEXT:    [[VST128IP138:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP137]], i32 16)
; CHECK-NEXT:    [[VST128IP139:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP138]], i32 16)
; CHECK-NEXT:    [[VST128IP140:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP139]], i32 16)
; CHECK-NEXT:    [[VST128IP141:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP140]], i32 16)
; CHECK-NEXT:    [[VLDL64IP142:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP133]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP143:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP142]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP144:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP143]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP145:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP144]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP146:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP145]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP147:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP146]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP148:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP147]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP149:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP148]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP150:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP149]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP151:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP150]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP152:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP151]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP153:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP152]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP154:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP153]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP155:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP154]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP156:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP155]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP157:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP156]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP158:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP141]], i32 16)
; CHECK-NEXT:    [[VST128IP159:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP158]], i32 16)
; CHECK-NEXT:    [[VST128IP160:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP159]], i32 16)
; CHECK-NEXT:    [[VST128IP161:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP160]], i32 16)
; CHECK-NEXT:    [[VST128IP162:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP161]], i32 16)
; CHECK-NEXT:    [[VST128IP163:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP162]], i32 16)
; CHECK-NEXT:    [[VST128IP164:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP163]], i32 16)
; CHECK-NEXT:    [[VST128IP165:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP164]], i32 16)
; CHECK-NEXT:    [[VLDL64IP166:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP157]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP167:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP166]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP168:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP167]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP169:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP168]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP170:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP169]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP171:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP170]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP172:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP171]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP173:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP172]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP174:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP173]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP175:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP174]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP176:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP175]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP177:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP176]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP178:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP177]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP179:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP178]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP180:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP179]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP181:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP180]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP182:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[VST128IP165]], i32 16)
; CHECK-NEXT:    [[VST128IP183:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP182]], i32 16)
; CHECK-NEXT:    [[VST128IP184:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP183]], i32 16)
; CHECK-NEXT:    [[VST128IP185:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP184]], i32 16)
; CHECK-NEXT:    [[VST128IP186:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP185]], i32 16)
; CHECK-NEXT:    [[VST128IP187:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP186]], i32 16)
; CHECK-NEXT:    [[VST128IP188:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP187]], i32 16)
; CHECK-NEXT:    [[VST128IP189:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP188]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(1024) %a, ptr noundef nonnull align 8 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

define void @test_src8_dst16_size_20000(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst16_size_20000(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    call void @esp32p4MemCpySrc8Dst16Const16(i32 [[TMP1]], i32 [[TMP0]], i32 20000)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 16 dereferenceable(20000) %a, ptr noundef nonnull align 8 dereferenceable(20000) %b, i32 20000, i1 false)
  ret void
}


; src8 dst8
define void @test_src8_dst8_size_1(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_1(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1) [[A]], ptr noundef nonnull align 8 dereferenceable(1) [[B]], i32 1, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_1(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i8, ptr [[B]], align 1
; CHECK-NEXT:    store i8 [[TMP0]], ptr [[A]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1) %a, ptr noundef nonnull align 8 dereferenceable(1) %b, i32 1, i1 false)
  ret void
}

define void @test_src8_dst8_size_2(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_2(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(2) [[A]], ptr noundef nonnull align 8 dereferenceable(2) [[B]], i32 2, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_2(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(2) %a, ptr noundef nonnull align 8 dereferenceable(2) %b, i32 2, i1 false)
  ret void
}

define void @test_src8_dst8_size_3(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_3(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(3) [[A]], ptr noundef nonnull align 8 dereferenceable(3) [[B]], i32 3, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_3(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i16, ptr [[B]], align 2
; CHECK-NEXT:    store i16 [[TMP0]], ptr [[A]], align 2
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(3) %a, ptr noundef nonnull align 8 dereferenceable(3) %b, i32 3, i1 false)
  ret void
}

define void @test_src8_dst8_size_4(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_4(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(4) [[A]], ptr noundef nonnull align 8 dereferenceable(4) [[B]], i32 4, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_4(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(4) %a, ptr noundef nonnull align 8 dereferenceable(4) %b, i32 4, i1 false)
  ret void
}

define void @test_src8_dst8_size_5(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_5(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(5) [[A]], ptr noundef nonnull align 8 dereferenceable(5) [[B]], i32 5, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_5(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    store i8 [[TMP3]], ptr [[TMP2]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(5) %a, ptr noundef nonnull align 8 dereferenceable(5) %b, i32 5, i1 false)
  ret void
}

define void @test_src8_dst8_size_6(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_6(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(6) [[A]], ptr noundef nonnull align 8 dereferenceable(6) [[B]], i32 6, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_6(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(6) %a, ptr noundef nonnull align 8 dereferenceable(6) %b, i32 6, i1 false)
  ret void
}

define void @test_src8_dst8_size_7(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_7(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[B]], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i8, ptr [[B]], i32 4
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[A]], i32 4
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP1]], align 2
; CHECK-NEXT:    store i16 [[TMP3]], ptr [[TMP2]], align 2
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[B]], i32 6
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[A]], i32 6
; CHECK-NEXT:    [[TMP6:%.*]] = load i8, ptr [[TMP4]], align 1
; CHECK-NEXT:    store i8 [[TMP6]], ptr [[TMP5]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(7) %a, ptr noundef nonnull align 8 dereferenceable(7) %b, i32 7, i1 false)
  ret void
}

define void @test_src8_dst8_size_8(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_8(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(8) [[A]], ptr noundef nonnull align 8 dereferenceable(8) [[B]], i32 8, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_8(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(8) %a, ptr noundef nonnull align 8 dereferenceable(8) %b, i32 8, i1 false)
  ret void
}

define void @test_src8_dst8_size_9(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_9(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(9) [[A]], ptr noundef nonnull align 8 dereferenceable(9) [[B]], i32 9, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_9(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(9) %a, ptr noundef nonnull align 8 dereferenceable(9) %b, i32 9, i1 false)
  ret void
}

define void @test_src8_dst8_size_10(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_10(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(10) [[A]], ptr noundef nonnull align 8 dereferenceable(10) [[B]], i32 10, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_10(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(10) %a, ptr noundef nonnull align 8 dereferenceable(10) %b, i32 10, i1 false)
  ret void
}

define void @test_src8_dst8_size_11(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_11(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(11) [[A]], ptr noundef nonnull align 8 dereferenceable(11) [[B]], i32 11, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_11(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    store i16 [[TMP4]], ptr [[TMP3]], align 2
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 10
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 10
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(11) %a, ptr noundef nonnull align 8 dereferenceable(11) %b, i32 11, i1 false)
  ret void
}

define void @test_src8_dst8_size_12(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_12(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(12) [[A]], ptr noundef nonnull align 8 dereferenceable(12) [[B]], i32 12, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_12(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(12) %a, ptr noundef nonnull align 8 dereferenceable(12) %b, i32 12, i1 false)
  ret void
}

define void @test_src8_dst8_size_13(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_13(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(13) [[A]], ptr noundef nonnull align 8 dereferenceable(13) [[B]], i32 13, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_13(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP5]], align 1
; CHECK-NEXT:    store i8 [[TMP7]], ptr [[TMP6]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(13) %a, ptr noundef nonnull align 8 dereferenceable(13) %b, i32 13, i1 false)
  ret void
}

define void @test_src8_dst8_size_14(ptr %a, ptr %b) {
; NOPASS-LABEL: define void @test_src8_dst8_size_14(
; NOPASS-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; NOPASS-NEXT:  [[ENTRY:.*:]]
; NOPASS-NEXT:    tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(14) [[A]], ptr noundef nonnull align 8 dereferenceable(14) [[B]], i32 14, i1 false)
; NOPASS-NEXT:    ret void
;
; CHECK-LABEL: define void @test_src8_dst8_size_14(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(14) %a, ptr noundef nonnull align 8 dereferenceable(14) %b, i32 14, i1 false)
  ret void
}

define void @test_src8_dst8_size_15(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_15(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 8
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    store i32 [[TMP4]], ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i8, ptr [[B]], i32 12
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[A]], i32 12
; CHECK-NEXT:    [[TMP7:%.*]] = load i16, ptr [[TMP5]], align 2
; CHECK-NEXT:    store i16 [[TMP7]], ptr [[TMP6]], align 2
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr [[B]], i32 14
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[A]], i32 14
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP8]], align 1
; CHECK-NEXT:    store i8 [[TMP10]], ptr [[TMP9]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(15) %a, ptr noundef nonnull align 8 dereferenceable(15) %b, i32 15, i1 false)
  ret void
}

define void @test_src8_dst8_size_16(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_16(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(16) %a, ptr noundef nonnull align 8 dereferenceable(16) %b, i32 16, i1 false)
  ret void
}

define void @test_src8_dst8_size_17(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_17(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(17) %a, ptr noundef nonnull align 8 dereferenceable(17) %b, i32 17, i1 false)
  ret void
}

define void @test_src8_dst8_size_31(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_31(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 16
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 16
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP2:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 24
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 24
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 28
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 28
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 30
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 30
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(31) %a, ptr noundef nonnull align 8 dereferenceable(31) %b, i32 31, i1 false)
  ret void
}

define void @test_src8_dst8_size_32(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_32(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(32) %a, ptr noundef nonnull align 8 dereferenceable(32) %b, i32 32, i1 false)
  ret void
}

define void @test_src8_dst8_size_33(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_33(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(33) %a, ptr noundef nonnull align 8 dereferenceable(33) %b, i32 33, i1 false)
  ret void
}

define void @test_src8_dst8_size_47(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_47(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP3:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP4:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP3]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 32
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 32
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 40
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 40
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 44
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 44
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 46
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 46
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(47) %a, ptr noundef nonnull align 8 dereferenceable(47) %b, i32 47, i1 false)
  ret void
}

define void @test_src8_dst8_size_48(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_48(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(48) %a, ptr noundef nonnull align 8 dereferenceable(48) %b, i32 48, i1 false)
  ret void
}

define void @test_src8_dst8_size_49(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_49(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(49) %a, ptr noundef nonnull align 8 dereferenceable(49) %b, i32 49, i1 false)
  ret void
}

define void @test_src8_dst8_size_63(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_63(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP5:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP6:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP5]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP6]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 48
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 56
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 56
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 60
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 60
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 62
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 62
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(63) %a, ptr noundef nonnull align 8 dereferenceable(63) %b, i32 63, i1 false)
  ret void
}

define void @test_src8_dst8_size_64(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_64(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(64) %a, ptr noundef nonnull align 8 dereferenceable(64) %b, i32 64, i1 false)
  ret void
}

define void @test_src8_dst8_size_65(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_65(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP7:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP7]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 64
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 64
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(65) %a, ptr noundef nonnull align 8 dereferenceable(65) %b, i32 65, i1 false)
  ret void
}

define void @test_src8_dst8_size_80(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_80(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(80) %a, ptr noundef nonnull align 8 dereferenceable(80) %b, i32 80, i1 false)
  ret void
}

define void @test_src8_dst8_size_81(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_81(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP9]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 80
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 80
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(81) %a, ptr noundef nonnull align 8 dereferenceable(81) %b, i32 81, i1 false)
  ret void
}

define void @test_src8_dst8_size_88(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_88(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP1]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP2]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP3]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP4]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP5]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP6]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTH64IP8]], i32 8)
; CHECK-NEXT:    [[VSTH64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTH64IP10]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VLDH64IP15:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP7]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP16:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP15]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP17:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDH64IP16]], i32 8, i32 2)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(88) %a, ptr noundef nonnull align 8 dereferenceable(88) %b, i32 88, i1 false)
  ret void
}

define void @test_src8_dst8_size_96(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_96(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP11]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP12]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(96) %a, ptr noundef nonnull align 8 dereferenceable(96) %b, i32 96, i1 false)
  ret void
}

define void @test_src8_dst8_size_112(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_112(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(112) %a, ptr noundef nonnull align 8 dereferenceable(112) %b, i32 112, i1 false)
  ret void
}

define void @test_src8_dst8_size_124(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_124(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(124) %a, ptr noundef nonnull align 8 dereferenceable(124) %b, i32 124, i1 false)
  ret void
}

define void @test_src8_dst8_size_127(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_127(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP13]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP14]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 112
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 112
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 120
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 120
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 124
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 124
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 126
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 126
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(127) %a, ptr noundef nonnull align 8 dereferenceable(127) %b, i32 127, i1 false)
  ret void
}

define void @test_src8_dst8_size_128(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_128(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(128) %a, ptr noundef nonnull align 8 dereferenceable(128) %b, i32 128, i1 false)
  ret void
}

define void @test_src8_dst8_size_129(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_129(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 128
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 128
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    store i8 [[TMP4]], ptr [[TMP3]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(129) %a, ptr noundef nonnull align 8 dereferenceable(129) %b, i32 129, i1 false)
  ret void
}

define void @test_src8_dst8_size_255(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_255(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP32]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP33]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP34]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP35]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP36]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP38:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP37]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP39:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP38]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP40:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP39]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP41:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP40]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP42:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP41]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP43:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP28]], i32 8)
; CHECK-NEXT:    [[VSTH64IP44:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP43]], i32 8)
; CHECK-NEXT:    [[VSTL64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP44]], i32 8)
; CHECK-NEXT:    [[VSTH64IP46:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP45]], i32 8)
; CHECK-NEXT:    [[VSTL64IP47:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP46]], i32 8)
; CHECK-NEXT:    [[VSTH64IP48:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP47]], i32 8)
; CHECK-NEXT:    [[VSTL64IP49:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP48]], i32 8)
; CHECK-NEXT:    [[VSTH64IP50:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP49]], i32 8)
; CHECK-NEXT:    [[VSTL64IP51:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP50]], i32 8)
; CHECK-NEXT:    [[VSTH64IP52:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP51]], i32 8)
; CHECK-NEXT:    [[VSTL64IP53:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP52]], i32 8)
; CHECK-NEXT:    [[VSTH64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP53]], i32 8)
; CHECK-NEXT:    [[VSTL64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP54]], i32 8)
; CHECK-NEXT:    [[VSTH64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP55]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 240
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 240
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP57:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 248
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 248
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 252
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 252
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 254
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 254
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(255) %a, ptr noundef nonnull align 8 dereferenceable(255) %b, i32 255, i1 false)
  ret void
}

define void @test_src8_dst8_size_256(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_256(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP32]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP33]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP34]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP35]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP36]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP38:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP37]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP39:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP38]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP40:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP39]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP41:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP40]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP42:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP41]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP43:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP42]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP44:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP43]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP28]], i32 8)
; CHECK-NEXT:    [[VSTH64IP46:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP45]], i32 8)
; CHECK-NEXT:    [[VSTL64IP47:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP46]], i32 8)
; CHECK-NEXT:    [[VSTH64IP48:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP47]], i32 8)
; CHECK-NEXT:    [[VSTL64IP49:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP48]], i32 8)
; CHECK-NEXT:    [[VSTH64IP50:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP49]], i32 8)
; CHECK-NEXT:    [[VSTL64IP51:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP50]], i32 8)
; CHECK-NEXT:    [[VSTH64IP52:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP51]], i32 8)
; CHECK-NEXT:    [[VSTL64IP53:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP52]], i32 8)
; CHECK-NEXT:    [[VSTH64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP53]], i32 8)
; CHECK-NEXT:    [[VSTL64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP54]], i32 8)
; CHECK-NEXT:    [[VSTH64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP55]], i32 8)
; CHECK-NEXT:    [[VSTL64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP56]], i32 8)
; CHECK-NEXT:    [[VSTH64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP57]], i32 8)
; CHECK-NEXT:    [[VSTL64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP58]], i32 8)
; CHECK-NEXT:    [[VSTH64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP59]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(256) %a, ptr noundef nonnull align 8 dereferenceable(256) %b, i32 256, i1 false)
  ret void
}

define void @test_src8_dst8_size_1023(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_1023(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP32]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP33]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP34]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP35]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP36]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP38:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP37]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP39:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP38]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP40:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP39]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP41:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP40]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP42:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP41]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP43:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP42]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP44:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP43]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP28]], i32 8)
; CHECK-NEXT:    [[VSTH64IP46:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP45]], i32 8)
; CHECK-NEXT:    [[VSTL64IP47:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP46]], i32 8)
; CHECK-NEXT:    [[VSTH64IP48:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP47]], i32 8)
; CHECK-NEXT:    [[VSTL64IP49:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP48]], i32 8)
; CHECK-NEXT:    [[VSTH64IP50:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP49]], i32 8)
; CHECK-NEXT:    [[VSTL64IP51:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP50]], i32 8)
; CHECK-NEXT:    [[VSTH64IP52:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP51]], i32 8)
; CHECK-NEXT:    [[VSTL64IP53:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP52]], i32 8)
; CHECK-NEXT:    [[VSTH64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP53]], i32 8)
; CHECK-NEXT:    [[VSTL64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP54]], i32 8)
; CHECK-NEXT:    [[VSTH64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP55]], i32 8)
; CHECK-NEXT:    [[VSTL64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP56]], i32 8)
; CHECK-NEXT:    [[VSTH64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP57]], i32 8)
; CHECK-NEXT:    [[VSTL64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP58]], i32 8)
; CHECK-NEXT:    [[VSTH64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP59]], i32 8)
; CHECK-NEXT:    [[VLDL64IP61:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP44]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP62:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP61]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP63:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP62]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP64:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP63]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP65:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP64]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP66:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP65]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP67:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP66]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP68:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP67]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP69:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP68]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP70:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP69]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP71:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP70]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP72:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP71]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP73:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP72]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP74:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP73]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP75:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP74]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP76:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP75]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP77:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP60]], i32 8)
; CHECK-NEXT:    [[VSTH64IP78:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP77]], i32 8)
; CHECK-NEXT:    [[VSTL64IP79:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP78]], i32 8)
; CHECK-NEXT:    [[VSTH64IP80:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP79]], i32 8)
; CHECK-NEXT:    [[VSTL64IP81:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP80]], i32 8)
; CHECK-NEXT:    [[VSTH64IP82:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP81]], i32 8)
; CHECK-NEXT:    [[VSTL64IP83:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP82]], i32 8)
; CHECK-NEXT:    [[VSTH64IP84:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP83]], i32 8)
; CHECK-NEXT:    [[VSTL64IP85:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP84]], i32 8)
; CHECK-NEXT:    [[VSTH64IP86:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP85]], i32 8)
; CHECK-NEXT:    [[VSTL64IP87:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP86]], i32 8)
; CHECK-NEXT:    [[VSTH64IP88:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP87]], i32 8)
; CHECK-NEXT:    [[VSTL64IP89:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP88]], i32 8)
; CHECK-NEXT:    [[VSTH64IP90:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP89]], i32 8)
; CHECK-NEXT:    [[VSTL64IP91:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP90]], i32 8)
; CHECK-NEXT:    [[VSTH64IP92:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP91]], i32 8)
; CHECK-NEXT:    [[VLDL64IP93:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP76]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP94:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP93]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP95:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP94]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP96:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP95]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP97:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP96]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP98:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP97]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP99:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP98]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP100:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP99]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP101:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP100]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP102:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP101]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP103:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP102]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP104:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP103]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP105:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP104]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP106:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP105]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP107:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP106]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP108:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP107]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP109:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP92]], i32 8)
; CHECK-NEXT:    [[VSTH64IP110:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP109]], i32 8)
; CHECK-NEXT:    [[VSTL64IP111:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP110]], i32 8)
; CHECK-NEXT:    [[VSTH64IP112:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP111]], i32 8)
; CHECK-NEXT:    [[VSTL64IP113:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP112]], i32 8)
; CHECK-NEXT:    [[VSTH64IP114:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP113]], i32 8)
; CHECK-NEXT:    [[VSTL64IP115:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP114]], i32 8)
; CHECK-NEXT:    [[VSTH64IP116:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP115]], i32 8)
; CHECK-NEXT:    [[VSTL64IP117:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP116]], i32 8)
; CHECK-NEXT:    [[VSTH64IP118:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP117]], i32 8)
; CHECK-NEXT:    [[VSTL64IP119:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP118]], i32 8)
; CHECK-NEXT:    [[VSTH64IP120:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP119]], i32 8)
; CHECK-NEXT:    [[VSTL64IP121:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP120]], i32 8)
; CHECK-NEXT:    [[VSTH64IP122:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP121]], i32 8)
; CHECK-NEXT:    [[VSTL64IP123:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP122]], i32 8)
; CHECK-NEXT:    [[VSTH64IP124:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP123]], i32 8)
; CHECK-NEXT:    [[VLDL64IP125:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP108]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP126:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP125]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP127:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP126]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP128:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP127]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP129:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP128]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP130:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP129]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP131:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP130]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP132:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP131]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP133:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP132]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP134:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP133]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP135:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP134]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP136:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP135]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP137:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP136]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP138:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP137]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP139:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP138]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP140:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP139]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP141:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP124]], i32 8)
; CHECK-NEXT:    [[VSTH64IP142:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP141]], i32 8)
; CHECK-NEXT:    [[VSTL64IP143:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP142]], i32 8)
; CHECK-NEXT:    [[VSTH64IP144:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP143]], i32 8)
; CHECK-NEXT:    [[VSTL64IP145:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP144]], i32 8)
; CHECK-NEXT:    [[VSTH64IP146:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP145]], i32 8)
; CHECK-NEXT:    [[VSTL64IP147:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP146]], i32 8)
; CHECK-NEXT:    [[VSTH64IP148:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP147]], i32 8)
; CHECK-NEXT:    [[VSTL64IP149:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP148]], i32 8)
; CHECK-NEXT:    [[VSTH64IP150:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP149]], i32 8)
; CHECK-NEXT:    [[VSTL64IP151:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP150]], i32 8)
; CHECK-NEXT:    [[VSTH64IP152:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP151]], i32 8)
; CHECK-NEXT:    [[VSTL64IP153:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP152]], i32 8)
; CHECK-NEXT:    [[VSTH64IP154:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP153]], i32 8)
; CHECK-NEXT:    [[VSTL64IP155:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP154]], i32 8)
; CHECK-NEXT:    [[VSTH64IP156:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP155]], i32 8)
; CHECK-NEXT:    [[VLDL64IP157:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP140]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP158:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP157]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP159:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP158]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP160:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP159]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP161:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP160]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP162:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP161]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP163:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP162]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP164:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP163]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP165:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP164]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP166:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP165]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP167:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP166]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP168:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP167]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP169:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP168]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP170:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP169]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP171:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP170]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP172:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP171]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP173:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP156]], i32 8)
; CHECK-NEXT:    [[VSTH64IP174:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP173]], i32 8)
; CHECK-NEXT:    [[VSTL64IP175:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP174]], i32 8)
; CHECK-NEXT:    [[VSTH64IP176:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP175]], i32 8)
; CHECK-NEXT:    [[VSTL64IP177:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP176]], i32 8)
; CHECK-NEXT:    [[VSTH64IP178:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP177]], i32 8)
; CHECK-NEXT:    [[VSTL64IP179:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP178]], i32 8)
; CHECK-NEXT:    [[VSTH64IP180:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP179]], i32 8)
; CHECK-NEXT:    [[VSTL64IP181:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP180]], i32 8)
; CHECK-NEXT:    [[VSTH64IP182:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP181]], i32 8)
; CHECK-NEXT:    [[VSTL64IP183:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP182]], i32 8)
; CHECK-NEXT:    [[VSTH64IP184:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP183]], i32 8)
; CHECK-NEXT:    [[VSTL64IP185:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP184]], i32 8)
; CHECK-NEXT:    [[VSTH64IP186:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP185]], i32 8)
; CHECK-NEXT:    [[VSTL64IP187:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP186]], i32 8)
; CHECK-NEXT:    [[VSTH64IP188:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP187]], i32 8)
; CHECK-NEXT:    [[VLDL64IP189:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP172]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP190:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP189]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP191:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP190]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP192:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP191]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP193:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP192]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP194:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP193]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP195:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP194]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP196:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP195]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP197:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP196]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP198:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP197]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP199:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP198]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP200:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP199]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP201:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP200]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP202:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP201]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP203:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP202]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP204:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP203]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP205:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP188]], i32 8)
; CHECK-NEXT:    [[VSTH64IP206:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP205]], i32 8)
; CHECK-NEXT:    [[VSTL64IP207:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP206]], i32 8)
; CHECK-NEXT:    [[VSTH64IP208:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP207]], i32 8)
; CHECK-NEXT:    [[VSTL64IP209:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP208]], i32 8)
; CHECK-NEXT:    [[VSTH64IP210:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP209]], i32 8)
; CHECK-NEXT:    [[VSTL64IP211:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP210]], i32 8)
; CHECK-NEXT:    [[VSTH64IP212:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP211]], i32 8)
; CHECK-NEXT:    [[VSTL64IP213:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP212]], i32 8)
; CHECK-NEXT:    [[VSTH64IP214:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP213]], i32 8)
; CHECK-NEXT:    [[VSTL64IP215:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP214]], i32 8)
; CHECK-NEXT:    [[VSTH64IP216:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP215]], i32 8)
; CHECK-NEXT:    [[VSTL64IP217:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP216]], i32 8)
; CHECK-NEXT:    [[VSTH64IP218:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP217]], i32 8)
; CHECK-NEXT:    [[VSTL64IP219:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP218]], i32 8)
; CHECK-NEXT:    [[VSTH64IP220:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP219]], i32 8)
; CHECK-NEXT:    [[VLDL64IP221:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP204]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP222:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP221]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP223:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP222]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP224:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP223]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP225:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP224]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP226:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP225]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP227:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP226]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP228:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP227]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP229:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP228]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP230:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP229]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP231:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP230]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP232:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP231]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP233:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP232]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP234:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP233]], i32 8, i32 6)
; CHECK-NEXT:    [[VSTL64IP235:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP220]], i32 8)
; CHECK-NEXT:    [[VSTH64IP236:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP235]], i32 8)
; CHECK-NEXT:    [[VSTL64IP237:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP236]], i32 8)
; CHECK-NEXT:    [[VSTH64IP238:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP237]], i32 8)
; CHECK-NEXT:    [[VSTL64IP239:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP238]], i32 8)
; CHECK-NEXT:    [[VSTH64IP240:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP239]], i32 8)
; CHECK-NEXT:    [[VSTL64IP241:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP240]], i32 8)
; CHECK-NEXT:    [[VSTH64IP242:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP241]], i32 8)
; CHECK-NEXT:    [[VSTL64IP243:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP242]], i32 8)
; CHECK-NEXT:    [[VSTH64IP244:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP243]], i32 8)
; CHECK-NEXT:    [[VSTL64IP245:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP244]], i32 8)
; CHECK-NEXT:    [[VSTH64IP246:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP245]], i32 8)
; CHECK-NEXT:    [[VSTL64IP247:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP246]], i32 8)
; CHECK-NEXT:    [[VSTH64IP248:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP247]], i32 8)
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[B]], i32 1008
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[A]], i32 1008
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP2]] to i32
; CHECK-NEXT:    [[TMP5:%.*]] = ptrtoint ptr [[TMP3]] to i32
; CHECK-NEXT:    [[VLDL64IP249:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP4]], i32 8, i32 0)
; CHECK-NEXT:    [[VSTL64IP250:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP5]], i32 8)
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[B]], i32 1016
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr i8, ptr [[A]], i32 1016
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[TMP6]], align 4
; CHECK-NEXT:    store i32 [[TMP8]], ptr [[TMP7]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr i8, ptr [[B]], i32 1020
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr i8, ptr [[A]], i32 1020
; CHECK-NEXT:    [[TMP11:%.*]] = load i16, ptr [[TMP9]], align 2
; CHECK-NEXT:    store i16 [[TMP11]], ptr [[TMP10]], align 2
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[B]], i32 1022
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr i8, ptr [[A]], i32 1022
; CHECK-NEXT:    [[TMP14:%.*]] = load i8, ptr [[TMP12]], align 1
; CHECK-NEXT:    store i8 [[TMP14]], ptr [[TMP13]], align 1
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1023) %a, ptr noundef nonnull align 8 dereferenceable(1023) %b, i32 1023, i1 false)
  ret void
}

define void @test_src8_dst8_size_1024(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_1024(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[TMP0]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[TMP1]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP14]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP33:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP32]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP34:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP33]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP35:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP34]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP36:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP35]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP37:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP36]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP38:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP37]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP39:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP38]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP40:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP39]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP41:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP40]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP42:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP41]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP43:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP42]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP44:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP43]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP45:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP28]], i32 8)
; CHECK-NEXT:    [[VSTH64IP46:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP45]], i32 8)
; CHECK-NEXT:    [[VSTL64IP47:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP46]], i32 8)
; CHECK-NEXT:    [[VSTH64IP48:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP47]], i32 8)
; CHECK-NEXT:    [[VSTL64IP49:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP48]], i32 8)
; CHECK-NEXT:    [[VSTH64IP50:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP49]], i32 8)
; CHECK-NEXT:    [[VSTL64IP51:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP50]], i32 8)
; CHECK-NEXT:    [[VSTH64IP52:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP51]], i32 8)
; CHECK-NEXT:    [[VSTL64IP53:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP52]], i32 8)
; CHECK-NEXT:    [[VSTH64IP54:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP53]], i32 8)
; CHECK-NEXT:    [[VSTL64IP55:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP54]], i32 8)
; CHECK-NEXT:    [[VSTH64IP56:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP55]], i32 8)
; CHECK-NEXT:    [[VSTL64IP57:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP56]], i32 8)
; CHECK-NEXT:    [[VSTH64IP58:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP57]], i32 8)
; CHECK-NEXT:    [[VSTL64IP59:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP58]], i32 8)
; CHECK-NEXT:    [[VSTH64IP60:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP59]], i32 8)
; CHECK-NEXT:    [[VLDL64IP61:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP44]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP62:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP61]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP63:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP62]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP64:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP63]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP65:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP64]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP66:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP65]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP67:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP66]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP68:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP67]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP69:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP68]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP70:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP69]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP71:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP70]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP72:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP71]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP73:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP72]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP74:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP73]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP75:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP74]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP76:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP75]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP77:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP60]], i32 8)
; CHECK-NEXT:    [[VSTH64IP78:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP77]], i32 8)
; CHECK-NEXT:    [[VSTL64IP79:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP78]], i32 8)
; CHECK-NEXT:    [[VSTH64IP80:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP79]], i32 8)
; CHECK-NEXT:    [[VSTL64IP81:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP80]], i32 8)
; CHECK-NEXT:    [[VSTH64IP82:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP81]], i32 8)
; CHECK-NEXT:    [[VSTL64IP83:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP82]], i32 8)
; CHECK-NEXT:    [[VSTH64IP84:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP83]], i32 8)
; CHECK-NEXT:    [[VSTL64IP85:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP84]], i32 8)
; CHECK-NEXT:    [[VSTH64IP86:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP85]], i32 8)
; CHECK-NEXT:    [[VSTL64IP87:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP86]], i32 8)
; CHECK-NEXT:    [[VSTH64IP88:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP87]], i32 8)
; CHECK-NEXT:    [[VSTL64IP89:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP88]], i32 8)
; CHECK-NEXT:    [[VSTH64IP90:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP89]], i32 8)
; CHECK-NEXT:    [[VSTL64IP91:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP90]], i32 8)
; CHECK-NEXT:    [[VSTH64IP92:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP91]], i32 8)
; CHECK-NEXT:    [[VLDL64IP93:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP76]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP94:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP93]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP95:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP94]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP96:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP95]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP97:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP96]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP98:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP97]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP99:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP98]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP100:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP99]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP101:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP100]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP102:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP101]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP103:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP102]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP104:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP103]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP105:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP104]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP106:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP105]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP107:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP106]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP108:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP107]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP109:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP92]], i32 8)
; CHECK-NEXT:    [[VSTH64IP110:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP109]], i32 8)
; CHECK-NEXT:    [[VSTL64IP111:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP110]], i32 8)
; CHECK-NEXT:    [[VSTH64IP112:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP111]], i32 8)
; CHECK-NEXT:    [[VSTL64IP113:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP112]], i32 8)
; CHECK-NEXT:    [[VSTH64IP114:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP113]], i32 8)
; CHECK-NEXT:    [[VSTL64IP115:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP114]], i32 8)
; CHECK-NEXT:    [[VSTH64IP116:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP115]], i32 8)
; CHECK-NEXT:    [[VSTL64IP117:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP116]], i32 8)
; CHECK-NEXT:    [[VSTH64IP118:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP117]], i32 8)
; CHECK-NEXT:    [[VSTL64IP119:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP118]], i32 8)
; CHECK-NEXT:    [[VSTH64IP120:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP119]], i32 8)
; CHECK-NEXT:    [[VSTL64IP121:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP120]], i32 8)
; CHECK-NEXT:    [[VSTH64IP122:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP121]], i32 8)
; CHECK-NEXT:    [[VSTL64IP123:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP122]], i32 8)
; CHECK-NEXT:    [[VSTH64IP124:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP123]], i32 8)
; CHECK-NEXT:    [[VLDL64IP125:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP108]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP126:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP125]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP127:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP126]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP128:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP127]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP129:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP128]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP130:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP129]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP131:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP130]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP132:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP131]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP133:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP132]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP134:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP133]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP135:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP134]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP136:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP135]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP137:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP136]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP138:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP137]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP139:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP138]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP140:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP139]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP141:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP124]], i32 8)
; CHECK-NEXT:    [[VSTH64IP142:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP141]], i32 8)
; CHECK-NEXT:    [[VSTL64IP143:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP142]], i32 8)
; CHECK-NEXT:    [[VSTH64IP144:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP143]], i32 8)
; CHECK-NEXT:    [[VSTL64IP145:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP144]], i32 8)
; CHECK-NEXT:    [[VSTH64IP146:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP145]], i32 8)
; CHECK-NEXT:    [[VSTL64IP147:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP146]], i32 8)
; CHECK-NEXT:    [[VSTH64IP148:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP147]], i32 8)
; CHECK-NEXT:    [[VSTL64IP149:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP148]], i32 8)
; CHECK-NEXT:    [[VSTH64IP150:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP149]], i32 8)
; CHECK-NEXT:    [[VSTL64IP151:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP150]], i32 8)
; CHECK-NEXT:    [[VSTH64IP152:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP151]], i32 8)
; CHECK-NEXT:    [[VSTL64IP153:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP152]], i32 8)
; CHECK-NEXT:    [[VSTH64IP154:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP153]], i32 8)
; CHECK-NEXT:    [[VSTL64IP155:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP154]], i32 8)
; CHECK-NEXT:    [[VSTH64IP156:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP155]], i32 8)
; CHECK-NEXT:    [[VLDL64IP157:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP140]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP158:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP157]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP159:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP158]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP160:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP159]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP161:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP160]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP162:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP161]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP163:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP162]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP164:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP163]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP165:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP164]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP166:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP165]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP167:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP166]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP168:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP167]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP169:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP168]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP170:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP169]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP171:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP170]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP172:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP171]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP173:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP156]], i32 8)
; CHECK-NEXT:    [[VSTH64IP174:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP173]], i32 8)
; CHECK-NEXT:    [[VSTL64IP175:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP174]], i32 8)
; CHECK-NEXT:    [[VSTH64IP176:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP175]], i32 8)
; CHECK-NEXT:    [[VSTL64IP177:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP176]], i32 8)
; CHECK-NEXT:    [[VSTH64IP178:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP177]], i32 8)
; CHECK-NEXT:    [[VSTL64IP179:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP178]], i32 8)
; CHECK-NEXT:    [[VSTH64IP180:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP179]], i32 8)
; CHECK-NEXT:    [[VSTL64IP181:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP180]], i32 8)
; CHECK-NEXT:    [[VSTH64IP182:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP181]], i32 8)
; CHECK-NEXT:    [[VSTL64IP183:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP182]], i32 8)
; CHECK-NEXT:    [[VSTH64IP184:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP183]], i32 8)
; CHECK-NEXT:    [[VSTL64IP185:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP184]], i32 8)
; CHECK-NEXT:    [[VSTH64IP186:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP185]], i32 8)
; CHECK-NEXT:    [[VSTL64IP187:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP186]], i32 8)
; CHECK-NEXT:    [[VSTH64IP188:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP187]], i32 8)
; CHECK-NEXT:    [[VLDL64IP189:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP172]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP190:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP189]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP191:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP190]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP192:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP191]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP193:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP192]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP194:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP193]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP195:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP194]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP196:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP195]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP197:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP196]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP198:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP197]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP199:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP198]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP200:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP199]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP201:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP200]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP202:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP201]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP203:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP202]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP204:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP203]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP205:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP188]], i32 8)
; CHECK-NEXT:    [[VSTH64IP206:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP205]], i32 8)
; CHECK-NEXT:    [[VSTL64IP207:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP206]], i32 8)
; CHECK-NEXT:    [[VSTH64IP208:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP207]], i32 8)
; CHECK-NEXT:    [[VSTL64IP209:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP208]], i32 8)
; CHECK-NEXT:    [[VSTH64IP210:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP209]], i32 8)
; CHECK-NEXT:    [[VSTL64IP211:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP210]], i32 8)
; CHECK-NEXT:    [[VSTH64IP212:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP211]], i32 8)
; CHECK-NEXT:    [[VSTL64IP213:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP212]], i32 8)
; CHECK-NEXT:    [[VSTH64IP214:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP213]], i32 8)
; CHECK-NEXT:    [[VSTL64IP215:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP214]], i32 8)
; CHECK-NEXT:    [[VSTH64IP216:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP215]], i32 8)
; CHECK-NEXT:    [[VSTL64IP217:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP216]], i32 8)
; CHECK-NEXT:    [[VSTH64IP218:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP217]], i32 8)
; CHECK-NEXT:    [[VSTL64IP219:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP218]], i32 8)
; CHECK-NEXT:    [[VSTH64IP220:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP219]], i32 8)
; CHECK-NEXT:    [[VLDL64IP221:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP204]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP222:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP221]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP223:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP222]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP224:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP223]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP225:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP224]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP226:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP225]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP227:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP226]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP228:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP227]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP229:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP228]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP230:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP229]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP231:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP230]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP232:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP231]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP233:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP232]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP234:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP233]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP235:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP234]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP236:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP235]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP237:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[VSTH64IP220]], i32 8)
; CHECK-NEXT:    [[VSTH64IP238:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP237]], i32 8)
; CHECK-NEXT:    [[VSTL64IP239:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP238]], i32 8)
; CHECK-NEXT:    [[VSTH64IP240:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP239]], i32 8)
; CHECK-NEXT:    [[VSTL64IP241:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP240]], i32 8)
; CHECK-NEXT:    [[VSTH64IP242:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP241]], i32 8)
; CHECK-NEXT:    [[VSTL64IP243:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP242]], i32 8)
; CHECK-NEXT:    [[VSTH64IP244:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP243]], i32 8)
; CHECK-NEXT:    [[VSTL64IP245:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP244]], i32 8)
; CHECK-NEXT:    [[VSTH64IP246:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP245]], i32 8)
; CHECK-NEXT:    [[VSTL64IP247:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP246]], i32 8)
; CHECK-NEXT:    [[VSTH64IP248:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP247]], i32 8)
; CHECK-NEXT:    [[VSTL64IP249:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP248]], i32 8)
; CHECK-NEXT:    [[VSTH64IP250:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP249]], i32 8)
; CHECK-NEXT:    [[VSTL64IP251:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP250]], i32 8)
; CHECK-NEXT:    [[VSTH64IP252:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP251]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(1024) %a, ptr noundef nonnull align 8 dereferenceable(1024) %b, i32 1024, i1 false)
  ret void
}

define void @test_src8_dst8_size_20000(ptr %a, ptr %b) {
; CHECK-LABEL: define void @test_src8_dst8_size_20000(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[B]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[A]] to i32
; CHECK-NEXT:    call void @esp32p4MemCpySrc8Dst8Const16(i32 [[TMP1]], i32 [[TMP0]], i32 20000)
; CHECK-NEXT:    ret void
;
entry:
  tail call void @llvm.memcpy.p0.p0.i32(ptr noundef nonnull align 8 dereferenceable(20000) %a, ptr noundef nonnull align 8 dereferenceable(20000) %b, i32 20000, i1 false)
  ret void
}


declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg)

define internal void @esp32p4MemCpySrc16Dst16Const16(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc16Dst16Const16(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP3:%.*]] = lshr i32 [[TMP2]], 7
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP2]], 128
; CHECK-NEXT:    br i1 [[TMP4]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[TMP6:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLD128IP7:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VST128IP14:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[SRC_PTR_LOOP]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[VST128IP8:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP9:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP8]], i32 16)
; CHECK-NEXT:    [[VST128IP10:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP9]], i32 16)
; CHECK-NEXT:    [[VST128IP11:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP10]], i32 16)
; CHECK-NEXT:    [[VST128IP12:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP11]], i32 16)
; CHECK-NEXT:    [[VST128IP13:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP12]], i32 16)
; CHECK-NEXT:    [[VST128IP14]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP13]], i32 16)
; CHECK-NEXT:    [[TMP6]] = add nuw nsw i32 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[FOR_COND_CLEANUP]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRC_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLD128IP7]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VST128IP14]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLD128IP15:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[SRC_PTR_CLEANUP]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP16:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP15]], i32 16, i32 1)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_CLEANUP]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %3 = lshr i32 %2, 7
  %4 = icmp ult i32 %2, 128
  br i1 %4, label %for.cond.cleanup, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %5 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  %src.ptr.loop = phi i32 [ %1, %entry ], [ %vld128ip7, %for.body ]
  %dst.ptr.loop = phi i32 [ %0, %entry ], [ %vst128ip14, %for.body ]
  %vld128ip = call i32 @llvm.riscv.esp.vld.128.ip(i32 %src.ptr.loop, i32 16, i32 0)
  %vld128ip1 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip, i32 16, i32 1)
  %vld128ip2 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip1, i32 16, i32 2)
  %vld128ip3 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip2, i32 16, i32 3)
  %vld128ip4 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip3, i32 16, i32 4)
  %vld128ip5 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip4, i32 16, i32 5)
  %vld128ip6 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip5, i32 16, i32 6)
  %vld128ip7 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip6, i32 16, i32 7)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %vst128ip8 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %vst128ip9 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip8, i32 16)
  %vst128ip10 = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 %vst128ip9, i32 16)
  %vst128ip11 = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 %vst128ip10, i32 16)
  %vst128ip12 = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 %vst128ip11, i32 16)
  %vst128ip13 = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 %vst128ip12, i32 16)
  %vst128ip14 = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 %vst128ip13, i32 16)
  %6 = add nuw nsw i32 %5, 1
  %7 = icmp eq i32 %6, %3
  br i1 %7, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %src.ptr.cleanup = phi i32 [ %1, %entry ], [ %vld128ip7, %for.body ]
  %dst.ptr.cleanup = phi i32 [ %0, %entry ], [ %vst128ip14, %for.body ]
  %vld128ip15 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %src.ptr.cleanup, i32 16, i32 0)
  %vld128ip16 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip15, i32 16, i32 1)
  %vst128ip17 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.cleanup, i32 16)
  %vst128ip18 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip17, i32 16)
  ret void
}

define internal void @esp32p4MemCpySrc16Dst8Const16(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc16Dst8Const16(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP3:%.*]] = lshr i32 [[TMP2]], 7
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP2]], 128
; CHECK-NEXT:    br i1 [[TMP4]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[TMP6:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLD128IP7:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VSTH64IP21:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLD128IP:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[SRC_PTR_LOOP]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP1:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP]], i32 16, i32 1)
; CHECK-NEXT:    [[VLD128IP2:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP1]], i32 16, i32 2)
; CHECK-NEXT:    [[VLD128IP3:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP2]], i32 16, i32 3)
; CHECK-NEXT:    [[VLD128IP4:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP3]], i32 16, i32 4)
; CHECK-NEXT:    [[VLD128IP5:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP4]], i32 16, i32 5)
; CHECK-NEXT:    [[VLD128IP6:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP5]], i32 16, i32 6)
; CHECK-NEXT:    [[VLD128IP7]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP6]], i32 16, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP8:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP9:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP8]], i32 8)
; CHECK-NEXT:    [[VSTL64IP10:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP9]], i32 8)
; CHECK-NEXT:    [[VSTH64IP11:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP10]], i32 8)
; CHECK-NEXT:    [[VSTL64IP12:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP11]], i32 8)
; CHECK-NEXT:    [[VSTH64IP13:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP12]], i32 8)
; CHECK-NEXT:    [[VSTL64IP14:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP13]], i32 8)
; CHECK-NEXT:    [[VSTH64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP14]], i32 8)
; CHECK-NEXT:    [[VSTL64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP15]], i32 8)
; CHECK-NEXT:    [[VSTH64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP16]], i32 8)
; CHECK-NEXT:    [[VSTL64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP17]], i32 8)
; CHECK-NEXT:    [[VSTH64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP18]], i32 8)
; CHECK-NEXT:    [[VSTL64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP19]], i32 8)
; CHECK-NEXT:    [[VSTH64IP21]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP20]], i32 8)
; CHECK-NEXT:    [[TMP6]] = add nuw nsw i32 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[FOR_COND_CLEANUP]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRC_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLD128IP7]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VSTH64IP21]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLD128IP22:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[SRC_PTR_CLEANUP]], i32 16, i32 0)
; CHECK-NEXT:    [[VLD128IP23:%.*]] = call i32 @llvm.riscv.esp.vld.128.ip(i32 [[VLD128IP22]], i32 16, i32 1)
; CHECK-NEXT:    [[VSTL64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[DST_PTR_CLEANUP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP24]], i32 8)
; CHECK-NEXT:    [[VSTL64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP25]], i32 8)
; CHECK-NEXT:    [[VSTH64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP26]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  %3 = lshr i32 %2, 7
  %4 = icmp ult i32 %2, 128
  br i1 %4, label %for.cond.cleanup, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %5 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  %src.ptr.loop = phi i32 [ %1, %entry ], [ %vld128ip7, %for.body ]
  %dst.ptr.loop = phi i32 [ %0, %entry ], [ %vsth64ip21, %for.body ]
  %vld128ip = call i32 @llvm.riscv.esp.vld.128.ip(i32 %src.ptr.loop, i32 16, i32 0)
  %vld128ip1 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip, i32 16, i32 1)
  %vld128ip2 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip1, i32 16, i32 2)
  %vld128ip3 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip2, i32 16, i32 3)
  %vld128ip4 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip3, i32 16, i32 4)
  %vld128ip5 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip4, i32 16, i32 5)
  %vld128ip6 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip5, i32 16, i32 6)
  %vld128ip7 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip6, i32 16, i32 7)
  %vstl64ip = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 %dst.ptr.loop, i32 8)
  %vsth64ip = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 %vstl64ip, i32 8)
  %vstl64ip8 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 %vsth64ip, i32 8)
  %vsth64ip9 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 %vstl64ip8, i32 8)
  %vstl64ip10 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 %vsth64ip9, i32 8)
  %vsth64ip11 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 %vstl64ip10, i32 8)
  %vstl64ip12 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 %vsth64ip11, i32 8)
  %vsth64ip13 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 %vstl64ip12, i32 8)
  %vstl64ip14 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 %vsth64ip13, i32 8)
  %vsth64ip15 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 %vstl64ip14, i32 8)
  %vstl64ip16 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 %vsth64ip15, i32 8)
  %vsth64ip17 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 %vstl64ip16, i32 8)
  %vstl64ip18 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 %vsth64ip17, i32 8)
  %vsth64ip19 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 %vstl64ip18, i32 8)
  %vstl64ip20 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 %vsth64ip19, i32 8)
  %vsth64ip21 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 %vstl64ip20, i32 8)
  %6 = add nuw nsw i32 %5, 1
  %7 = icmp eq i32 %6, %3
  br i1 %7, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %src.ptr.cleanup = phi i32 [ %1, %entry ], [ %vld128ip7, %for.body ]
  %dst.ptr.cleanup = phi i32 [ %0, %entry ], [ %vsth64ip21, %for.body ]
  %vld128ip22 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %src.ptr.cleanup, i32 16, i32 0)
  %vld128ip23 = call i32 @llvm.riscv.esp.vld.128.ip(i32 %vld128ip22, i32 16, i32 1)
  %vstl64ip24 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 %dst.ptr.cleanup, i32 8)
  %vsth64ip25 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 %vstl64ip24, i32 8)
  %vstl64ip26 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 %vsth64ip25, i32 8)
  %vsth64ip27 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 %vstl64ip26, i32 8)
  ret void
}

define internal void @esp32p4MemCpySrc8Dst16Const16(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc8Dst16Const16(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP3:%.*]] = lshr i32 [[TMP2]], 7
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP2]], 128
; CHECK-NEXT:    br i1 [[TMP4]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[TMP6:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLDH64IP14:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VST128IP21:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[SRC_PTR_LOOP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VST128IP:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 16)
; CHECK-NEXT:    [[VST128IP15:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP]], i32 16)
; CHECK-NEXT:    [[VST128IP16:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 [[VST128IP15]], i32 16)
; CHECK-NEXT:    [[VST128IP17:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 [[VST128IP16]], i32 16)
; CHECK-NEXT:    [[VST128IP18:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 [[VST128IP17]], i32 16)
; CHECK-NEXT:    [[VST128IP19:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 [[VST128IP18]], i32 16)
; CHECK-NEXT:    [[VST128IP20:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 [[VST128IP19]], i32 16)
; CHECK-NEXT:    [[VST128IP21]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 [[VST128IP20]], i32 16)
; CHECK-NEXT:    [[TMP6]] = add nuw nsw i32 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[FOR_COND_CLEANUP]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRC_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLDH64IP14]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VST128IP21]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLDL64IP22:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[SRC_PTR_CLEANUP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP23:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP22]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP24:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP23]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP25:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP24]], i32 8, i32 1)
; CHECK-NEXT:    [[VST128IP26:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 [[DST_PTR_CLEANUP]], i32 16)
; CHECK-NEXT:    [[VST128IP27:%.*]] = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 [[VST128IP26]], i32 16)
; CHECK-NEXT:    ret void
;
entry:
  %3 = lshr i32 %2, 7
  %4 = icmp ult i32 %2, 128
  br i1 %4, label %for.cond.cleanup, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %5 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  %src.ptr.loop = phi i32 [ %1, %entry ], [ %vldh64ip14, %for.body ]
  %dst.ptr.loop = phi i32 [ %0, %entry ], [ %vst128ip21, %for.body ]
  %vldl64ip = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %src.ptr.loop, i32 8, i32 0)
  %vldh64ip = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip, i32 8, i32 0)
  %vldl64ip1 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip, i32 8, i32 1)
  %vldh64ip2 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip1, i32 8, i32 1)
  %vldl64ip3 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip2, i32 8, i32 2)
  %vldh64ip4 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip3, i32 8, i32 2)
  %vldl64ip5 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip4, i32 8, i32 3)
  %vldh64ip6 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip5, i32 8, i32 3)
  %vldl64ip7 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip6, i32 8, i32 4)
  %vldh64ip8 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip7, i32 8, i32 4)
  %vldl64ip9 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip8, i32 8, i32 5)
  %vldh64ip10 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip9, i32 8, i32 5)
  %vldl64ip11 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip10, i32 8, i32 6)
  %vldh64ip12 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip11, i32 8, i32 6)
  %vldl64ip13 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip12, i32 8, i32 7)
  %vldh64ip14 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip13, i32 8, i32 7)
  %vst128ip = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.loop, i32 16)
  %vst128ip15 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip, i32 16)
  %vst128ip16 = call i32 @llvm.riscv.esp.vst.128.ip(i32 2, i32 %vst128ip15, i32 16)
  %vst128ip17 = call i32 @llvm.riscv.esp.vst.128.ip(i32 3, i32 %vst128ip16, i32 16)
  %vst128ip18 = call i32 @llvm.riscv.esp.vst.128.ip(i32 4, i32 %vst128ip17, i32 16)
  %vst128ip19 = call i32 @llvm.riscv.esp.vst.128.ip(i32 5, i32 %vst128ip18, i32 16)
  %vst128ip20 = call i32 @llvm.riscv.esp.vst.128.ip(i32 6, i32 %vst128ip19, i32 16)
  %vst128ip21 = call i32 @llvm.riscv.esp.vst.128.ip(i32 7, i32 %vst128ip20, i32 16)
  %6 = add nuw nsw i32 %5, 1
  %7 = icmp eq i32 %6, %3
  br i1 %7, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %src.ptr.cleanup = phi i32 [ %1, %entry ], [ %vldh64ip14, %for.body ]
  %dst.ptr.cleanup = phi i32 [ %0, %entry ], [ %vst128ip21, %for.body ]
  %vldl64ip22 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %src.ptr.cleanup, i32 8, i32 0)
  %vldh64ip23 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip22, i32 8, i32 0)
  %vldl64ip24 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip23, i32 8, i32 1)
  %vldh64ip25 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip24, i32 8, i32 1)
  %vst128ip26 = call i32 @llvm.riscv.esp.vst.128.ip(i32 0, i32 %dst.ptr.cleanup, i32 16)
  %vst128ip27 = call i32 @llvm.riscv.esp.vst.128.ip(i32 1, i32 %vst128ip26, i32 16)
  ret void
}

define internal void @esp32p4MemCpySrc8Dst8Const16(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define internal void @esp32p4MemCpySrc8Dst8Const16(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP3:%.*]] = lshr i32 [[TMP2]], 7
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP2]], 128
; CHECK-NEXT:    br i1 [[TMP4]], label %[[FOR_COND_CLEANUP:.*]], label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP5:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[TMP6:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[SRC_PTR_LOOP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLDH64IP14:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_LOOP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VSTH64IP28:%.*]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLDL64IP:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[SRC_PTR_LOOP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP1:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP2:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP1]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDL64IP3:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP2]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDH64IP4:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP3]], i32 8, i32 2)
; CHECK-NEXT:    [[VLDL64IP5:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP4]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDH64IP6:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP5]], i32 8, i32 3)
; CHECK-NEXT:    [[VLDL64IP7:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP6]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDH64IP8:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP7]], i32 8, i32 4)
; CHECK-NEXT:    [[VLDL64IP9:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP8]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDH64IP10:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP9]], i32 8, i32 5)
; CHECK-NEXT:    [[VLDL64IP11:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP10]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDH64IP12:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP11]], i32 8, i32 6)
; CHECK-NEXT:    [[VLDL64IP13:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP12]], i32 8, i32 7)
; CHECK-NEXT:    [[VLDH64IP14]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP13]], i32 8, i32 7)
; CHECK-NEXT:    [[VSTL64IP:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[DST_PTR_LOOP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP]], i32 8)
; CHECK-NEXT:    [[VSTL64IP15:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP16:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP15]], i32 8)
; CHECK-NEXT:    [[VSTL64IP17:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 [[VSTH64IP16]], i32 8)
; CHECK-NEXT:    [[VSTH64IP18:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 [[VSTL64IP17]], i32 8)
; CHECK-NEXT:    [[VSTL64IP19:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 [[VSTH64IP18]], i32 8)
; CHECK-NEXT:    [[VSTH64IP20:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 [[VSTL64IP19]], i32 8)
; CHECK-NEXT:    [[VSTL64IP21:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 [[VSTH64IP20]], i32 8)
; CHECK-NEXT:    [[VSTH64IP22:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 [[VSTL64IP21]], i32 8)
; CHECK-NEXT:    [[VSTL64IP23:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 [[VSTH64IP22]], i32 8)
; CHECK-NEXT:    [[VSTH64IP24:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 [[VSTL64IP23]], i32 8)
; CHECK-NEXT:    [[VSTL64IP25:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 [[VSTH64IP24]], i32 8)
; CHECK-NEXT:    [[VSTH64IP26:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 [[VSTL64IP25]], i32 8)
; CHECK-NEXT:    [[VSTL64IP27:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 [[VSTH64IP26]], i32 8)
; CHECK-NEXT:    [[VSTH64IP28]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 [[VSTL64IP27]], i32 8)
; CHECK-NEXT:    [[TMP6]] = add nuw nsw i32 [[TMP5]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = icmp eq i32 [[TMP6]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[FOR_COND_CLEANUP]], label %[[FOR_BODY]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    [[SRC_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP1]], %[[ENTRY]] ], [ [[VLDH64IP14]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[DST_PTR_CLEANUP:%.*]] = phi i32 [ [[TMP0]], %[[ENTRY]] ], [ [[VSTH64IP28]], %[[FOR_BODY]] ]
; CHECK-NEXT:    [[VLDL64IP29:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[SRC_PTR_CLEANUP]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDH64IP30:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP29]], i32 8, i32 0)
; CHECK-NEXT:    [[VLDL64IP31:%.*]] = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 [[VLDH64IP30]], i32 8, i32 1)
; CHECK-NEXT:    [[VLDH64IP32:%.*]] = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 [[VLDL64IP31]], i32 8, i32 1)
; CHECK-NEXT:    [[VSTL64IP33:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 [[DST_PTR_CLEANUP]], i32 8)
; CHECK-NEXT:    [[VSTH64IP34:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 [[VSTL64IP33]], i32 8)
; CHECK-NEXT:    [[VSTL64IP35:%.*]] = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 [[VSTH64IP34]], i32 8)
; CHECK-NEXT:    [[VSTH64IP36:%.*]] = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 [[VSTL64IP35]], i32 8)
; CHECK-NEXT:    ret void
;
entry:
  %3 = lshr i32 %2, 7
  %4 = icmp ult i32 %2, 128
  br i1 %4, label %for.cond.cleanup, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %5 = phi i32 [ 0, %entry ], [ %6, %for.body ]
  %src.ptr.loop = phi i32 [ %1, %entry ], [ %vldh64ip14, %for.body ]
  %dst.ptr.loop = phi i32 [ %0, %entry ], [ %vsth64ip28, %for.body ]
  %vldl64ip = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %src.ptr.loop, i32 8, i32 0)
  %vldh64ip = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip, i32 8, i32 0)
  %vldl64ip1 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip, i32 8, i32 1)
  %vldh64ip2 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip1, i32 8, i32 1)
  %vldl64ip3 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip2, i32 8, i32 2)
  %vldh64ip4 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip3, i32 8, i32 2)
  %vldl64ip5 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip4, i32 8, i32 3)
  %vldh64ip6 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip5, i32 8, i32 3)
  %vldl64ip7 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip6, i32 8, i32 4)
  %vldh64ip8 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip7, i32 8, i32 4)
  %vldl64ip9 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip8, i32 8, i32 5)
  %vldh64ip10 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip9, i32 8, i32 5)
  %vldl64ip11 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip10, i32 8, i32 6)
  %vldh64ip12 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip11, i32 8, i32 6)
  %vldl64ip13 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip12, i32 8, i32 7)
  %vldh64ip14 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip13, i32 8, i32 7)
  %vstl64ip = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 %dst.ptr.loop, i32 8)
  %vsth64ip = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 %vstl64ip, i32 8)
  %vstl64ip15 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 %vsth64ip, i32 8)
  %vsth64ip16 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 %vstl64ip15, i32 8)
  %vstl64ip17 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 2, i32 %vsth64ip16, i32 8)
  %vsth64ip18 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 2, i32 %vstl64ip17, i32 8)
  %vstl64ip19 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 3, i32 %vsth64ip18, i32 8)
  %vsth64ip20 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 3, i32 %vstl64ip19, i32 8)
  %vstl64ip21 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 4, i32 %vsth64ip20, i32 8)
  %vsth64ip22 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 4, i32 %vstl64ip21, i32 8)
  %vstl64ip23 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 5, i32 %vsth64ip22, i32 8)
  %vsth64ip24 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 5, i32 %vstl64ip23, i32 8)
  %vstl64ip25 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 6, i32 %vsth64ip24, i32 8)
  %vsth64ip26 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 6, i32 %vstl64ip25, i32 8)
  %vstl64ip27 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 7, i32 %vsth64ip26, i32 8)
  %vsth64ip28 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 7, i32 %vstl64ip27, i32 8)
  %6 = add nuw nsw i32 %5, 1
  %7 = icmp eq i32 %6, %3
  br i1 %7, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %src.ptr.cleanup = phi i32 [ %1, %entry ], [ %vldh64ip14, %for.body ]
  %dst.ptr.cleanup = phi i32 [ %0, %entry ], [ %vsth64ip28, %for.body ]
  %vldl64ip29 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %src.ptr.cleanup, i32 8, i32 0)
  %vldh64ip30 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip29, i32 8, i32 0)
  %vldl64ip31 = call i32 @llvm.riscv.esp.vld.l.64.ip(i32 %vldh64ip30, i32 8, i32 1)
  %vldh64ip32 = call i32 @llvm.riscv.esp.vld.h.64.ip(i32 %vldl64ip31, i32 8, i32 1)
  %vstl64ip33 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 0, i32 %dst.ptr.cleanup, i32 8)
  %vsth64ip34 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 0, i32 %vstl64ip33, i32 8)
  %vstl64ip35 = call i32 @llvm.riscv.esp.vst.l.64.ip(i32 1, i32 %vsth64ip34, i32 8)
  %vsth64ip36 = call i32 @llvm.riscv.esp.vst.h.64.ip(i32 1, i32 %vstl64ip35, i32 8)
  ret void
}
