; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -O1 -mtriple=riscv32 -mcpu=esp32h4 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=CHECK

define void @test(){
; CHECK-LABEL: test:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cm.push {ra, s0-s1}, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset s0, -8
; CHECK-NEXT:    .cfi_offset s1, -4
; CHECK-NEXT:    li a3, 8
; CHECK-NEXT:    li t3, 3
; CHECK-NEXT:    li t4, 12
; CHECK-NEXT:    li a6, 2
; CHECK-NEXT:    li t6, 1
; CHECK-NEXT:    li a7, 10
; CHECK-NEXT:    li a1, 13
; CHECK-NEXT:    li a4, 4
; CHECK-NEXT:    li t2, 6
; CHECK-NEXT:    li a0, 5
; CHECK-NEXT:    li t0, 11
; CHECK-NEXT:    lui t1, 266496
; CHECK-NEXT:    li a5, 7
; CHECK-NEXT:    lui t5, 263168
; CHECK-NEXT:    li a2, 14
; CHECK-NEXT:    esp.muls16ix2 s0, s1, t4, t3, 30
; CHECK-NEXT:    fmv.w.x fa5, t1
; CHECK-NEXT:    esp.muls16x2 zero, zero, a6, a3
; CHECK-NEXT:    esp.muls32i zero, a7, t6, 14
; CHECK-NEXT:    esp.muls32 zero, a7, a1
; CHECK-NEXT:    esp.shl zero, a7, a4
; CHECK-NEXT:    esp.shr zero, t2, a4
; CHECK-NEXT:    esp.abs zero, zero
; CHECK-NEXT:    esp.movr.xacc zero, t6
; CHECK-NEXT:    esp.min zero, t0, a0
; CHECK-NEXT:    esp.max zero, a0, t4
; CHECK-NEXT:    esp.clzs zero, a3
; CHECK-NEXT:    esp.flw.ip fa4, a3, -7, 1
; CHECK-NEXT:    esp.flw.xp fa4, a1, a7
; CHECK-NEXT:    esp.fsw.ip fa5, a5, 1, 1
; CHECK-NEXT:    fmv.w.x fa5, t5
; CHECK-NEXT:    esp.fsw.xp fa5, a5, a5
; CHECK-NEXT:    esp.lw.ip zero, a2, 15, 0
; CHECK-NEXT:    esp.lw.xp zero, t0, t6
; CHECK-NEXT:    esp.sw.ip a5, a7, -9, 2
; CHECK-NEXT:    esp.sw.xp a2, t2, a1
; CHECK-NEXT:    esp.lh.ip zero, t3, 14, 3
; CHECK-NEXT:    esp.lh.xp zero, a6, a5
; CHECK-NEXT:    esp.sh.ip a2, a2, -8, 1
; CHECK-NEXT:    li s1, 9
; CHECK-NEXT:    esp.sh.xp t4, t0, s1
; CHECK-NEXT:    esp.lb.ip zero, t4, 8, 3
; CHECK-NEXT:    esp.lb.xp zero, a1, t2
; CHECK-NEXT:    esp.sb.ip s1, a0, 10, 3
; CHECK-NEXT:    esp.sb.xp t6, t6, a3
; CHECK-NEXT:    esp.lhu.ip zero, t2, -6, 1
; CHECK-NEXT:    esp.lhu.xp zero, a1, t6
; CHECK-NEXT:    esp.lbu.ip zero, a5, 14, 1
; CHECK-NEXT:    esp.lbu.xp zero, a3, zero
; CHECK-NEXT:    esp.movw.xacc a2, a4
; CHECK-NEXT:    esp.macs32i s1, t2, 32
; CHECK-NEXT:    esp.macs32 a5, a6
; CHECK-NEXT:    esp.macs32.ld zero, a3, a1, a5
; CHECK-NEXT:    esp.macs32.st a4, a0, zero, zero
; CHECK-NEXT:    esp.macs16ix2 zero, a0, 17
; CHECK-NEXT:    esp.macs16x2 a6, t4
; CHECK-NEXT:    esp.macs16x2.ld zero, zero, a4, a1
; CHECK-NEXT:    esp.macs16x1.ld zero, a4, a3, t3
; CHECK-NEXT:    esp.macs16x2.st a3, zero, a4, a5
; CHECK-NEXT:    esp.msus32i a2, a2, 2
; CHECK-NEXT:    esp.msus32 t6, t3
; CHECK-NEXT:    esp.msus32.ld zero, s1, a1, a6
; CHECK-NEXT:    esp.msus32.st t0, t0, t3, a0
; CHECK-NEXT:    esp.msus16ix2 t0, a0, 5
; CHECK-NEXT:    esp.msus16x2 a2, a2
; CHECK-NEXT:    esp.msus16x2.ld zero, a5, a7, t2
; CHECK-NEXT:    esp.msus16x1.ld zero, a2, t4, t6
; CHECK-NEXT:    esp.msus16x2.st zero, a0, a0, a0
; CHECK-NEXT:    cm.popret {ra, s0-s1}, 16
	tail call void @llvm.riscv.esp.muls16ix2(i32 12, i32 3, i32 30, i32 3, i32 8)
	tail call void @llvm.riscv.esp.muls16x2(i32 2, i32 8, i32 0, i32 8)
	%1 = tail call i32 @llvm.riscv.esp.muls32i(i32 10, i32 1, i32 14)
	%2 = tail call i32 @llvm.riscv.esp.muls32(i32 10, i32 13)
	%3 = tail call i32 @llvm.riscv.esp.shl(i32 10, i32 4)
	%4 = tail call i32 @llvm.riscv.esp.shr(i32 6, i32 4)
	%5 = tail call i32 @llvm.riscv.esp.abs(i32 0)
	%6 = tail call i32 @llvm.riscv.esp.movr.xacc(i32 1)
	%7 = tail call i32 @llvm.riscv.esp.min(i32 11, i32 5)
	%8 = tail call i32 @llvm.riscv.esp.max(i32 5, i32 12)
	%9 = tail call i32 @llvm.riscv.esp.clzs(i32 8)
	%10 = tail call float @llvm.riscv.esp.flw.ip(i32 8, i32 -7, i32 1)
	%11 = tail call float @llvm.riscv.esp.flw.xp(i32 13, i32 10)
	tail call void @llvm.riscv.esp.fsw.ip(i32 7, float 9.0, i32 1, i32 1)
	tail call void @llvm.riscv.esp.fsw.xp(i32 7, i32 7, float 3.0)
	%12 = tail call i32 @llvm.riscv.esp.lw.ip(i32 14, i32 15, i32 0)
	%13 = tail call i32 @llvm.riscv.esp.lw.xp(i32 11, i32 1)
	tail call void @llvm.riscv.esp.sw.ip(i32 7, i32 10, i32 -9, i32 2)
	tail call void @llvm.riscv.esp.sw.xp(i32 14, i32 6, i32 13)
	%14 = tail call i32 @llvm.riscv.esp.lh.ip(i32 3, i32 14, i32 3)
	%15 = tail call i32 @llvm.riscv.esp.lh.xp(i32 2, i32 7)
	tail call void @llvm.riscv.esp.sh.ip(i32 14, i32 14, i32 -8, i32 1)
	tail call void @llvm.riscv.esp.sh.xp(i32 11, i32 9, i32 12)
	%16 = tail call i32 @llvm.riscv.esp.lb.ip(i32 12, i32 8, i32 3)
	%17 = tail call i32 @llvm.riscv.esp.lb.xp(i32 13, i32 6)
	tail call void @llvm.riscv.esp.sb.ip(i32 5, i32 9, i32 10, i32 3)
	tail call void @llvm.riscv.esp.sb.xp(i32 1, i32 8, i32 1)
	%18 = tail call i32 @llvm.riscv.esp.lhu.ip(i32 6, i32 -6, i32 1)
	%19 = tail call i32 @llvm.riscv.esp.lhu.xp(i32 13, i32 1)
	%20 = tail call i32 @llvm.riscv.esp.lbu.ip(i32 7, i32 14, i32 1)
	%21 = tail call i32 @llvm.riscv.esp.lbu.xp(i32 8, i32 0)
	tail call void @llvm.riscv.esp.movw.xacc(i32 14, i32 4)
	tail call void @llvm.riscv.esp.macs32i(i32 9, i32 6, i32 32)
	tail call void @llvm.riscv.esp.macs32(i32 7, i32 2)
	%22 = tail call i32 @llvm.riscv.esp.macs32.ld(i32 8, i32 13, i32 7)
	tail call void @llvm.riscv.esp.macs32.st(i32 4, i32 5, i32 0, i32 0)
	tail call void @llvm.riscv.esp.macs16ix2(i32 0, i32 5, i32 17)
	tail call void @llvm.riscv.esp.macs16x2(i32 2, i32 12)
	%23 = tail call i32 @llvm.riscv.esp.macs16x2.ld(i32 0, i32 4, i32 13)
	%24 = tail call i32 @llvm.riscv.esp.macs16x1.ld(i32 4, i32 8, i32 3)
	tail call void @llvm.riscv.esp.macs16x2.st(i32 8, i32 0, i32 4, i32 7)
	tail call void @llvm.riscv.esp.msus32i(i32 14, i32 14, i32 2)
	tail call void @llvm.riscv.esp.msus32(i32 1, i32 3)
	%25 = tail call i32 @llvm.riscv.esp.msus32.ld(i32 9, i32 13, i32 2)
	tail call void @llvm.riscv.esp.msus32.st(i32 11, i32 11, i32 3, i32 5)
	tail call void @llvm.riscv.esp.msus16ix2(i32 11, i32 5, i32 5)
	tail call void @llvm.riscv.esp.msus16x2(i32 14, i32 14)
	%26 = tail call i32 @llvm.riscv.esp.msus16x2.ld(i32 7, i32 10, i32 6)
	%27 = tail call i32 @llvm.riscv.esp.msus16x1.ld(i32 14, i32 12, i32 1)
	tail call void @llvm.riscv.esp.msus16x2.st(i32 0, i32 5, i32 5, i32 5)
	ret void
}

declare void @llvm.riscv.esp.muls16ix2(i32, i32, i32, i32, i32) nounwind
declare void @llvm.riscv.esp.muls16x2(i32, i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.muls32i(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.muls32(i32, i32) nounwind
declare i32 @llvm.riscv.esp.shl(i32, i32) nounwind
declare i32 @llvm.riscv.esp.shr(i32, i32) nounwind
declare i32 @llvm.riscv.esp.abs(i32) nounwind
declare i32 @llvm.riscv.esp.movr.xacc(i32) nounwind
declare i32 @llvm.riscv.esp.min(i32, i32) nounwind
declare i32 @llvm.riscv.esp.max(i32, i32) nounwind
declare i32 @llvm.riscv.esp.clzs(i32) nounwind
declare float @llvm.riscv.esp.flw.ip(i32, i32, i32) nounwind
declare float @llvm.riscv.esp.flw.xp(i32, i32) nounwind
declare void @llvm.riscv.esp.fsw.ip(i32, float , i32, i32) nounwind
declare void @llvm.riscv.esp.fsw.xp(i32, i32, float ) nounwind
declare i32 @llvm.riscv.esp.lw.ip(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.lw.xp(i32, i32) nounwind
declare void @llvm.riscv.esp.sw.ip(i32, i32, i32, i32) nounwind
declare void @llvm.riscv.esp.sw.xp(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.lh.ip(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.lh.xp(i32, i32) nounwind
declare void @llvm.riscv.esp.sh.ip(i32, i32, i32, i32) nounwind
declare void @llvm.riscv.esp.sh.xp(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.lb.ip(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.lb.xp(i32, i32) nounwind
declare void @llvm.riscv.esp.sb.ip(i32, i32, i32, i32) nounwind
declare void @llvm.riscv.esp.sb.xp(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.lhu.ip(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.lhu.xp(i32, i32) nounwind
declare i32 @llvm.riscv.esp.lbu.ip(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.lbu.xp(i32, i32) nounwind
declare void @llvm.riscv.esp.movw.xacc(i32, i32) nounwind
declare void @llvm.riscv.esp.macs32i(i32, i32, i32) nounwind
declare void @llvm.riscv.esp.macs32(i32, i32) nounwind
declare i32 @llvm.riscv.esp.macs32.ld(i32, i32, i32) nounwind
declare void @llvm.riscv.esp.macs32.st(i32, i32, i32, i32) nounwind
declare void @llvm.riscv.esp.macs16ix2(i32, i32, i32) nounwind
declare void @llvm.riscv.esp.macs16x2(i32, i32) nounwind
declare i32 @llvm.riscv.esp.macs16x2.ld(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.macs16x1.ld(i32, i32, i32) nounwind
declare void @llvm.riscv.esp.macs16x2.st(i32, i32, i32, i32) nounwind
declare void @llvm.riscv.esp.msus32i(i32, i32, i32) nounwind
declare void @llvm.riscv.esp.msus32(i32, i32) nounwind
declare i32 @llvm.riscv.esp.msus32.ld(i32, i32, i32) nounwind
declare void @llvm.riscv.esp.msus32.st(i32, i32, i32, i32) nounwind
declare void @llvm.riscv.esp.msus16ix2(i32, i32, i32) nounwind
declare void @llvm.riscv.esp.msus16x2(i32, i32) nounwind
declare i32 @llvm.riscv.esp.msus16x2.ld(i32, i32, i32) nounwind
declare i32 @llvm.riscv.esp.msus16x1.ld(i32, i32, i32) nounwind
declare void @llvm.riscv.esp.msus16x2.st(i32, i32, i32, i32) nounwind
